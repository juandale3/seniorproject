
F303k8_watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008128  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080082b8  080082b8  000182b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086ac  080086ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080086ac  080086ac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086ac  080086ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086ac  080086ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080086b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000334  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000514  20000514  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012eb7  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000250f  00000000  00000000  0003310a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011b0  00000000  00000000  00035620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df4  00000000  00000000  000367d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cc1d  00000000  00000000  000375c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015f7c  00000000  00000000  000541e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a9720  00000000  00000000  0006a15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d3c  00000000  00000000  00113880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  001195bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082a0 	.word	0x080082a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080082a0 	.word	0x080082a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fd73 	bl	8001698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f849 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f97f 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f94d 	bl	8000e58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bbe:	f000 f895 	bl	8000cec <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bc2:	f000 f8d3 	bl	8000d6c <MX_SPI1_Init>
  MX_TIM6_Init();
 8000bc6:	f000 f90f 	bl	8000de8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8000bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bce:	f000 fdc9 	bl	8001764 <HAL_Delay>
  sprintf(message,"Starts\r\n");
 8000bd2:	4915      	ldr	r1, [pc, #84]	; (8000c28 <main+0x80>)
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <main+0x84>)
 8000bd6:	f005 fa05 	bl	8005fe4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) message, 9, HAL_MAX_DELAY);
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	2209      	movs	r2, #9
 8000be0:	4912      	ldr	r1, [pc, #72]	; (8000c2c <main+0x84>)
 8000be2:	4813      	ldr	r0, [pc, #76]	; (8000c30 <main+0x88>)
 8000be4:	f004 f900 	bl	8004de8 <HAL_UART_Transmit>

  getTime();
 8000be8:	f000 faae 	bl	8001148 <getTime>
  sprintf(buffer, "Date:\t%02d:%02d:%02d\r\n\n", time.month, time.dayOfMonth, time.year);
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <main+0x8c>)
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <main+0x8c>)
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <main+0x8c>)
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	490d      	ldr	r1, [pc, #52]	; (8000c38 <main+0x90>)
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <main+0x94>)
 8000c04:	f005 f9ee 	bl	8005fe4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) buffer, 30, HAL_MAX_DELAY);
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	221e      	movs	r2, #30
 8000c0e:	490b      	ldr	r1, [pc, #44]	; (8000c3c <main+0x94>)
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <main+0x88>)
 8000c12:	f004 f8e9 	bl	8004de8 <HAL_UART_Transmit>

//  HAL_TIM_Base_Start_IT(&htim6);	// Starts Sleep timer
  HAL_SPI_Transmit(&hspi1, spiData, 8, HAL_MAX_DELAY);
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	4908      	ldr	r1, [pc, #32]	; (8000c40 <main+0x98>)
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <main+0x9c>)
 8000c20:	f003 fabb 	bl	800419a <HAL_SPI_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <main+0x7c>
 8000c26:	bf00      	nop
 8000c28:	080082b8 	.word	0x080082b8
 8000c2c:	20000388 	.word	0x20000388
 8000c30:	20000300 	.word	0x20000300
 8000c34:	200003b8 	.word	0x200003b8
 8000c38:	080082c4 	.word	0x080082c4
 8000c3c:	20000398 	.word	0x20000398
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000250 	.word	0x20000250

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b096      	sub	sp, #88	; 0x58
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c52:	2228      	movs	r2, #40	; 0x28
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f005 fa27 	bl	80060aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
 8000c7a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c84:	2310      	movs	r3, #16
 8000c86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fe45 	bl	8002920 <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c9c:	f000 faa4 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fe6e 	bl	800399c <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cc6:	f000 fa8f 	bl	80011e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 f897 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ce0:	f000 fa82 	bl	80011e8 <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3758      	adds	r7, #88	; 0x58
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_I2C1_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <MX_I2C1_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d28:	f000 ffec 	bl	8001d04 <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 fa59 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d3a:	f001 fd59 	bl	80027f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 fa50 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d4c:	f001 fd9b 	bl	8002886 <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 fa47 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001fc 	.word	0x200001fc
 8000d64:	40005400 	.word	0x40005400
 8000d68:	2000090e 	.word	0x2000090e

08000d6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	; (8000de4 <MX_SPI1_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000d86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000dba:	2207      	movs	r2, #7
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_SPI1_Init+0x74>)
 8000dcc:	f003 f942 	bl	8004054 <HAL_SPI_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 fa07 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000250 	.word	0x20000250
 8000de4:	40013000 	.word	0x40013000

08000de8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <MX_TIM6_Init+0x6c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000 - 1;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e00:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000e04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e1c:	f003 fc96 	bl	800474c <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e26:	f000 f9df 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e38:	f003 fefc 	bl	8004c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000e42:	f000 f9d1 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200002b4 	.word	0x200002b4
 8000e54:	40001000 	.word	0x40001000

08000e58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e64:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e9c:	f003 ff56 	bl	8004d4c <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 f99f 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000300 	.word	0x20000300
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_GPIO_Init+0x94>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f20:	2302      	movs	r3, #2
 8000f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f000 fd5f 	bl	80019f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2006      	movs	r0, #6
 8000f38:	f000 fd23 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f3c:	2006      	movs	r0, #6
 8000f3e:	f000 fd3c 	bl	80019ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d13e      	bne.n	8000fde <HAL_GPIO_EXTI_Callback+0x8e>
		if(powerMode == 0){	// Sleep Mode
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d117      	bne.n	8000f98 <HAL_GPIO_EXTI_Callback+0x48>
			HAL_ResumeTick();
 8000f68:	f000 fc20 	bl	80017ac <HAL_ResumeTick>
			powerMode = 1;	// Turn On
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]

			sprintf(message,"Awaken!\r\n");
 8000f72:	491e      	ldr	r1, [pc, #120]	; (8000fec <HAL_GPIO_EXTI_Callback+0x9c>)
 8000f74:	481e      	ldr	r0, [pc, #120]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f76:	f005 f835 	bl	8005fe4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *) message, 9, HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	2209      	movs	r2, #9
 8000f80:	491b      	ldr	r1, [pc, #108]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f84:	f003 ff30 	bl	8004de8 <HAL_UART_Transmit>

			__HAL_TIM_SET_COUNTER(&htim6, 0);	// Resets Timer
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);	// Timer counts down to sleep again
 8000f90:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f92:	f003 fc33 	bl	80047fc <HAL_TIM_Base_Start_IT>
			sprintf(message,"Time Set\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t *) message, 10, HAL_MAX_DELAY);
		}

	}
}
 8000f96:	e022      	b.n	8000fde <HAL_GPIO_EXTI_Callback+0x8e>
		}else if(powerMode == 1 ){
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d103      	bne.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x58>
			powerMode = 0;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	e01a      	b.n	8000fde <HAL_GPIO_EXTI_Callback+0x8e>
		}else if(powerMode == 3){
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d116      	bne.n	8000fde <HAL_GPIO_EXTI_Callback+0x8e>
			setTime(0, 10, 18, 7, 17, 2, 24);
 8000fb0:	2318      	movs	r3, #24
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2311      	movs	r3, #17
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	2212      	movs	r2, #18
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f870 	bl	80010a8 <setTime>
			sprintf(message,"Time Set\r\n");
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <HAL_GPIO_EXTI_Callback+0xac>)
 8000fca:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fcc:	f005 f80a 	bl	8005fe4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *) message, 10, HAL_MAX_DELAY);
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	4906      	ldr	r1, [pc, #24]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fda:	f003 ff05 	bl	8004de8 <HAL_UART_Transmit>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	080082dc 	.word	0x080082dc
 8000ff0:	20000388 	.word	0x20000388
 8000ff4:	20000300 	.word	0x20000300
 8000ff8:	200002b4 	.word	0x200002b4
 8000ffc:	080082e8 	.word	0x080082e8

08001000 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d102      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x16>
		powerMode = 0;	// Sleeps
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
//		sprintf(message,"Timer Sleep!\r\n");
//		HAL_UART_Transmit(&huart2, (uint8_t *) message, 14, HAL_MAX_DELAY);

	}
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200002b4 	.word	0x200002b4
 8001028:	20000000 	.word	0x20000000

0800102c <decToBcd>:

	HAL_SuspendTick();
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

}
uint8_t decToBcd(int val){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <decToBcd+0x48>)
 8001038:	fb82 1203 	smull	r1, r2, r2, r3
 800103c:	1092      	asrs	r2, r2, #2
 800103e:	17db      	asrs	r3, r3, #31
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	b2d8      	uxtb	r0, r3
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <decToBcd+0x48>)
 800104c:	fb83 1302 	smull	r1, r3, r3, r2
 8001050:	1099      	asrs	r1, r3, #2
 8001052:	17d3      	asrs	r3, r2, #31
 8001054:	1ac9      	subs	r1, r1, r3
 8001056:	460b      	mov	r3, r1
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	1ad1      	subs	r1, r2, r3
 8001060:	b2cb      	uxtb	r3, r1
 8001062:	4403      	add	r3, r0
 8001064:	b2db      	uxtb	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	66666667 	.word	0x66666667

08001078 <bcdToDec>:
int bcdToDec(uint8_t val){
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10) + (val%16));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	461a      	mov	r2, r3
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	4413      	add	r3, r2
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <setTime>:
void setTime(uint8_t seconds, uint8_t minutes, uint8_t hour, uint8_t dayOfWeek, uint8_t dayOfMonth, uint8_t month, uint8_t year){
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	4604      	mov	r4, r0
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4623      	mov	r3, r4
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	4603      	mov	r3, r0
 80010bc:	71bb      	strb	r3, [r7, #6]
 80010be:	460b      	mov	r3, r1
 80010c0:	717b      	strb	r3, [r7, #5]
 80010c2:	4613      	mov	r3, r2
 80010c4:	713b      	strb	r3, [r7, #4]
	uint8_t timeArr[7];
	timeArr[0] = decToBcd(seconds);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffaf 	bl	800102c <decToBcd>
 80010ce:	4603      	mov	r3, r0
 80010d0:	723b      	strb	r3, [r7, #8]
	timeArr[1] = decToBcd(minutes);
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffa9 	bl	800102c <decToBcd>
 80010da:	4603      	mov	r3, r0
 80010dc:	727b      	strb	r3, [r7, #9]
	timeArr[2] = decToBcd(hour);
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffa3 	bl	800102c <decToBcd>
 80010e6:	4603      	mov	r3, r0
 80010e8:	72bb      	strb	r3, [r7, #10]
	timeArr[3] = decToBcd(dayOfWeek);
 80010ea:	793b      	ldrb	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff9d 	bl	800102c <decToBcd>
 80010f2:	4603      	mov	r3, r0
 80010f4:	72fb      	strb	r3, [r7, #11]
	timeArr[4] = decToBcd(dayOfMonth);
 80010f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff96 	bl	800102c <decToBcd>
 8001100:	4603      	mov	r3, r0
 8001102:	733b      	strb	r3, [r7, #12]
	timeArr[5] = decToBcd(month);
 8001104:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff8f 	bl	800102c <decToBcd>
 800110e:	4603      	mov	r3, r0
 8001110:	737b      	strb	r3, [r7, #13]
	timeArr[6] = decToBcd(year);
 8001112:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff88 	bl	800102c <decToBcd>
 800111c:	4603      	mov	r3, r0
 800111e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, timeArr, 7, HAL_MAX_DELAY);
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2307      	movs	r3, #7
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	2200      	movs	r2, #0
 8001134:	21d0      	movs	r1, #208	; 0xd0
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <setTime+0x9c>)
 8001138:	f000 fe74 	bl	8001e24 <HAL_I2C_Mem_Write>
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	200001fc 	.word	0x200001fc

08001148 <getTime>:
void getTime(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af04      	add	r7, sp, #16
	uint8_t timeArr[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, timeArr, 7, HAL_MAX_DELAY);
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2307      	movs	r3, #7
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	463b      	mov	r3, r7
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2200      	movs	r2, #0
 8001160:	21d0      	movs	r1, #208	; 0xd0
 8001162:	481f      	ldr	r0, [pc, #124]	; (80011e0 <getTime+0x98>)
 8001164:	f000 ff72 	bl	800204c <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(timeArr[0]);
 8001168:	783b      	ldrb	r3, [r7, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff84 	bl	8001078 <bcdToDec>
 8001170:	4603      	mov	r3, r0
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <getTime+0x9c>)
 8001176:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(timeArr[1]);
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff7c 	bl	8001078 <bcdToDec>
 8001180:	4603      	mov	r3, r0
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <getTime+0x9c>)
 8001186:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(timeArr[2]);
 8001188:	78bb      	ldrb	r3, [r7, #2]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff74 	bl	8001078 <bcdToDec>
 8001190:	4603      	mov	r3, r0
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <getTime+0x9c>)
 8001196:	709a      	strb	r2, [r3, #2]
	time.dayOfWeek = bcdToDec(timeArr[3]);
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff6c 	bl	8001078 <bcdToDec>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <getTime+0x9c>)
 80011a6:	70da      	strb	r2, [r3, #3]
	time.dayOfMonth = bcdToDec(timeArr[4]);
 80011a8:	793b      	ldrb	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff64 	bl	8001078 <bcdToDec>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <getTime+0x9c>)
 80011b6:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(timeArr[5]);
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff5c 	bl	8001078 <bcdToDec>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <getTime+0x9c>)
 80011c6:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(timeArr[6]);
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff54 	bl	8001078 <bcdToDec>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <getTime+0x9c>)
 80011d6:	719a      	strb	r2, [r3, #6]
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200001fc 	.word	0x200001fc
 80011e4:	200003b8 	.word	0x200003b8

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x44>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_MspInit+0x44>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_MspInit+0x44>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x44>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x44>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x44>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <HAL_I2C_MspInit+0x7c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d127      	bne.n	80012ae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_I2C_MspInit+0x80>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_I2C_MspInit+0x80>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_I2C_MspInit+0x80>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001276:	23c0      	movs	r3, #192	; 0xc0
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001286:	2304      	movs	r3, #4
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <HAL_I2C_MspInit+0x84>)
 8001292:	f000 fbad 	bl	80019f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_I2C_MspInit+0x80>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_I2C_MspInit+0x80>)
 800129c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_I2C_MspInit+0x80>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40005400 	.word	0x40005400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000400 	.word	0x48000400

080012c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_SPI_MspInit+0x7c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d128      	bne.n	8001338 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_SPI_MspInit+0x80>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <HAL_SPI_MspInit+0x80>)
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_SPI_MspInit+0x80>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001316:	23a0      	movs	r3, #160	; 0xa0
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001326:	2305      	movs	r3, #5
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f000 fb5c 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013000 	.word	0x40013000
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <HAL_TIM_Base_MspInit+0x44>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d113      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2036      	movs	r0, #54	; 0x36
 8001378:	f000 fb03 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800137c:	2036      	movs	r0, #54	; 0x36
 800137e:	f000 fb1c 	bl	80019ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40001000 	.word	0x40001000
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <HAL_UART_MspInit+0x80>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d129      	bne.n	800140a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80013e6:	f248 0304 	movw	r3, #32772	; 0x8004
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f8:	2307      	movs	r3, #7
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f000 faf3 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40004400 	.word	0x40004400
 8001418:	40021000 	.word	0x40021000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f95c 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fc2d 	bl	8001cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM6_DAC1_IRQHandler+0x10>)
 8001486:	f003 fa15 	bl	80048b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200002b4 	.word	0x200002b4

08001494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return 1;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_kill>:

int _kill(int pid, int sig)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ae:	f004 fe4f 	bl	8006150 <__errno>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2216      	movs	r2, #22
 80014b6:	601a      	str	r2, [r3, #0]
  return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe7 	bl	80014a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d6:	e7fe      	b.n	80014d6 <_exit+0x12>

080014d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ea:	f3af 8000 	nop.w
 80014ee:	4601      	mov	r1, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf0      	blt.n	80014ea <_read+0x12>
  }

  return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e009      	b.n	8001538 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf1      	blt.n	8001524 <_write+0x12>
  }
  return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_close>:

int _close(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	605a      	str	r2, [r3, #4]
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_isatty>:

int _isatty(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f004 fdb4 	bl	8006150 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20003000 	.word	0x20003000
 8001614:	00000400 	.word	0x00000400
 8001618:	200003c0 	.word	0x200003c0
 800161c:	20000518 	.word	0x20000518

08001620 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001648:	f7ff ffea 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <LoopForever+0x6>)
  ldr r1, =_edata
 800164e:	490d      	ldr	r1, [pc, #52]	; (8001684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <LoopForever+0xe>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001664:	4c0a      	ldr	r4, [pc, #40]	; (8001690 <LoopForever+0x16>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001672:	f004 fd73 	bl	800615c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001676:	f7ff fa97 	bl	8000ba8 <main>

0800167a <LoopForever>:

LoopForever:
    b LoopForever
 800167a:	e7fe      	b.n	800167a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800167c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001688:	080086b4 	.word	0x080086b4
  ldr r2, =_sbss
 800168c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001690:	20000514 	.word	0x20000514

08001694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC1_2_IRQHandler>
	...

08001698 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x28>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x28>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f95f 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fd9e 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40022000 	.word	0x40022000

080016c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f977 	bl	80019d6 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f93f 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000000c 	.word	0x2000000c
 800171c:	20000014 	.word	0x20000014
 8001720:	20000010 	.word	0x20000010

08001724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000014 	.word	0x20000014
 8001748:	200003c4 	.word	0x200003c4

0800174c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200003c4 	.word	0x200003c4

08001764 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000014 	.word	0x20000014

080017ac <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_ResumeTick+0x1c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_ResumeTick+0x1c>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	6013      	str	r3, [r2, #0]
  
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff29 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff3e 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff8e 	bl	80018c0 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5d 	bl	800186c <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff31 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fe:	e14e      	b.n	8001c9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8140 	beq.w	8001c98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d005      	beq.n	8001a30 <HAL_GPIO_Init+0x40>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 0201 	and.w	r2, r3, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d017      	beq.n	8001ace <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d123      	bne.n	8001b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0203 	and.w	r2, r3, #3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 809a 	beq.w	8001c98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b64:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b52      	ldr	r3, [pc, #328]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b7c:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ba6:	d013      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <HAL_GPIO_Init+0x2d4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00d      	beq.n	8001bcc <HAL_GPIO_Init+0x1dc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a45      	ldr	r2, [pc, #276]	; (8001cc8 <HAL_GPIO_Init+0x2d8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d007      	beq.n	8001bc8 <HAL_GPIO_Init+0x1d8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a44      	ldr	r2, [pc, #272]	; (8001ccc <HAL_GPIO_Init+0x2dc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_GPIO_Init+0x1d4>
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	e004      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	f002 0203 	and.w	r2, r2, #3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001be2:	4937      	ldr	r1, [pc, #220]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf0:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c14:	4a2e      	ldr	r2, [pc, #184]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c3e:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f aea9 	bne.w	8001a00 <HAL_GPIO_Init+0x10>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	48000c00 	.word	0x48000c00
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f92c 	bl	8000f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e081      	b.n	8001e1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fa86 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2224      	movs	r2, #36	; 0x24
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e006      	b.n	8001d8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d104      	bne.n	8001d9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69d9      	ldr	r1, [r3, #28]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	461a      	mov	r2, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	817b      	strh	r3, [r7, #10]
 8001e36:	460b      	mov	r3, r1
 8001e38:	813b      	strh	r3, [r7, #8]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	f040 80f9 	bne.w	800203e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x34>
 8001e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0ed      	b.n	8002040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2C_Mem_Write+0x4e>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e0e6      	b.n	8002040 <HAL_I2C_Mem_Write+0x21c>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e7a:	f7ff fc67 	bl	800174c <HAL_GetTick>
 8001e7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2319      	movs	r3, #25
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fac3 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d1      	b.n	8002040 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2221      	movs	r2, #33	; 0x21
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a3a      	ldr	r2, [r7, #32]
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ec4:	88f8      	ldrh	r0, [r7, #6]
 8001ec6:	893a      	ldrh	r2, [r7, #8]
 8001ec8:	8979      	ldrh	r1, [r7, #10]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f9d3 	bl	8002280 <I2C_RequestMemoryWrite>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0a9      	b.n	8002040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d90e      	bls.n	8001f14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	8979      	ldrh	r1, [r7, #10]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fc3d 	bl	800278c <I2C_TransferConfig>
 8001f12:	e00f      	b.n	8001f34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	8979      	ldrh	r1, [r7, #10]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fc2c 	bl	800278c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fabc 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e07b      	b.n	8002040 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d034      	beq.n	8001fec <HAL_I2C_Mem_Write+0x1c8>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d130      	bne.n	8001fec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	2200      	movs	r2, #0
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fa3f 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e04d      	b.n	8002040 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2bff      	cmp	r3, #255	; 0xff
 8001fac:	d90e      	bls.n	8001fcc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	22ff      	movs	r2, #255	; 0xff
 8001fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	8979      	ldrh	r1, [r7, #10]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fbe1 	bl	800278c <I2C_TransferConfig>
 8001fca:	e00f      	b.n	8001fec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	8979      	ldrh	r1, [r7, #10]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fbd0 	bl	800278c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d19e      	bne.n	8001f34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 faa2 	bl	8002544 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e01a      	b.n	8002040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2220      	movs	r2, #32
 8002010:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_I2C_Mem_Write+0x224>)
 800201e:	400b      	ands	r3, r1
 8002020:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e000      	b.n	8002040 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800203e:	2302      	movs	r3, #2
  }
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	fe00e800 	.word	0xfe00e800

0800204c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	4608      	mov	r0, r1
 8002056:	4611      	mov	r1, r2
 8002058:	461a      	mov	r2, r3
 800205a:	4603      	mov	r3, r0
 800205c:	817b      	strh	r3, [r7, #10]
 800205e:	460b      	mov	r3, r1
 8002060:	813b      	strh	r3, [r7, #8]
 8002062:	4613      	mov	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	f040 80fd 	bne.w	800226e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_I2C_Mem_Read+0x34>
 800207a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002086:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0f1      	b.n	8002270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_I2C_Mem_Read+0x4e>
 8002096:	2302      	movs	r3, #2
 8002098:	e0ea      	b.n	8002270 <HAL_I2C_Mem_Read+0x224>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020a2:	f7ff fb53 	bl	800174c <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2319      	movs	r3, #25
 80020ae:	2201      	movs	r2, #1
 80020b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f9af 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0d5      	b.n	8002270 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2222      	movs	r2, #34	; 0x22
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2240      	movs	r2, #64	; 0x40
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a3a      	ldr	r2, [r7, #32]
 80020de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ec:	88f8      	ldrh	r0, [r7, #6]
 80020ee:	893a      	ldrh	r2, [r7, #8]
 80020f0:	8979      	ldrh	r1, [r7, #10]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4603      	mov	r3, r0
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f913 	bl	8002328 <I2C_RequestMemoryRead>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0ad      	b.n	8002270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	2bff      	cmp	r3, #255	; 0xff
 800211c:	d90e      	bls.n	800213c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	22ff      	movs	r2, #255	; 0xff
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	b2da      	uxtb	r2, r3
 800212a:	8979      	ldrh	r1, [r7, #10]
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HAL_I2C_Mem_Read+0x22c>)
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fb29 	bl	800278c <I2C_TransferConfig>
 800213a:	e00f      	b.n	800215c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	b2da      	uxtb	r2, r3
 800214c:	8979      	ldrh	r1, [r7, #10]
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_I2C_Mem_Read+0x22c>)
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fb18 	bl	800278c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	2200      	movs	r2, #0
 8002164:	2104      	movs	r1, #4
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f956 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e07c      	b.n	8002270 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d034      	beq.n	800221c <HAL_I2C_Mem_Read+0x1d0>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d130      	bne.n	800221c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	2200      	movs	r2, #0
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f927 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e04d      	b.n	8002270 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d90e      	bls.n	80021fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	22ff      	movs	r2, #255	; 0xff
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	8979      	ldrh	r1, [r7, #10]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fac9 	bl	800278c <I2C_TransferConfig>
 80021fa:	e00f      	b.n	800221c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	b2da      	uxtb	r2, r3
 800220c:	8979      	ldrh	r1, [r7, #10]
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fab8 	bl	800278c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d19a      	bne.n	800215c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f98a 	bl	8002544 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e01a      	b.n	8002270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2220      	movs	r2, #32
 8002240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_I2C_Mem_Read+0x230>)
 800224e:	400b      	ands	r3, r1
 8002250:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800226e:	2302      	movs	r3, #2
  }
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	80002400 	.word	0x80002400
 800227c:	fe00e800 	.word	0xfe00e800

08002280 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4603      	mov	r3, r0
 8002290:	817b      	strh	r3, [r7, #10]
 8002292:	460b      	mov	r3, r1
 8002294:	813b      	strh	r3, [r7, #8]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	8979      	ldrh	r1, [r7, #10]
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <I2C_RequestMemoryWrite+0xa4>)
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fa6f 	bl	800278c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f8ff 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e02c      	b.n	800231c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022c8:	893b      	ldrh	r3, [r7, #8]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
 80022d2:	e015      	b.n	8002300 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022d4:	893b      	ldrh	r3, [r7, #8]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	69b9      	ldr	r1, [r7, #24]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f8e5 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e012      	b.n	800231c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022f6:	893b      	ldrh	r3, [r7, #8]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2200      	movs	r2, #0
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f884 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	80002000 	.word	0x80002000

08002328 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	817b      	strh	r3, [r7, #10]
 800233a:	460b      	mov	r3, r1
 800233c:	813b      	strh	r3, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <I2C_RequestMemoryRead+0xa4>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2300      	movs	r3, #0
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fa1c 	bl	800278c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8ac 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e02c      	b.n	80023c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800236e:	893b      	ldrh	r3, [r7, #8]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
 8002378:	e015      	b.n	80023a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800237a:	893b      	ldrh	r3, [r7, #8]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b29b      	uxth	r3, r3
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f892 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e012      	b.n	80023c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800239c:	893b      	ldrh	r3, [r7, #8]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2200      	movs	r2, #0
 80023ae:	2140      	movs	r1, #64	; 0x40
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f831 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	80002000 	.word	0x80002000

080023d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d103      	bne.n	80023ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d007      	beq.n	800240c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	619a      	str	r2, [r3, #24]
  }
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002428:	e031      	b.n	800248e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d02d      	beq.n	800248e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7ff f98b 	bl	800174c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d122      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4013      	ands	r3, r2
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	429a      	cmp	r2, r3
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d113      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4013      	ands	r3, r2
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	bf0c      	ite	eq
 800249e:	2301      	moveq	r3, #1
 80024a0:	2300      	movne	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d0be      	beq.n	800242a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024c2:	e033      	b.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f87f 	bl	80025cc <I2C_IsErrorOccurred>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e031      	b.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d025      	beq.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e0:	f7ff f934 	bl	800174c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d302      	bcc.n	80024f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11a      	bne.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d013      	beq.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d1c4      	bne.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002550:	e02f      	b.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f838 	bl	80025cc <I2C_IsErrorOccurred>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e02d      	b.n	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7ff f8f1 	bl	800174c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11a      	bne.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b20      	cmp	r3, #32
 8002588:	d013      	beq.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e007      	b.n	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d1c8      	bne.n	8002552 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d068      	beq.n	80026ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2210      	movs	r2, #16
 80025fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002600:	e049      	b.n	8002696 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d045      	beq.n	8002696 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7ff f89f 	bl	800174c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <I2C_IsErrorOccurred+0x54>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d13a      	bne.n	8002696 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002632:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800263e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002642:	d121      	bne.n	8002688 <I2C_IsErrorOccurred+0xbc>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264a:	d01d      	beq.n	8002688 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b20      	cmp	r3, #32
 8002650:	d01a      	beq.n	8002688 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002660:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002662:	f7ff f873 	bl	800174c <HAL_GetTick>
 8002666:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002668:	e00e      	b.n	8002688 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800266a:	f7ff f86f 	bl	800174c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b19      	cmp	r3, #25
 8002676:	d907      	bls.n	8002688 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002686:	e006      	b.n	8002696 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b20      	cmp	r3, #32
 8002694:	d1e9      	bne.n	800266a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d003      	beq.n	80026ac <I2C_IsErrorOccurred+0xe0>
 80026a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0aa      	beq.n	8002602 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d103      	bne.n	80026bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2220      	movs	r2, #32
 80026ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800270e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01c      	beq.n	800277a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff fe45 	bl	80023d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <I2C_IsErrorOccurred+0x1bc>)
 8002752:	400b      	ands	r3, r1
 8002754:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	431a      	orrs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800277a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800277e:	4618      	mov	r0, r3
 8002780:	3728      	adds	r7, #40	; 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	fe00e800 	.word	0xfe00e800

0800278c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	817b      	strh	r3, [r7, #10]
 800279a:	4613      	mov	r3, r2
 800279c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800279e:	897b      	ldrh	r3, [r7, #10]
 80027a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027a4:	7a7b      	ldrb	r3, [r7, #9]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	0d5b      	lsrs	r3, r3, #21
 80027c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <I2C_TransferConfig+0x60>)
 80027cc:	430b      	orrs	r3, r1
 80027ce:	43db      	mvns	r3, r3
 80027d0:	ea02 0103 	and.w	r1, r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	03ff63ff 	.word	0x03ff63ff

080027f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b20      	cmp	r3, #32
 8002804:	d138      	bne.n	8002878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002810:	2302      	movs	r3, #2
 8002812:	e032      	b.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	; 0x24
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b20      	cmp	r3, #32
 800289a:	d139      	bne.n	8002910 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e033      	b.n	8002912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2224      	movs	r2, #36	; 0x24
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e000      	b.n	8002912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002926:	af00      	add	r7, sp, #0
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002930:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f001 b823 	b.w	800398c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 817d 	beq.w	8002c56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800295c:	4bbc      	ldr	r3, [pc, #752]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b04      	cmp	r3, #4
 8002966:	d00c      	beq.n	8002982 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002968:	4bb9      	ldr	r3, [pc, #740]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d15c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x10e>
 8002974:	4bb6      	ldr	r3, [pc, #728]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d155      	bne.n	8002a2e <HAL_RCC_OscConfig+0x10e>
 8002982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002986:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002996:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0x94>
 80029ae:	4ba8      	ldr	r3, [pc, #672]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e015      	b.n	80029e0 <HAL_RCC_OscConfig+0xc0>
 80029b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029dc:	4b9c      	ldr	r3, [pc, #624]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029f8:	fab2 f282 	clz	r2, r2
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f002 021f 	and.w	r2, r2, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 811f 	beq.w	8002c54 <HAL_RCC_OscConfig+0x334>
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 8116 	bne.w	8002c54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f000 bfaf 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12e>
 8002a40:	4b83      	ldr	r3, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a82      	ldr	r2, [pc, #520]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e036      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x158>
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7b      	ldr	r2, [pc, #492]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b79      	ldr	r3, [pc, #484]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a78      	ldr	r2, [pc, #480]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e021      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x184>
 8002a8a:	4b71      	ldr	r3, [pc, #452]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a70      	ldr	r2, [pc, #448]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b6e      	ldr	r3, [pc, #440]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6d      	ldr	r2, [pc, #436]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a69      	ldr	r2, [pc, #420]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b67      	ldr	r3, [pc, #412]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a66      	ldr	r2, [pc, #408]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002abc:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f023 020f 	bic.w	r2, r3, #15
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	495f      	ldr	r1, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d059      	beq.n	8002b9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fe31 	bl	800174c <HAL_GetTick>
 8002aea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe fe2c 	bl	800174c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d902      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	f000 bf43 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_RCC_OscConfig+0x218>
 8002b32:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e015      	b.n	8002b64 <HAL_RCC_OscConfig+0x244>
 8002b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b60:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b70:	fa92 f2a2 	rbit	r2, r2
 8002b74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ab      	beq.n	8002af0 <HAL_RCC_OscConfig+0x1d0>
 8002b98:	e05d      	b.n	8002c56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fdd7 	bl	800174c <HAL_GetTick>
 8002b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fdd2 	bl	800174c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d902      	bls.n	8002bba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f000 bee9 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d102      	bne.n	8002bec <HAL_RCC_OscConfig+0x2cc>
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_OscConfig+0x2f8>
 8002bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ab      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x284>
 8002c4c:	e003      	b.n	8002c56 <HAL_RCC_OscConfig+0x336>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 817d 	beq.w	8002f66 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c6c:	4ba6      	ldr	r3, [pc, #664]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c78:	4ba3      	ldr	r3, [pc, #652]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d172      	bne.n	8002d6a <HAL_RCC_OscConfig+0x44a>
 8002c84:	4ba0      	ldr	r3, [pc, #640]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d16c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x44a>
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ca2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3a0>
 8002cba:	4b93      	ldr	r3, [pc, #588]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e013      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c8>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ce4:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cf2:	fa92 f2a2 	rbit	r2, r2
 8002cf6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cfa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cfe:	fab2 f282 	clz	r2, r2
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCC_OscConfig+0x410>
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f000 be2e 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b75      	ldr	r3, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	21f8      	movs	r1, #248	; 0xf8
 8002d46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d4e:	fa91 f1a1 	rbit	r1, r1
 8002d52:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d56:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d5a:	fab1 f181 	clz	r1, r1
 8002d5e:	b2c9      	uxtb	r1, r1
 8002d60:	408b      	lsls	r3, r1
 8002d62:	4969      	ldr	r1, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d68:	e0fd      	b.n	8002f66 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8088 	beq.w	8002e8c <HAL_RCC_OscConfig+0x56c>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	2301      	movs	r3, #1
 8002da6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fcd0 	bl	800174c <HAL_GetTick>
 8002dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fccb 	bl	800174c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	f000 bde2 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4d8>
 8002df2:	4b45      	ldr	r3, [pc, #276]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	e013      	b.n	8002e20 <HAL_RCC_OscConfig+0x500>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2202      	movs	r2, #2
 8002e22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f042 0220 	orr.w	r2, r2, #32
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f002 021f 	and.w	r2, r2, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0af      	beq.n	8002db2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	21f8      	movs	r1, #248	; 0xf8
 8002e68:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e70:	fa91 f1a1 	rbit	r1, r1
 8002e74:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e78:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e7c:	fab1 f181 	clz	r1, r1
 8002e80:	b2c9      	uxtb	r1, r1
 8002e82:	408b      	lsls	r3, r1
 8002e84:	4920      	ldr	r1, [pc, #128]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
 8002e8a:	e06c      	b.n	8002f66 <HAL_RCC_OscConfig+0x646>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fc48 	bl	800174c <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fc43 	bl	800174c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d902      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	f000 bd5a 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d104      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5ec>
 8002f02:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	e015      	b.n	8002f34 <HAL_RCC_OscConfig+0x614>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f30:	4bc8      	ldr	r3, [pc, #800]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2202      	movs	r2, #2
 8002f36:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f46:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0220 	orr.w	r2, r2, #32
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ad      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8110 	beq.w	800319c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d079      	beq.n	8003080 <HAL_RCC_OscConfig+0x760>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4bab      	ldr	r3, [pc, #684]	; (8003258 <HAL_RCC_OscConfig+0x938>)
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fbc9 	bl	800174c <HAL_GetTick>
 8002fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fbc4 	bl	800174c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d902      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	f000 bcdb 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800302e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003030:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 8003032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800303c:	2102      	movs	r1, #2
 800303e:	6019      	str	r1, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f1a3 	rbit	r1, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003056:	6019      	str	r1, [r3, #0]
  return result;
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0a0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x6a0>
 800307e:	e08d      	b.n	800319c <HAL_RCC_OscConfig+0x87c>
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030a2:	601a      	str	r2, [r3, #0]
  return result;
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_OscConfig+0x938>)
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	461a      	mov	r2, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fb43 	bl	800174c <HAL_GetTick>
 80030c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fb3e 	bl	800174c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	f000 bc55 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030ea:	2202      	movs	r2, #2
 80030ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800310e:	2202      	movs	r2, #2
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fa93 f2a3 	rbit	r2, r3
 8003120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003132:	2202      	movs	r2, #2
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fa93 f2a3 	rbit	r2, r3
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800314c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314e:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 8003150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800315a:	2102      	movs	r1, #2
 800315c:	6019      	str	r1, [r3, #0]
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f1a3 	rbit	r1, r3
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003174:	6019      	str	r1, [r3, #0]
  return result;
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d197      	bne.n	80030cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 81a1 	beq.w	80034f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b8:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_RCC_OscConfig+0x93c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11a      	bne.n	8003234 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_RCC_OscConfig+0x93c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a16      	ldr	r2, [pc, #88]	; (800325c <HAL_RCC_OscConfig+0x93c>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003208:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320a:	f7fe fa9f 	bl	800174c <HAL_GetTick>
 800320e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	e009      	b.n	8003228 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fe fa9a 	bl	800174c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	; 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e3b1      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_RCC_OscConfig+0x93c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ef      	beq.n	8003214 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10d      	bne.n	8003260 <HAL_RCC_OscConfig+0x940>
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a02      	ldr	r2, [pc, #8]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e03c      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	10908120 	.word	0x10908120
 800325c:	40007000 	.word	0x40007000
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0x96a>
 8003270:	4bc1      	ldr	r3, [pc, #772]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4ac0      	ldr	r2, [pc, #768]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	6213      	str	r3, [r2, #32]
 800327c:	4bbe      	ldr	r3, [pc, #760]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4abd      	ldr	r2, [pc, #756]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003282:	f023 0304 	bic.w	r3, r3, #4
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	e020      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b05      	cmp	r3, #5
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x994>
 800329a:	4bb7      	ldr	r3, [pc, #732]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4ab6      	ldr	r2, [pc, #728]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6213      	str	r3, [r2, #32]
 80032a6:	4bb4      	ldr	r3, [pc, #720]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4ab3      	ldr	r2, [pc, #716]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6213      	str	r3, [r2, #32]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 80032b4:	4bb0      	ldr	r3, [pc, #704]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4aaf      	ldr	r2, [pc, #700]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6213      	str	r3, [r2, #32]
 80032c0:	4bad      	ldr	r3, [pc, #692]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4aac      	ldr	r2, [pc, #688]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032c6:	f023 0304 	bic.w	r3, r3, #4
 80032ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8081 	beq.w	80033e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fe fa35 	bl	800174c <HAL_GetTick>
 80032e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fa30 	bl	800174c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e345      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003308:	2202      	movs	r2, #2
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800332c:	2202      	movs	r2, #2
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003346:	601a      	str	r2, [r3, #0]
  return result;
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003350:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0xa4c>
 8003366:	4b84      	ldr	r3, [pc, #528]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0xa74>
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003374:	2202      	movs	r2, #2
 8003376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4b79      	ldr	r3, [pc, #484]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003398:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800339c:	2102      	movs	r1, #2
 800339e:	6011      	str	r1, [r2, #0]
 80033a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	fa92 f1a2 	rbit	r1, r2
 80033ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033b6:	6011      	str	r1, [r2, #0]
  return result;
 80033b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	fab2 f282 	clz	r2, r2
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 021f 	and.w	r2, r2, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d084      	beq.n	80032e8 <HAL_RCC_OscConfig+0x9c8>
 80033de:	e07f      	b.n	80034e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe f9b4 	bl	800174c <HAL_GetTick>
 80033e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00b      	b.n	8003402 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe f9af 	bl	800174c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e2c4      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800340a:	2202      	movs	r2, #2
 800340c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fa93 f2a3 	rbit	r2, r3
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800342e:	2202      	movs	r2, #2
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003448:	601a      	str	r2, [r3, #0]
  return result;
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0302 	orr.w	r3, r3, #2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0xb4e>
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	e013      	b.n	8003496 <HAL_RCC_OscConfig+0xb76>
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800349a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800349e:	2102      	movs	r1, #2
 80034a0:	6011      	str	r1, [r2, #0]
 80034a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	fa92 f1a2 	rbit	r1, r2
 80034b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034b8:	6011      	str	r1, [r2, #0]
  return result;
 80034ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f002 021f 	and.w	r2, r2, #31
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d184      	bne.n	80033ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b23      	ldr	r3, [pc, #140]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8242 	beq.w	800398a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	f000 8213 	beq.w	800393a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003518:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b02      	cmp	r3, #2
 8003522:	f040 8162 	bne.w	80037ea <HAL_RCC_OscConfig+0xeca>
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800352e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800354a:	601a      	str	r2, [r3, #0]
  return result;
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003554:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	2300      	movs	r3, #0
 800356a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe f8ee 	bl	800174c <HAL_GetTick>
 8003570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	e00c      	b.n	8003590 <HAL_RCC_OscConfig+0xc70>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe f8e6 	bl	800174c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1fd      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800359c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035b4:	601a      	str	r2, [r3, #0]
  return result;
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_RCC_OscConfig+0xcba>
 80035d4:	4bb0      	ldr	r3, [pc, #704]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e027      	b.n	800362a <HAL_RCC_OscConfig+0xd0a>
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003604:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f2a3 	rbit	r2, r3
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	4b9c      	ldr	r3, [pc, #624]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800362e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003632:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003636:	6011      	str	r1, [r2, #0]
 8003638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800363c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	fa92 f1a2 	rbit	r1, r2
 8003646:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800364a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800364e:	6011      	str	r1, [r2, #0]
  return result;
 8003650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003654:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	fab2 f282 	clz	r2, r2
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	f042 0220 	orr.w	r2, r2, #32
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f002 021f 	and.w	r2, r2, #31
 800366a:	2101      	movs	r1, #1
 800366c:	fa01 f202 	lsl.w	r2, r1, r2
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d182      	bne.n	800357c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	430b      	orrs	r3, r1
 8003698:	497f      	ldr	r1, [pc, #508]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f2a3 	rbit	r2, r3
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80036c2:	601a      	str	r2, [r3, #0]
  return result;
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80036cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	461a      	mov	r2, r3
 80036e0:	2301      	movs	r3, #1
 80036e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe f832 	bl	800174c <HAL_GetTick>
 80036e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	e009      	b.n	8003702 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe f82d 	bl	800174c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e144      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800370a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003726:	601a      	str	r2, [r3, #0]
  return result;
 8003728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003730:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d102      	bne.n	800374c <HAL_RCC_OscConfig+0xe2c>
 8003746:	4b54      	ldr	r3, [pc, #336]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	e027      	b.n	800379c <HAL_RCC_OscConfig+0xe7c>
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800377a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	fa93 f2a3 	rbit	r2, r3
 800378e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003792:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	fa92 f1a2 	rbit	r1, r2
 80037b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80037c0:	6011      	str	r1, [r2, #0]
  return result;
 80037c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f042 0220 	orr.w	r2, r2, #32
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f002 021f 	and.w	r2, r2, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d082      	beq.n	80036ee <HAL_RCC_OscConfig+0xdce>
 80037e8:	e0cf      	b.n	800398a <HAL_RCC_OscConfig+0x106a>
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80037f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800380e:	601a      	str	r2, [r3, #0]
  return result;
 8003810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003814:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003818:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003824:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	461a      	mov	r2, r3
 800382c:	2300      	movs	r3, #0
 800382e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fd ff8c 	bl	800174c <HAL_GetTick>
 8003834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003838:	e009      	b.n	800384e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383a:	f7fd ff87 	bl	800174c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e09e      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800385a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003860:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	fa93 f2a3 	rbit	r2, r3
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003872:	601a      	str	r2, [r3, #0]
  return result;
 8003874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003878:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800387c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d104      	bne.n	800389c <HAL_RCC_OscConfig+0xf7c>
 8003892:	4b01      	ldr	r3, [pc, #4]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e029      	b.n	80038ec <HAL_RCC_OscConfig+0xfcc>
 8003898:	40021000 	.word	0x40021000
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <HAL_RCC_OscConfig+0x1078>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80038f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038f8:	6011      	str	r1, [r2, #0]
 80038fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	fa92 f1a2 	rbit	r1, r2
 8003908:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800390c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003910:	6011      	str	r1, [r2, #0]
  return result;
 8003912:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003916:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	fab2 f282 	clz	r2, r2
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f002 021f 	and.w	r2, r2, #31
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d180      	bne.n	800383a <HAL_RCC_OscConfig+0xf1a>
 8003938:	e027      	b.n	800398a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e01e      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_RCC_OscConfig+0x1078>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003956:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800395a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	429a      	cmp	r2, r3
 800396c:	d10b      	bne.n	8003986 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800396e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000

0800399c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b09e      	sub	sp, #120	; 0x78
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e162      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b90      	ldr	r3, [pc, #576]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d910      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 0207 	bic.w	r2, r3, #7
 80039ca:	498b      	ldr	r1, [pc, #556]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e14a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b82      	ldr	r3, [pc, #520]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	497f      	ldr	r1, [pc, #508]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80dc 	beq.w	8003bc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d13c      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xf6>
 8003a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xa6>
 8003a3c:	4b6f      	ldr	r3, [pc, #444]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	e00f      	b.n	8003a62 <HAL_RCC_ClockConfig+0xc6>
 8003a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a54:	663b      	str	r3, [r7, #96]	; 0x60
 8003a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5e:	4b67      	ldr	r3, [pc, #412]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a66:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a6a:	fa92 f2a2 	rbit	r2, r2
 8003a6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a72:	fab2 f282 	clz	r2, r2
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	f042 0220 	orr.w	r2, r2, #32
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	f002 021f 	and.w	r2, r2, #31
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d17b      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0f3      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d13c      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x178>
 8003a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x128>
 8003abe:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	e00f      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
 8003ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae0:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ae8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aec:	fa92 f2a2 	rbit	r2, r2
 8003af0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af4:	fab2 f282 	clz	r2, r2
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	f002 021f 	and.w	r2, r2, #31
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d13a      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0b2      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
 8003b14:	2302      	movs	r3, #2
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
 8003b36:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	e00d      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1bc>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	2302      	movs	r3, #2
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2202      	movs	r2, #2
 8003b5a:	61ba      	str	r2, [r7, #24]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	fa92 f2a2 	rbit	r2, r2
 8003b62:	617a      	str	r2, [r7, #20]
  return result;
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	fab2 f282 	clz	r2, r2
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f042 0220 	orr.w	r2, r2, #32
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	f002 021f 	and.w	r2, r2, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e079      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	491a      	ldr	r1, [pc, #104]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b98:	f7fd fdd8 	bl	800174c <HAL_GetTick>
 8003b9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fd fdd4 	bl	800174c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e061      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d214      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	4906      	ldr	r1, [pc, #24]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e040      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
 8003bf8:	40022000 	.word	0x40022000
 8003bfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	491a      	ldr	r1, [pc, #104]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2a:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4912      	ldr	r1, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c3e:	f000 f829 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c42:	4601      	mov	r1, r0
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c4c:	22f0      	movs	r2, #240	; 0xf0
 8003c4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	60fa      	str	r2, [r7, #12]
  return result;
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	40d3      	lsrs	r3, r2
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x2ec>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
 8003c66:	fa21 f303 	lsr.w	r3, r1, r3
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <HAL_RCC_ClockConfig+0x2f0>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_RCC_ClockConfig+0x2f4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd fd26 	bl	80016c4 <HAL_InitTick>
  
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3778      	adds	r7, #120	; 0x78
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08008300 	.word	0x08008300
 8003c8c:	2000000c 	.word	0x2000000c
 8003c90:	20000010 	.word	0x20000010

08003c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b08b      	sub	sp, #44	; 0x2c
 8003c98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cae:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x36>
 8003cc2:	e03c      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cc6:	623b      	str	r3, [r7, #32]
      break;
 8003cc8:	e03c      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003cd0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	fa92 f2a2 	rbit	r2, r2
 8003cdc:	607a      	str	r2, [r7, #4]
  return result;
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	fab2 f282 	clz	r2, r2
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	40d3      	lsrs	r3, r2
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	fa92 f2a2 	rbit	r2, r2
 8003d00:	60fa      	str	r2, [r7, #12]
  return result;
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	fab2 f282 	clz	r2, r2
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	40d3      	lsrs	r3, r2
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d1c:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fb02 f303 	mul.w	r3, r2, r3
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2c:	e004      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	623b      	str	r3, [r7, #32]
      break;
 8003d3c:	e002      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d40:	623b      	str	r3, [r7, #32]
      break;
 8003d42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d44:	6a3b      	ldr	r3, [r7, #32]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	372c      	adds	r7, #44	; 0x2c
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	007a1200 	.word	0x007a1200
 8003d5c:	08008318 	.word	0x08008318
 8003d60:	08008328 	.word	0x08008328
 8003d64:	003d0900 	.word	0x003d0900

08003d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	2000000c 	.word	0x2000000c

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d86:	f7ff ffef 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	fa92 f2a2 	rbit	r2, r2
 8003da0:	603a      	str	r2, [r7, #0]
  return result;
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	fab2 f282 	clz	r2, r2
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	40d3      	lsrs	r3, r2
 8003dac:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08008310 	.word	0x08008310

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003dca:	f7ff ffcd 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003dce:	4601      	mov	r1, r0
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003dd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ddc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	fa92 f2a2 	rbit	r2, r2
 8003de4:	603a      	str	r2, [r7, #0]
  return result;
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	40d3      	lsrs	r3, r2
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	08008310 	.word	0x08008310

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b092      	sub	sp, #72	; 0x48
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80cd 	beq.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2c:	4b86      	ldr	r3, [pc, #536]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10e      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e38:	4b83      	ldr	r3, [pc, #524]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	4a82      	ldr	r2, [pc, #520]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	61d3      	str	r3, [r2, #28]
 8003e44:	4b80      	ldr	r3, [pc, #512]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d118      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e62:	4b7a      	ldr	r3, [pc, #488]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a79      	ldr	r2, [pc, #484]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fc6d 	bl	800174c <HAL_GetTick>
 8003e72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	e008      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e76:	f7fd fc69 	bl	800174c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b64      	cmp	r3, #100	; 0x64
 8003e82:	d901      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e0db      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	4b70      	ldr	r3, [pc, #448]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e94:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d07d      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d076      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ec0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b5e      	ldr	r3, [pc, #376]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	461a      	mov	r2, r3
 8003edc:	2301      	movs	r3, #1
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b55      	ldr	r3, [pc, #340]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	461a      	mov	r2, r3
 8003f00:	2300      	movs	r3, #0
 8003f02:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f04:	4a50      	ldr	r2, [pc, #320]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f08:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d045      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7fd fc1a 	bl	800174c <HAL_GetTick>
 8003f18:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fd fc16 	bl	800174c <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e086      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003f32:	2302      	movs	r3, #2
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	2302      	movs	r3, #2
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	61fb      	str	r3, [r7, #28]
  return result;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	fab3 f383 	clz	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f043 0302 	orr.w	r3, r3, #2
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d102      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f60:	4b39      	ldr	r3, [pc, #228]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	e007      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f66:	2302      	movs	r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	fa93 f3a3 	rbit	r3, r3
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	4b35      	ldr	r3, [pc, #212]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2202      	movs	r2, #2
 8003f78:	613a      	str	r2, [r7, #16]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	fa92 f2a2 	rbit	r2, r2
 8003f80:	60fa      	str	r2, [r7, #12]
  return result;
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	fab2 f282 	clz	r2, r2
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	f002 021f 	and.w	r2, r2, #31
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0bd      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4926      	ldr	r1, [pc, #152]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fba:	4b23      	ldr	r3, [pc, #140]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	4a22      	ldr	r2, [pc, #136]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	491a      	ldr	r1, [pc, #104]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	f023 0210 	bic.w	r2, r3, #16
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4912      	ldr	r1, [pc, #72]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800400e:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	490b      	ldr	r1, [pc, #44]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800401c:	4313      	orrs	r3, r2
 800401e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800403a:	4313      	orrs	r3, r2
 800403c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3748      	adds	r7, #72	; 0x48
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	40007000 	.word	0x40007000
 8004050:	10908100 	.word	0x10908100

08004054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e095      	b.n	8004192 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d108      	bne.n	8004080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004076:	d009      	beq.n	800408c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	61da      	str	r2, [r3, #28]
 800407e:	e005      	b.n	800408c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd f90c 	bl	80012c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040cc:	d902      	bls.n	80040d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e002      	b.n	80040da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040e2:	d007      	beq.n	80040f4 <HAL_SPI_Init+0xa0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040ec:	d002      	beq.n	80040f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	ea42 0103 	orr.w	r1, r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	f003 0204 	and.w	r2, r3, #4
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004170:	ea42 0103 	orr.w	r1, r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b088      	sub	sp, #32
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_SPI_Transmit+0x22>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e15f      	b.n	800447c <HAL_SPI_Transmit+0x2e2>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041c4:	f7fd fac2 	bl	800174c <HAL_GetTick>
 80041c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041da:	2302      	movs	r3, #2
 80041dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041de:	e148      	b.n	8004472 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_SPI_Transmit+0x52>
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041f0:	e13f      	b.n	8004472 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423c:	d10f      	bne.n	800425e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800425c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d007      	beq.n	800427c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004284:	d94f      	bls.n	8004326 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_Transmit+0xfa>
 800428e:	8afb      	ldrh	r3, [r7, #22]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d142      	bne.n	800431a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	881a      	ldrh	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	1c9a      	adds	r2, r3, #2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042b8:	e02f      	b.n	800431a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d112      	bne.n	80042ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	881a      	ldrh	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042ec:	e015      	b.n	800431a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ee:	f7fd fa2d 	bl	800174c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d803      	bhi.n	8004306 <HAL_SPI_Transmit+0x16c>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d102      	bne.n	800430c <HAL_SPI_Transmit+0x172>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004318:	e0ab      	b.n	8004472 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ca      	bne.n	80042ba <HAL_SPI_Transmit+0x120>
 8004324:	e080      	b.n	8004428 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_SPI_Transmit+0x19a>
 800432e:	8afb      	ldrh	r3, [r7, #22]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d174      	bne.n	800441e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d912      	bls.n	8004364 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b02      	subs	r3, #2
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004362:	e05c      	b.n	800441e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800438a:	e048      	b.n	800441e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	d12b      	bne.n	80043f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d912      	bls.n	80043ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	1c9a      	adds	r2, r3, #2
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b02      	subs	r3, #2
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c8:	e029      	b.n	800441e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	330c      	adds	r3, #12
 80043d4:	7812      	ldrb	r2, [r2, #0]
 80043d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043f0:	e015      	b.n	800441e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f2:	f7fd f9ab 	bl	800174c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d803      	bhi.n	800440a <HAL_SPI_Transmit+0x270>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d102      	bne.n	8004410 <HAL_SPI_Transmit+0x276>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800441c:	e029      	b.n	8004472 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1b1      	bne.n	800438c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	6839      	ldr	r1, [r7, #0]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f947 	bl	80046c0 <SPI_EndRxTxTransaction>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e003      	b.n	8004472 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800447a:	7ffb      	ldrb	r3, [r7, #31]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004494:	f7fd f95a 	bl	800174c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4413      	add	r3, r2
 80044a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044a4:	f7fd f952 	bl	800174c <HAL_GetTick>
 80044a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	015b      	lsls	r3, r3, #5
 80044b0:	0d1b      	lsrs	r3, r3, #20
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ba:	e054      	b.n	8004566 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d050      	beq.n	8004566 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044c4:	f7fd f942 	bl	800174c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d902      	bls.n	80044da <SPI_WaitFlagStateUntilTimeout+0x56>
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d13d      	bne.n	8004556 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f2:	d111      	bne.n	8004518 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fc:	d004      	beq.n	8004508 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004506:	d107      	bne.n	8004518 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004520:	d10f      	bne.n	8004542 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e017      	b.n	8004586 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	3b01      	subs	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d19b      	bne.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2000000c 	.word	0x2000000c

08004594 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045a6:	f7fd f8d1 	bl	800174c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	4413      	add	r3, r2
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80045b6:	f7fd f8c9 	bl	800174c <HAL_GetTick>
 80045ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045c4:	4b3d      	ldr	r3, [pc, #244]	; (80046bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	00da      	lsls	r2, r3, #3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	0d1b      	lsrs	r3, r3, #20
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045dc:	e060      	b.n	80046a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045e4:	d107      	bne.n	80045f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d050      	beq.n	80046a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045fe:	f7fd f8a5 	bl	800174c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	429a      	cmp	r2, r3
 800460c:	d902      	bls.n	8004614 <SPI_WaitFifoStateUntilTimeout+0x80>
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d13d      	bne.n	8004690 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004622:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462c:	d111      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004636:	d004      	beq.n	8004642 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004640:	d107      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004650:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465a:	d10f      	bne.n	800467c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800467a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e010      	b.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3b01      	subs	r3, #1
 800469e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d196      	bne.n	80045de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3728      	adds	r7, #40	; 0x28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2000000c 	.word	0x2000000c

080046c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff ff5b 	bl	8004594 <SPI_WaitFifoStateUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e027      	b.n	8004744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff fec0 	bl	8004484 <SPI_WaitFlagStateUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e014      	b.n	8004744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff ff34 	bl	8004594 <SPI_WaitFifoStateUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e000      	b.n	8004744 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e049      	b.n	80047f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fde8 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f000 f9da 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e040      	b.n	8004896 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1c      	ldr	r2, [pc, #112]	; (80048a4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x58>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483e:	d009      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x58>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_TIM_Base_Start_IT+0xac>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x58>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a17      	ldr	r2, [pc, #92]	; (80048ac <HAL_TIM_Base_Start_IT+0xb0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d115      	bne.n	8004880 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <HAL_TIM_Base_Start_IT+0xb4>)
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b06      	cmp	r3, #6
 8004864:	d015      	beq.n	8004892 <HAL_TIM_Base_Start_IT+0x96>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d011      	beq.n	8004892 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	e008      	b.n	8004892 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e000      	b.n	8004894 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40014000 	.word	0x40014000
 80048b0:	00010007 	.word	0x00010007

080048b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d122      	bne.n	8004910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0202 	mvn.w	r2, #2
 80048e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f905 	bl	8004b06 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8f7 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f908 	bl	8004b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b04      	cmp	r3, #4
 800491c:	d122      	bne.n	8004964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b04      	cmp	r3, #4
 800492a:	d11b      	bne.n	8004964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0204 	mvn.w	r2, #4
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f8db 	bl	8004b06 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8cd 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f8de 	bl	8004b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	d122      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b08      	cmp	r3, #8
 800497e:	d11b      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0208 	mvn.w	r2, #8
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2204      	movs	r2, #4
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8b1 	bl	8004b06 <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f8a3 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f8b4 	bl	8004b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d122      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d11b      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0210 	mvn.w	r2, #16
 80049dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2208      	movs	r2, #8
 80049e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f887 	bl	8004b06 <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f879 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f88a 	bl	8004b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0201 	mvn.w	r2, #1
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc fae4 	bl	8001000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f960 	bl	8004d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d10e      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b80      	cmp	r3, #128	; 0x80
 8004a80:	d107      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f953 	bl	8004d38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b40      	cmp	r3, #64	; 0x40
 8004a9e:	d10e      	bne.n	8004abe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b40      	cmp	r3, #64	; 0x40
 8004aac:	d107      	bne.n	8004abe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f838 	bl	8004b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d10e      	bne.n	8004aea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d107      	bne.n	8004aea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0220 	mvn.w	r2, #32
 8004ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f913 	bl	8004d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a32      	ldr	r2, [pc, #200]	; (8004c20 <TIM_Base_SetConfig+0xdc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_Base_SetConfig+0x28>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0x28>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a2f      	ldr	r2, [pc, #188]	; (8004c24 <TIM_Base_SetConfig+0xe0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <TIM_Base_SetConfig+0xdc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d00f      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <TIM_Base_SetConfig+0xe0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a23      	ldr	r2, [pc, #140]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <TIM_Base_SetConfig+0xe8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <TIM_Base_SetConfig+0xec>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <TIM_Base_SetConfig+0xdc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0xc0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0xc0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a0d      	ldr	r2, [pc, #52]	; (8004c2c <TIM_Base_SetConfig+0xe8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0xc0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <TIM_Base_SetConfig+0xec>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d103      	bne.n	8004c0c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	615a      	str	r2, [r3, #20]
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40014400 	.word	0x40014400
 8004c30:	40014800 	.word	0x40014800

08004c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e054      	b.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d108      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a17      	ldr	r2, [pc, #92]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00e      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb4:	d009      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40014000 	.word	0x40014000

08004d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e040      	b.n	8004de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fc fb10 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2224      	movs	r2, #36	; 0x24
 8004d78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0201 	bic.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8b6 	bl	8004efc <UART_SetConfig>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e022      	b.n	8004de0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f9e0 	bl	8005168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fa67 	bl	80052ac <UART_CheckIdleState>
 8004dde:	4603      	mov	r3, r0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	4613      	mov	r3, r2
 8004df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d178      	bne.n	8004ef2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Transmit+0x24>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e071      	b.n	8004ef4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2221      	movs	r2, #33	; 0x21
 8004e1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1e:	f7fc fc95 	bl	800174c <HAL_GetTick>
 8004e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	88fa      	ldrh	r2, [r7, #6]
 8004e28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3c:	d108      	bne.n	8004e50 <HAL_UART_Transmit+0x68>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	e003      	b.n	8004e58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e58:	e030      	b.n	8004ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2180      	movs	r1, #128	; 0x80
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fac9 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e03c      	b.n	8004ef4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	881a      	ldrh	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e8c:	b292      	uxth	r2, r2
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	3302      	adds	r3, #2
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	e008      	b.n	8004eaa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	b292      	uxth	r2, r2
 8004ea2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1c8      	bne.n	8004e5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2140      	movs	r1, #64	; 0x40
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fa92 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e005      	b.n	8004ef4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b8a      	ldr	r3, [pc, #552]	; (8005150 <UART_SetConfig+0x254>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6979      	ldr	r1, [r7, #20]
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a78      	ldr	r2, [pc, #480]	; (8005154 <UART_SetConfig+0x258>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d120      	bne.n	8004fba <UART_SetConfig+0xbe>
 8004f78:	4b77      	ldr	r3, [pc, #476]	; (8005158 <UART_SetConfig+0x25c>)
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d817      	bhi.n	8004fb4 <UART_SetConfig+0xb8>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x90>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fa9 	.word	0x08004fa9
 8004f94:	08004faf 	.word	0x08004faf
 8004f98:	08004fa3 	.word	0x08004fa3
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e01d      	b.n	8004fde <UART_SetConfig+0xe2>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e01a      	b.n	8004fde <UART_SetConfig+0xe2>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e017      	b.n	8004fde <UART_SetConfig+0xe2>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e014      	b.n	8004fde <UART_SetConfig+0xe2>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e011      	b.n	8004fde <UART_SetConfig+0xe2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a67      	ldr	r2, [pc, #412]	; (800515c <UART_SetConfig+0x260>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d102      	bne.n	8004fca <UART_SetConfig+0xce>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e009      	b.n	8004fde <UART_SetConfig+0xe2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a64      	ldr	r2, [pc, #400]	; (8005160 <UART_SetConfig+0x264>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d102      	bne.n	8004fda <UART_SetConfig+0xde>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e001      	b.n	8004fde <UART_SetConfig+0xe2>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d15a      	bne.n	800509e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d827      	bhi.n	800503e <UART_SetConfig+0x142>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0xf8>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	0800503f 	.word	0x0800503f
 8005004:	0800502f 	.word	0x0800502f
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800503f 	.word	0x0800503f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005018:	f7fe feb2 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 800501c:	61b8      	str	r0, [r7, #24]
        break;
 800501e:	e013      	b.n	8005048 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7fe fed0 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8005024:	61b8      	str	r0, [r7, #24]
        break;
 8005026:	e00f      	b.n	8005048 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005028:	4b4e      	ldr	r3, [pc, #312]	; (8005164 <UART_SetConfig+0x268>)
 800502a:	61bb      	str	r3, [r7, #24]
        break;
 800502c:	e00c      	b.n	8005048 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502e:	f7fe fe31 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8005032:	61b8      	str	r0, [r7, #24]
        break;
 8005034:	e008      	b.n	8005048 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	61bb      	str	r3, [r7, #24]
        break;
 800503c:	e004      	b.n	8005048 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	77bb      	strb	r3, [r7, #30]
        break;
 8005046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d074      	beq.n	8005138 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	005a      	lsls	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d916      	bls.n	8005098 <UART_SetConfig+0x19c>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d212      	bcs.n	8005098 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f023 030f 	bic.w	r3, r3, #15
 800507a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	b29a      	uxth	r2, r3
 8005088:	89fb      	ldrh	r3, [r7, #14]
 800508a:	4313      	orrs	r3, r2
 800508c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	89fa      	ldrh	r2, [r7, #14]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e04f      	b.n	8005138 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	77bb      	strb	r3, [r7, #30]
 800509c:	e04c      	b.n	8005138 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800509e:	7ffb      	ldrb	r3, [r7, #31]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d828      	bhi.n	80050f6 <UART_SetConfig+0x1fa>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0x1b0>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050f7 	.word	0x080050f7
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	080050f7 	.word	0x080050f7
 80050c4:	080050f7 	.word	0x080050f7
 80050c8:	080050f7 	.word	0x080050f7
 80050cc:	080050ef 	.word	0x080050ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fe fe56 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 80050d4:	61b8      	str	r0, [r7, #24]
        break;
 80050d6:	e013      	b.n	8005100 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7fe fe74 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 80050dc:	61b8      	str	r0, [r7, #24]
        break;
 80050de:	e00f      	b.n	8005100 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <UART_SetConfig+0x268>)
 80050e2:	61bb      	str	r3, [r7, #24]
        break;
 80050e4:	e00c      	b.n	8005100 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e6:	f7fe fdd5 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 80050ea:	61b8      	str	r0, [r7, #24]
        break;
 80050ec:	e008      	b.n	8005100 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f2:	61bb      	str	r3, [r7, #24]
        break;
 80050f4:	e004      	b.n	8005100 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	77bb      	strb	r3, [r7, #30]
        break;
 80050fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d018      	beq.n	8005138 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	085a      	lsrs	r2, r3, #1
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	441a      	add	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b0f      	cmp	r3, #15
 800511e:	d909      	bls.n	8005134 <UART_SetConfig+0x238>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005126:	d205      	bcs.n	8005134 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	e001      	b.n	8005138 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005144:	7fbb      	ldrb	r3, [r7, #30]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	efff69f3 	.word	0xefff69f3
 8005154:	40013800 	.word	0x40013800
 8005158:	40021000 	.word	0x40021000
 800515c:	40004400 	.word	0x40004400
 8005160:	40004800 	.word	0x40004800
 8005164:	007a1200 	.word	0x007a1200

08005168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01a      	beq.n	800527e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005266:	d10a      	bne.n	800527e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
  }
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b098      	sub	sp, #96	; 0x60
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052bc:	f7fc fa46 	bl	800174c <HAL_GetTick>
 80052c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d12e      	bne.n	800532e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d8:	2200      	movs	r2, #0
 80052da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f88c 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d021      	beq.n	800532e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005308:	647b      	str	r3, [r7, #68]	; 0x44
 800530a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800530e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e6      	bne.n	80052ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e062      	b.n	80053f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d149      	bne.n	80053d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005344:	2200      	movs	r2, #0
 8005346:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f856 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d03c      	beq.n	80053d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	623b      	str	r3, [r7, #32]
   return(result);
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005374:	633b      	str	r3, [r7, #48]	; 0x30
 8005376:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800537a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e6      	bne.n	8005356 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	60fb      	str	r3, [r7, #12]
   return(result);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a8:	61fa      	str	r2, [r7, #28]
 80053aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	69b9      	ldr	r1, [r7, #24]
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	617b      	str	r3, [r7, #20]
   return(result);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e5      	bne.n	8005388 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e011      	b.n	80053f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3758      	adds	r7, #88	; 0x58
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540c:	e049      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d045      	beq.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fc f999 	bl	800174c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <UART_WaitOnFlagUntilTimeout+0x30>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e048      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d031      	beq.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b08      	cmp	r3, #8
 800544a:	d110      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2208      	movs	r2, #8
 8005452:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f838 	bl	80054ca <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2208      	movs	r2, #8
 800545e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e029      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547c:	d111      	bne.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f81e 	bl	80054ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e00f      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4013      	ands	r3, r2
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	bf0c      	ite	eq
 80054b2:	2301      	moveq	r3, #1
 80054b4:	2300      	movne	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d0a6      	beq.n	800540e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b095      	sub	sp, #84	; 0x54
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f0:	643b      	str	r3, [r7, #64]	; 0x40
 80054f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e6      	bne.n	80054d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	61fb      	str	r3, [r7, #28]
   return(result);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	64bb      	str	r3, [r7, #72]	; 0x48
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3308      	adds	r3, #8
 8005522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005524:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800552a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553c:	2b01      	cmp	r3, #1
 800553e:	d118      	bne.n	8005572 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	60bb      	str	r3, [r7, #8]
   return(result);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f023 0310 	bic.w	r3, r3, #16
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6979      	ldr	r1, [r7, #20]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	613b      	str	r3, [r7, #16]
   return(result);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005586:	bf00      	nop
 8005588:	3754      	adds	r7, #84	; 0x54
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <__cvt>:
 8005592:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005596:	ec55 4b10 	vmov	r4, r5, d0
 800559a:	2d00      	cmp	r5, #0
 800559c:	460e      	mov	r6, r1
 800559e:	4619      	mov	r1, r3
 80055a0:	462b      	mov	r3, r5
 80055a2:	bfbb      	ittet	lt
 80055a4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055a8:	461d      	movlt	r5, r3
 80055aa:	2300      	movge	r3, #0
 80055ac:	232d      	movlt	r3, #45	; 0x2d
 80055ae:	700b      	strb	r3, [r1, #0]
 80055b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055b2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055b6:	4691      	mov	r9, r2
 80055b8:	f023 0820 	bic.w	r8, r3, #32
 80055bc:	bfbc      	itt	lt
 80055be:	4622      	movlt	r2, r4
 80055c0:	4614      	movlt	r4, r2
 80055c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055c6:	d005      	beq.n	80055d4 <__cvt+0x42>
 80055c8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055cc:	d100      	bne.n	80055d0 <__cvt+0x3e>
 80055ce:	3601      	adds	r6, #1
 80055d0:	2102      	movs	r1, #2
 80055d2:	e000      	b.n	80055d6 <__cvt+0x44>
 80055d4:	2103      	movs	r1, #3
 80055d6:	ab03      	add	r3, sp, #12
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	ab02      	add	r3, sp, #8
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	ec45 4b10 	vmov	d0, r4, r5
 80055e2:	4653      	mov	r3, sl
 80055e4:	4632      	mov	r2, r6
 80055e6:	f000 fe6b 	bl	80062c0 <_dtoa_r>
 80055ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055ee:	4607      	mov	r7, r0
 80055f0:	d102      	bne.n	80055f8 <__cvt+0x66>
 80055f2:	f019 0f01 	tst.w	r9, #1
 80055f6:	d022      	beq.n	800563e <__cvt+0xac>
 80055f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055fc:	eb07 0906 	add.w	r9, r7, r6
 8005600:	d110      	bne.n	8005624 <__cvt+0x92>
 8005602:	783b      	ldrb	r3, [r7, #0]
 8005604:	2b30      	cmp	r3, #48	; 0x30
 8005606:	d10a      	bne.n	800561e <__cvt+0x8c>
 8005608:	2200      	movs	r2, #0
 800560a:	2300      	movs	r3, #0
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	f7fb fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005614:	b918      	cbnz	r0, 800561e <__cvt+0x8c>
 8005616:	f1c6 0601 	rsb	r6, r6, #1
 800561a:	f8ca 6000 	str.w	r6, [sl]
 800561e:	f8da 3000 	ldr.w	r3, [sl]
 8005622:	4499      	add	r9, r3
 8005624:	2200      	movs	r2, #0
 8005626:	2300      	movs	r3, #0
 8005628:	4620      	mov	r0, r4
 800562a:	4629      	mov	r1, r5
 800562c:	f7fb fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005630:	b108      	cbz	r0, 8005636 <__cvt+0xa4>
 8005632:	f8cd 900c 	str.w	r9, [sp, #12]
 8005636:	2230      	movs	r2, #48	; 0x30
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	454b      	cmp	r3, r9
 800563c:	d307      	bcc.n	800564e <__cvt+0xbc>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005642:	1bdb      	subs	r3, r3, r7
 8005644:	4638      	mov	r0, r7
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	b004      	add	sp, #16
 800564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564e:	1c59      	adds	r1, r3, #1
 8005650:	9103      	str	r1, [sp, #12]
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e7f0      	b.n	8005638 <__cvt+0xa6>

08005656 <__exponent>:
 8005656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005658:	4603      	mov	r3, r0
 800565a:	2900      	cmp	r1, #0
 800565c:	bfb8      	it	lt
 800565e:	4249      	neglt	r1, r1
 8005660:	f803 2b02 	strb.w	r2, [r3], #2
 8005664:	bfb4      	ite	lt
 8005666:	222d      	movlt	r2, #45	; 0x2d
 8005668:	222b      	movge	r2, #43	; 0x2b
 800566a:	2909      	cmp	r1, #9
 800566c:	7042      	strb	r2, [r0, #1]
 800566e:	dd2a      	ble.n	80056c6 <__exponent+0x70>
 8005670:	f10d 0207 	add.w	r2, sp, #7
 8005674:	4617      	mov	r7, r2
 8005676:	260a      	movs	r6, #10
 8005678:	4694      	mov	ip, r2
 800567a:	fb91 f5f6 	sdiv	r5, r1, r6
 800567e:	fb06 1415 	mls	r4, r6, r5, r1
 8005682:	3430      	adds	r4, #48	; 0x30
 8005684:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005688:	460c      	mov	r4, r1
 800568a:	2c63      	cmp	r4, #99	; 0x63
 800568c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005690:	4629      	mov	r1, r5
 8005692:	dcf1      	bgt.n	8005678 <__exponent+0x22>
 8005694:	3130      	adds	r1, #48	; 0x30
 8005696:	f1ac 0402 	sub.w	r4, ip, #2
 800569a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800569e:	1c41      	adds	r1, r0, #1
 80056a0:	4622      	mov	r2, r4
 80056a2:	42ba      	cmp	r2, r7
 80056a4:	d30a      	bcc.n	80056bc <__exponent+0x66>
 80056a6:	f10d 0209 	add.w	r2, sp, #9
 80056aa:	eba2 020c 	sub.w	r2, r2, ip
 80056ae:	42bc      	cmp	r4, r7
 80056b0:	bf88      	it	hi
 80056b2:	2200      	movhi	r2, #0
 80056b4:	4413      	add	r3, r2
 80056b6:	1a18      	subs	r0, r3, r0
 80056b8:	b003      	add	sp, #12
 80056ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056c0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056c4:	e7ed      	b.n	80056a2 <__exponent+0x4c>
 80056c6:	2330      	movs	r3, #48	; 0x30
 80056c8:	3130      	adds	r1, #48	; 0x30
 80056ca:	7083      	strb	r3, [r0, #2]
 80056cc:	70c1      	strb	r1, [r0, #3]
 80056ce:	1d03      	adds	r3, r0, #4
 80056d0:	e7f1      	b.n	80056b6 <__exponent+0x60>
	...

080056d4 <_printf_float>:
 80056d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d8:	ed2d 8b02 	vpush	{d8}
 80056dc:	b08d      	sub	sp, #52	; 0x34
 80056de:	460c      	mov	r4, r1
 80056e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056e4:	4616      	mov	r6, r2
 80056e6:	461f      	mov	r7, r3
 80056e8:	4605      	mov	r5, r0
 80056ea:	f000 fce7 	bl	80060bc <_localeconv_r>
 80056ee:	f8d0 a000 	ldr.w	sl, [r0]
 80056f2:	4650      	mov	r0, sl
 80056f4:	f7fa fdbc 	bl	8000270 <strlen>
 80056f8:	2300      	movs	r3, #0
 80056fa:	930a      	str	r3, [sp, #40]	; 0x28
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	9305      	str	r3, [sp, #20]
 8005700:	f8d8 3000 	ldr.w	r3, [r8]
 8005704:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005708:	3307      	adds	r3, #7
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	f103 0208 	add.w	r2, r3, #8
 8005712:	f8c8 2000 	str.w	r2, [r8]
 8005716:	e9d3 8900 	ldrd	r8, r9, [r3]
 800571a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800571e:	9307      	str	r3, [sp, #28]
 8005720:	f8cd 8018 	str.w	r8, [sp, #24]
 8005724:	ee08 0a10 	vmov	s16, r0
 8005728:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800572c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005730:	4b9e      	ldr	r3, [pc, #632]	; (80059ac <_printf_float+0x2d8>)
 8005732:	f04f 32ff 	mov.w	r2, #4294967295
 8005736:	f7fb f9f9 	bl	8000b2c <__aeabi_dcmpun>
 800573a:	bb88      	cbnz	r0, 80057a0 <_printf_float+0xcc>
 800573c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005740:	4b9a      	ldr	r3, [pc, #616]	; (80059ac <_printf_float+0x2d8>)
 8005742:	f04f 32ff 	mov.w	r2, #4294967295
 8005746:	f7fb f9d3 	bl	8000af0 <__aeabi_dcmple>
 800574a:	bb48      	cbnz	r0, 80057a0 <_printf_float+0xcc>
 800574c:	2200      	movs	r2, #0
 800574e:	2300      	movs	r3, #0
 8005750:	4640      	mov	r0, r8
 8005752:	4649      	mov	r1, r9
 8005754:	f7fb f9c2 	bl	8000adc <__aeabi_dcmplt>
 8005758:	b110      	cbz	r0, 8005760 <_printf_float+0x8c>
 800575a:	232d      	movs	r3, #45	; 0x2d
 800575c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005760:	4a93      	ldr	r2, [pc, #588]	; (80059b0 <_printf_float+0x2dc>)
 8005762:	4b94      	ldr	r3, [pc, #592]	; (80059b4 <_printf_float+0x2e0>)
 8005764:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005768:	bf94      	ite	ls
 800576a:	4690      	movls	r8, r2
 800576c:	4698      	movhi	r8, r3
 800576e:	2303      	movs	r3, #3
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	9b05      	ldr	r3, [sp, #20]
 8005774:	f023 0304 	bic.w	r3, r3, #4
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	f04f 0900 	mov.w	r9, #0
 800577e:	9700      	str	r7, [sp, #0]
 8005780:	4633      	mov	r3, r6
 8005782:	aa0b      	add	r2, sp, #44	; 0x2c
 8005784:	4621      	mov	r1, r4
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f9da 	bl	8005b40 <_printf_common>
 800578c:	3001      	adds	r0, #1
 800578e:	f040 8090 	bne.w	80058b2 <_printf_float+0x1de>
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	b00d      	add	sp, #52	; 0x34
 8005798:	ecbd 8b02 	vpop	{d8}
 800579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	4640      	mov	r0, r8
 80057a6:	4649      	mov	r1, r9
 80057a8:	f7fb f9c0 	bl	8000b2c <__aeabi_dcmpun>
 80057ac:	b140      	cbz	r0, 80057c0 <_printf_float+0xec>
 80057ae:	464b      	mov	r3, r9
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bfbc      	itt	lt
 80057b4:	232d      	movlt	r3, #45	; 0x2d
 80057b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057ba:	4a7f      	ldr	r2, [pc, #508]	; (80059b8 <_printf_float+0x2e4>)
 80057bc:	4b7f      	ldr	r3, [pc, #508]	; (80059bc <_printf_float+0x2e8>)
 80057be:	e7d1      	b.n	8005764 <_printf_float+0x90>
 80057c0:	6863      	ldr	r3, [r4, #4]
 80057c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057c6:	9206      	str	r2, [sp, #24]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	d13f      	bne.n	800584c <_printf_float+0x178>
 80057cc:	2306      	movs	r3, #6
 80057ce:	6063      	str	r3, [r4, #4]
 80057d0:	9b05      	ldr	r3, [sp, #20]
 80057d2:	6861      	ldr	r1, [r4, #4]
 80057d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057d8:	2300      	movs	r3, #0
 80057da:	9303      	str	r3, [sp, #12]
 80057dc:	ab0a      	add	r3, sp, #40	; 0x28
 80057de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057e2:	ab09      	add	r3, sp, #36	; 0x24
 80057e4:	ec49 8b10 	vmov	d0, r8, r9
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	6022      	str	r2, [r4, #0]
 80057ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057f0:	4628      	mov	r0, r5
 80057f2:	f7ff fece 	bl	8005592 <__cvt>
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057fa:	2b47      	cmp	r3, #71	; 0x47
 80057fc:	4680      	mov	r8, r0
 80057fe:	d108      	bne.n	8005812 <_printf_float+0x13e>
 8005800:	1cc8      	adds	r0, r1, #3
 8005802:	db02      	blt.n	800580a <_printf_float+0x136>
 8005804:	6863      	ldr	r3, [r4, #4]
 8005806:	4299      	cmp	r1, r3
 8005808:	dd41      	ble.n	800588e <_printf_float+0x1ba>
 800580a:	f1ab 0302 	sub.w	r3, fp, #2
 800580e:	fa5f fb83 	uxtb.w	fp, r3
 8005812:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005816:	d820      	bhi.n	800585a <_printf_float+0x186>
 8005818:	3901      	subs	r1, #1
 800581a:	465a      	mov	r2, fp
 800581c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005820:	9109      	str	r1, [sp, #36]	; 0x24
 8005822:	f7ff ff18 	bl	8005656 <__exponent>
 8005826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005828:	1813      	adds	r3, r2, r0
 800582a:	2a01      	cmp	r2, #1
 800582c:	4681      	mov	r9, r0
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	dc02      	bgt.n	8005838 <_printf_float+0x164>
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	07d2      	lsls	r2, r2, #31
 8005836:	d501      	bpl.n	800583c <_printf_float+0x168>
 8005838:	3301      	adds	r3, #1
 800583a:	6123      	str	r3, [r4, #16]
 800583c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005840:	2b00      	cmp	r3, #0
 8005842:	d09c      	beq.n	800577e <_printf_float+0xaa>
 8005844:	232d      	movs	r3, #45	; 0x2d
 8005846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800584a:	e798      	b.n	800577e <_printf_float+0xaa>
 800584c:	9a06      	ldr	r2, [sp, #24]
 800584e:	2a47      	cmp	r2, #71	; 0x47
 8005850:	d1be      	bne.n	80057d0 <_printf_float+0xfc>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1bc      	bne.n	80057d0 <_printf_float+0xfc>
 8005856:	2301      	movs	r3, #1
 8005858:	e7b9      	b.n	80057ce <_printf_float+0xfa>
 800585a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800585e:	d118      	bne.n	8005892 <_printf_float+0x1be>
 8005860:	2900      	cmp	r1, #0
 8005862:	6863      	ldr	r3, [r4, #4]
 8005864:	dd0b      	ble.n	800587e <_printf_float+0x1aa>
 8005866:	6121      	str	r1, [r4, #16]
 8005868:	b913      	cbnz	r3, 8005870 <_printf_float+0x19c>
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	07d0      	lsls	r0, r2, #31
 800586e:	d502      	bpl.n	8005876 <_printf_float+0x1a2>
 8005870:	3301      	adds	r3, #1
 8005872:	440b      	add	r3, r1
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	65a1      	str	r1, [r4, #88]	; 0x58
 8005878:	f04f 0900 	mov.w	r9, #0
 800587c:	e7de      	b.n	800583c <_printf_float+0x168>
 800587e:	b913      	cbnz	r3, 8005886 <_printf_float+0x1b2>
 8005880:	6822      	ldr	r2, [r4, #0]
 8005882:	07d2      	lsls	r2, r2, #31
 8005884:	d501      	bpl.n	800588a <_printf_float+0x1b6>
 8005886:	3302      	adds	r3, #2
 8005888:	e7f4      	b.n	8005874 <_printf_float+0x1a0>
 800588a:	2301      	movs	r3, #1
 800588c:	e7f2      	b.n	8005874 <_printf_float+0x1a0>
 800588e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005894:	4299      	cmp	r1, r3
 8005896:	db05      	blt.n	80058a4 <_printf_float+0x1d0>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	6121      	str	r1, [r4, #16]
 800589c:	07d8      	lsls	r0, r3, #31
 800589e:	d5ea      	bpl.n	8005876 <_printf_float+0x1a2>
 80058a0:	1c4b      	adds	r3, r1, #1
 80058a2:	e7e7      	b.n	8005874 <_printf_float+0x1a0>
 80058a4:	2900      	cmp	r1, #0
 80058a6:	bfd4      	ite	le
 80058a8:	f1c1 0202 	rsble	r2, r1, #2
 80058ac:	2201      	movgt	r2, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	e7e0      	b.n	8005874 <_printf_float+0x1a0>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	055a      	lsls	r2, r3, #21
 80058b6:	d407      	bmi.n	80058c8 <_printf_float+0x1f4>
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	4642      	mov	r2, r8
 80058bc:	4631      	mov	r1, r6
 80058be:	4628      	mov	r0, r5
 80058c0:	47b8      	blx	r7
 80058c2:	3001      	adds	r0, #1
 80058c4:	d12c      	bne.n	8005920 <_printf_float+0x24c>
 80058c6:	e764      	b.n	8005792 <_printf_float+0xbe>
 80058c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058cc:	f240 80e0 	bls.w	8005a90 <_printf_float+0x3bc>
 80058d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058d4:	2200      	movs	r2, #0
 80058d6:	2300      	movs	r3, #0
 80058d8:	f7fb f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d034      	beq.n	800594a <_printf_float+0x276>
 80058e0:	4a37      	ldr	r2, [pc, #220]	; (80059c0 <_printf_float+0x2ec>)
 80058e2:	2301      	movs	r3, #1
 80058e4:	4631      	mov	r1, r6
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b8      	blx	r7
 80058ea:	3001      	adds	r0, #1
 80058ec:	f43f af51 	beq.w	8005792 <_printf_float+0xbe>
 80058f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058f4:	429a      	cmp	r2, r3
 80058f6:	db02      	blt.n	80058fe <_printf_float+0x22a>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	07d8      	lsls	r0, r3, #31
 80058fc:	d510      	bpl.n	8005920 <_printf_float+0x24c>
 80058fe:	ee18 3a10 	vmov	r3, s16
 8005902:	4652      	mov	r2, sl
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f af41 	beq.w	8005792 <_printf_float+0xbe>
 8005910:	f04f 0800 	mov.w	r8, #0
 8005914:	f104 091a 	add.w	r9, r4, #26
 8005918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591a:	3b01      	subs	r3, #1
 800591c:	4543      	cmp	r3, r8
 800591e:	dc09      	bgt.n	8005934 <_printf_float+0x260>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	079b      	lsls	r3, r3, #30
 8005924:	f100 8107 	bmi.w	8005b36 <_printf_float+0x462>
 8005928:	68e0      	ldr	r0, [r4, #12]
 800592a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800592c:	4298      	cmp	r0, r3
 800592e:	bfb8      	it	lt
 8005930:	4618      	movlt	r0, r3
 8005932:	e730      	b.n	8005796 <_printf_float+0xc2>
 8005934:	2301      	movs	r3, #1
 8005936:	464a      	mov	r2, r9
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f af27 	beq.w	8005792 <_printf_float+0xbe>
 8005944:	f108 0801 	add.w	r8, r8, #1
 8005948:	e7e6      	b.n	8005918 <_printf_float+0x244>
 800594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	dc39      	bgt.n	80059c4 <_printf_float+0x2f0>
 8005950:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <_printf_float+0x2ec>)
 8005952:	2301      	movs	r3, #1
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f af19 	beq.w	8005792 <_printf_float+0xbe>
 8005960:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005964:	4313      	orrs	r3, r2
 8005966:	d102      	bne.n	800596e <_printf_float+0x29a>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d5d8      	bpl.n	8005920 <_printf_float+0x24c>
 800596e:	ee18 3a10 	vmov	r3, s16
 8005972:	4652      	mov	r2, sl
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f af09 	beq.w	8005792 <_printf_float+0xbe>
 8005980:	f04f 0900 	mov.w	r9, #0
 8005984:	f104 0a1a 	add.w	sl, r4, #26
 8005988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598a:	425b      	negs	r3, r3
 800598c:	454b      	cmp	r3, r9
 800598e:	dc01      	bgt.n	8005994 <_printf_float+0x2c0>
 8005990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005992:	e792      	b.n	80058ba <_printf_float+0x1e6>
 8005994:	2301      	movs	r3, #1
 8005996:	4652      	mov	r2, sl
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f aef7 	beq.w	8005792 <_printf_float+0xbe>
 80059a4:	f109 0901 	add.w	r9, r9, #1
 80059a8:	e7ee      	b.n	8005988 <_printf_float+0x2b4>
 80059aa:	bf00      	nop
 80059ac:	7fefffff 	.word	0x7fefffff
 80059b0:	08008338 	.word	0x08008338
 80059b4:	0800833c 	.word	0x0800833c
 80059b8:	08008340 	.word	0x08008340
 80059bc:	08008344 	.word	0x08008344
 80059c0:	08008348 	.word	0x08008348
 80059c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059c8:	429a      	cmp	r2, r3
 80059ca:	bfa8      	it	ge
 80059cc:	461a      	movge	r2, r3
 80059ce:	2a00      	cmp	r2, #0
 80059d0:	4691      	mov	r9, r2
 80059d2:	dc37      	bgt.n	8005a44 <_printf_float+0x370>
 80059d4:	f04f 0b00 	mov.w	fp, #0
 80059d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059dc:	f104 021a 	add.w	r2, r4, #26
 80059e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	eba3 0309 	sub.w	r3, r3, r9
 80059e8:	455b      	cmp	r3, fp
 80059ea:	dc33      	bgt.n	8005a54 <_printf_float+0x380>
 80059ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059f0:	429a      	cmp	r2, r3
 80059f2:	db3b      	blt.n	8005a6c <_printf_float+0x398>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07da      	lsls	r2, r3, #31
 80059f8:	d438      	bmi.n	8005a6c <_printf_float+0x398>
 80059fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059fe:	eba2 0903 	sub.w	r9, r2, r3
 8005a02:	9b05      	ldr	r3, [sp, #20]
 8005a04:	1ad2      	subs	r2, r2, r3
 8005a06:	4591      	cmp	r9, r2
 8005a08:	bfa8      	it	ge
 8005a0a:	4691      	movge	r9, r2
 8005a0c:	f1b9 0f00 	cmp.w	r9, #0
 8005a10:	dc35      	bgt.n	8005a7e <_printf_float+0x3aa>
 8005a12:	f04f 0800 	mov.w	r8, #0
 8005a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a1a:	f104 0a1a 	add.w	sl, r4, #26
 8005a1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	eba3 0309 	sub.w	r3, r3, r9
 8005a28:	4543      	cmp	r3, r8
 8005a2a:	f77f af79 	ble.w	8005920 <_printf_float+0x24c>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4652      	mov	r2, sl
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	f43f aeaa 	beq.w	8005792 <_printf_float+0xbe>
 8005a3e:	f108 0801 	add.w	r8, r8, #1
 8005a42:	e7ec      	b.n	8005a1e <_printf_float+0x34a>
 8005a44:	4613      	mov	r3, r2
 8005a46:	4631      	mov	r1, r6
 8005a48:	4642      	mov	r2, r8
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d1c0      	bne.n	80059d4 <_printf_float+0x300>
 8005a52:	e69e      	b.n	8005792 <_printf_float+0xbe>
 8005a54:	2301      	movs	r3, #1
 8005a56:	4631      	mov	r1, r6
 8005a58:	4628      	mov	r0, r5
 8005a5a:	9205      	str	r2, [sp, #20]
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f ae97 	beq.w	8005792 <_printf_float+0xbe>
 8005a64:	9a05      	ldr	r2, [sp, #20]
 8005a66:	f10b 0b01 	add.w	fp, fp, #1
 8005a6a:	e7b9      	b.n	80059e0 <_printf_float+0x30c>
 8005a6c:	ee18 3a10 	vmov	r3, s16
 8005a70:	4652      	mov	r2, sl
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d1be      	bne.n	80059fa <_printf_float+0x326>
 8005a7c:	e689      	b.n	8005792 <_printf_float+0xbe>
 8005a7e:	9a05      	ldr	r2, [sp, #20]
 8005a80:	464b      	mov	r3, r9
 8005a82:	4442      	add	r2, r8
 8005a84:	4631      	mov	r1, r6
 8005a86:	4628      	mov	r0, r5
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d1c1      	bne.n	8005a12 <_printf_float+0x33e>
 8005a8e:	e680      	b.n	8005792 <_printf_float+0xbe>
 8005a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a92:	2a01      	cmp	r2, #1
 8005a94:	dc01      	bgt.n	8005a9a <_printf_float+0x3c6>
 8005a96:	07db      	lsls	r3, r3, #31
 8005a98:	d53a      	bpl.n	8005b10 <_printf_float+0x43c>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f43f ae74 	beq.w	8005792 <_printf_float+0xbe>
 8005aaa:	ee18 3a10 	vmov	r3, s16
 8005aae:	4652      	mov	r2, sl
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f ae6b 	beq.w	8005792 <_printf_float+0xbe>
 8005abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005ac8:	f7fa fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8005acc:	b9d8      	cbnz	r0, 8005b06 <_printf_float+0x432>
 8005ace:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ad2:	f108 0201 	add.w	r2, r8, #1
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	d10e      	bne.n	8005afe <_printf_float+0x42a>
 8005ae0:	e657      	b.n	8005792 <_printf_float+0xbe>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4652      	mov	r2, sl
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	f43f ae50 	beq.w	8005792 <_printf_float+0xbe>
 8005af2:	f108 0801 	add.w	r8, r8, #1
 8005af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4543      	cmp	r3, r8
 8005afc:	dcf1      	bgt.n	8005ae2 <_printf_float+0x40e>
 8005afe:	464b      	mov	r3, r9
 8005b00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b04:	e6da      	b.n	80058bc <_printf_float+0x1e8>
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	f104 0a1a 	add.w	sl, r4, #26
 8005b0e:	e7f2      	b.n	8005af6 <_printf_float+0x422>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4642      	mov	r2, r8
 8005b14:	e7df      	b.n	8005ad6 <_printf_float+0x402>
 8005b16:	2301      	movs	r3, #1
 8005b18:	464a      	mov	r2, r9
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b8      	blx	r7
 8005b20:	3001      	adds	r0, #1
 8005b22:	f43f ae36 	beq.w	8005792 <_printf_float+0xbe>
 8005b26:	f108 0801 	add.w	r8, r8, #1
 8005b2a:	68e3      	ldr	r3, [r4, #12]
 8005b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b2e:	1a5b      	subs	r3, r3, r1
 8005b30:	4543      	cmp	r3, r8
 8005b32:	dcf0      	bgt.n	8005b16 <_printf_float+0x442>
 8005b34:	e6f8      	b.n	8005928 <_printf_float+0x254>
 8005b36:	f04f 0800 	mov.w	r8, #0
 8005b3a:	f104 0919 	add.w	r9, r4, #25
 8005b3e:	e7f4      	b.n	8005b2a <_printf_float+0x456>

08005b40 <_printf_common>:
 8005b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	4616      	mov	r6, r2
 8005b46:	4699      	mov	r9, r3
 8005b48:	688a      	ldr	r2, [r1, #8]
 8005b4a:	690b      	ldr	r3, [r1, #16]
 8005b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bfb8      	it	lt
 8005b54:	4613      	movlt	r3, r2
 8005b56:	6033      	str	r3, [r6, #0]
 8005b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	b10a      	cbz	r2, 8005b66 <_printf_common+0x26>
 8005b62:	3301      	adds	r3, #1
 8005b64:	6033      	str	r3, [r6, #0]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	0699      	lsls	r1, r3, #26
 8005b6a:	bf42      	ittt	mi
 8005b6c:	6833      	ldrmi	r3, [r6, #0]
 8005b6e:	3302      	addmi	r3, #2
 8005b70:	6033      	strmi	r3, [r6, #0]
 8005b72:	6825      	ldr	r5, [r4, #0]
 8005b74:	f015 0506 	ands.w	r5, r5, #6
 8005b78:	d106      	bne.n	8005b88 <_printf_common+0x48>
 8005b7a:	f104 0a19 	add.w	sl, r4, #25
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	6832      	ldr	r2, [r6, #0]
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	42ab      	cmp	r3, r5
 8005b86:	dc26      	bgt.n	8005bd6 <_printf_common+0x96>
 8005b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b8c:	1e13      	subs	r3, r2, #0
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	bf18      	it	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	0692      	lsls	r2, r2, #26
 8005b96:	d42b      	bmi.n	8005bf0 <_printf_common+0xb0>
 8005b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	47c0      	blx	r8
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d01e      	beq.n	8005be4 <_printf_common+0xa4>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	6922      	ldr	r2, [r4, #16]
 8005baa:	f003 0306 	and.w	r3, r3, #6
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	bf02      	ittt	eq
 8005bb2:	68e5      	ldreq	r5, [r4, #12]
 8005bb4:	6833      	ldreq	r3, [r6, #0]
 8005bb6:	1aed      	subeq	r5, r5, r3
 8005bb8:	68a3      	ldr	r3, [r4, #8]
 8005bba:	bf0c      	ite	eq
 8005bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bc0:	2500      	movne	r5, #0
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bfc4      	itt	gt
 8005bc6:	1a9b      	subgt	r3, r3, r2
 8005bc8:	18ed      	addgt	r5, r5, r3
 8005bca:	2600      	movs	r6, #0
 8005bcc:	341a      	adds	r4, #26
 8005bce:	42b5      	cmp	r5, r6
 8005bd0:	d11a      	bne.n	8005c08 <_printf_common+0xc8>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e008      	b.n	8005be8 <_printf_common+0xa8>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4652      	mov	r2, sl
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4638      	mov	r0, r7
 8005bde:	47c0      	blx	r8
 8005be0:	3001      	adds	r0, #1
 8005be2:	d103      	bne.n	8005bec <_printf_common+0xac>
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bec:	3501      	adds	r5, #1
 8005bee:	e7c6      	b.n	8005b7e <_printf_common+0x3e>
 8005bf0:	18e1      	adds	r1, r4, r3
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	2030      	movs	r0, #48	; 0x30
 8005bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bfa:	4422      	add	r2, r4
 8005bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c04:	3302      	adds	r3, #2
 8005c06:	e7c7      	b.n	8005b98 <_printf_common+0x58>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	4638      	mov	r0, r7
 8005c10:	47c0      	blx	r8
 8005c12:	3001      	adds	r0, #1
 8005c14:	d0e6      	beq.n	8005be4 <_printf_common+0xa4>
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7d9      	b.n	8005bce <_printf_common+0x8e>
	...

08005c1c <_printf_i>:
 8005c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	7e0f      	ldrb	r7, [r1, #24]
 8005c22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c24:	2f78      	cmp	r7, #120	; 0x78
 8005c26:	4691      	mov	r9, r2
 8005c28:	4680      	mov	r8, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	469a      	mov	sl, r3
 8005c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c32:	d807      	bhi.n	8005c44 <_printf_i+0x28>
 8005c34:	2f62      	cmp	r7, #98	; 0x62
 8005c36:	d80a      	bhi.n	8005c4e <_printf_i+0x32>
 8005c38:	2f00      	cmp	r7, #0
 8005c3a:	f000 80d4 	beq.w	8005de6 <_printf_i+0x1ca>
 8005c3e:	2f58      	cmp	r7, #88	; 0x58
 8005c40:	f000 80c0 	beq.w	8005dc4 <_printf_i+0x1a8>
 8005c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c4c:	e03a      	b.n	8005cc4 <_printf_i+0xa8>
 8005c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c52:	2b15      	cmp	r3, #21
 8005c54:	d8f6      	bhi.n	8005c44 <_printf_i+0x28>
 8005c56:	a101      	add	r1, pc, #4	; (adr r1, 8005c5c <_printf_i+0x40>)
 8005c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c5c:	08005cb5 	.word	0x08005cb5
 8005c60:	08005cc9 	.word	0x08005cc9
 8005c64:	08005c45 	.word	0x08005c45
 8005c68:	08005c45 	.word	0x08005c45
 8005c6c:	08005c45 	.word	0x08005c45
 8005c70:	08005c45 	.word	0x08005c45
 8005c74:	08005cc9 	.word	0x08005cc9
 8005c78:	08005c45 	.word	0x08005c45
 8005c7c:	08005c45 	.word	0x08005c45
 8005c80:	08005c45 	.word	0x08005c45
 8005c84:	08005c45 	.word	0x08005c45
 8005c88:	08005dcd 	.word	0x08005dcd
 8005c8c:	08005cf5 	.word	0x08005cf5
 8005c90:	08005d87 	.word	0x08005d87
 8005c94:	08005c45 	.word	0x08005c45
 8005c98:	08005c45 	.word	0x08005c45
 8005c9c:	08005def 	.word	0x08005def
 8005ca0:	08005c45 	.word	0x08005c45
 8005ca4:	08005cf5 	.word	0x08005cf5
 8005ca8:	08005c45 	.word	0x08005c45
 8005cac:	08005c45 	.word	0x08005c45
 8005cb0:	08005d8f 	.word	0x08005d8f
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	1d1a      	adds	r2, r3, #4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	602a      	str	r2, [r5, #0]
 8005cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e09f      	b.n	8005e08 <_printf_i+0x1ec>
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	682b      	ldr	r3, [r5, #0]
 8005ccc:	0607      	lsls	r7, r0, #24
 8005cce:	f103 0104 	add.w	r1, r3, #4
 8005cd2:	6029      	str	r1, [r5, #0]
 8005cd4:	d501      	bpl.n	8005cda <_printf_i+0xbe>
 8005cd6:	681e      	ldr	r6, [r3, #0]
 8005cd8:	e003      	b.n	8005ce2 <_printf_i+0xc6>
 8005cda:	0646      	lsls	r6, r0, #25
 8005cdc:	d5fb      	bpl.n	8005cd6 <_printf_i+0xba>
 8005cde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	da03      	bge.n	8005cee <_printf_i+0xd2>
 8005ce6:	232d      	movs	r3, #45	; 0x2d
 8005ce8:	4276      	negs	r6, r6
 8005cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cee:	485a      	ldr	r0, [pc, #360]	; (8005e58 <_printf_i+0x23c>)
 8005cf0:	230a      	movs	r3, #10
 8005cf2:	e012      	b.n	8005d1a <_printf_i+0xfe>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	6820      	ldr	r0, [r4, #0]
 8005cf8:	1d19      	adds	r1, r3, #4
 8005cfa:	6029      	str	r1, [r5, #0]
 8005cfc:	0605      	lsls	r5, r0, #24
 8005cfe:	d501      	bpl.n	8005d04 <_printf_i+0xe8>
 8005d00:	681e      	ldr	r6, [r3, #0]
 8005d02:	e002      	b.n	8005d0a <_printf_i+0xee>
 8005d04:	0641      	lsls	r1, r0, #25
 8005d06:	d5fb      	bpl.n	8005d00 <_printf_i+0xe4>
 8005d08:	881e      	ldrh	r6, [r3, #0]
 8005d0a:	4853      	ldr	r0, [pc, #332]	; (8005e58 <_printf_i+0x23c>)
 8005d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d0e:	bf0c      	ite	eq
 8005d10:	2308      	moveq	r3, #8
 8005d12:	230a      	movne	r3, #10
 8005d14:	2100      	movs	r1, #0
 8005d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d1a:	6865      	ldr	r5, [r4, #4]
 8005d1c:	60a5      	str	r5, [r4, #8]
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	bfa2      	ittt	ge
 8005d22:	6821      	ldrge	r1, [r4, #0]
 8005d24:	f021 0104 	bicge.w	r1, r1, #4
 8005d28:	6021      	strge	r1, [r4, #0]
 8005d2a:	b90e      	cbnz	r6, 8005d30 <_printf_i+0x114>
 8005d2c:	2d00      	cmp	r5, #0
 8005d2e:	d04b      	beq.n	8005dc8 <_printf_i+0x1ac>
 8005d30:	4615      	mov	r5, r2
 8005d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d36:	fb03 6711 	mls	r7, r3, r1, r6
 8005d3a:	5dc7      	ldrb	r7, [r0, r7]
 8005d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d40:	4637      	mov	r7, r6
 8005d42:	42bb      	cmp	r3, r7
 8005d44:	460e      	mov	r6, r1
 8005d46:	d9f4      	bls.n	8005d32 <_printf_i+0x116>
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d10b      	bne.n	8005d64 <_printf_i+0x148>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07de      	lsls	r6, r3, #31
 8005d50:	d508      	bpl.n	8005d64 <_printf_i+0x148>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	6861      	ldr	r1, [r4, #4]
 8005d56:	4299      	cmp	r1, r3
 8005d58:	bfde      	ittt	le
 8005d5a:	2330      	movle	r3, #48	; 0x30
 8005d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d64:	1b52      	subs	r2, r2, r5
 8005d66:	6122      	str	r2, [r4, #16]
 8005d68:	f8cd a000 	str.w	sl, [sp]
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	aa03      	add	r2, sp, #12
 8005d70:	4621      	mov	r1, r4
 8005d72:	4640      	mov	r0, r8
 8005d74:	f7ff fee4 	bl	8005b40 <_printf_common>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d14a      	bne.n	8005e12 <_printf_i+0x1f6>
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	b004      	add	sp, #16
 8005d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	f043 0320 	orr.w	r3, r3, #32
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	4833      	ldr	r0, [pc, #204]	; (8005e5c <_printf_i+0x240>)
 8005d90:	2778      	movs	r7, #120	; 0x78
 8005d92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	6829      	ldr	r1, [r5, #0]
 8005d9a:	061f      	lsls	r7, r3, #24
 8005d9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005da0:	d402      	bmi.n	8005da8 <_printf_i+0x18c>
 8005da2:	065f      	lsls	r7, r3, #25
 8005da4:	bf48      	it	mi
 8005da6:	b2b6      	uxthmi	r6, r6
 8005da8:	07df      	lsls	r7, r3, #31
 8005daa:	bf48      	it	mi
 8005dac:	f043 0320 	orrmi.w	r3, r3, #32
 8005db0:	6029      	str	r1, [r5, #0]
 8005db2:	bf48      	it	mi
 8005db4:	6023      	strmi	r3, [r4, #0]
 8005db6:	b91e      	cbnz	r6, 8005dc0 <_printf_i+0x1a4>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	f023 0320 	bic.w	r3, r3, #32
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	e7a7      	b.n	8005d14 <_printf_i+0xf8>
 8005dc4:	4824      	ldr	r0, [pc, #144]	; (8005e58 <_printf_i+0x23c>)
 8005dc6:	e7e4      	b.n	8005d92 <_printf_i+0x176>
 8005dc8:	4615      	mov	r5, r2
 8005dca:	e7bd      	b.n	8005d48 <_printf_i+0x12c>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	6826      	ldr	r6, [r4, #0]
 8005dd0:	6961      	ldr	r1, [r4, #20]
 8005dd2:	1d18      	adds	r0, r3, #4
 8005dd4:	6028      	str	r0, [r5, #0]
 8005dd6:	0635      	lsls	r5, r6, #24
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	d501      	bpl.n	8005de0 <_printf_i+0x1c4>
 8005ddc:	6019      	str	r1, [r3, #0]
 8005dde:	e002      	b.n	8005de6 <_printf_i+0x1ca>
 8005de0:	0670      	lsls	r0, r6, #25
 8005de2:	d5fb      	bpl.n	8005ddc <_printf_i+0x1c0>
 8005de4:	8019      	strh	r1, [r3, #0]
 8005de6:	2300      	movs	r3, #0
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	4615      	mov	r5, r2
 8005dec:	e7bc      	b.n	8005d68 <_printf_i+0x14c>
 8005dee:	682b      	ldr	r3, [r5, #0]
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	602a      	str	r2, [r5, #0]
 8005df4:	681d      	ldr	r5, [r3, #0]
 8005df6:	6862      	ldr	r2, [r4, #4]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f7fa f9e8 	bl	80001d0 <memchr>
 8005e00:	b108      	cbz	r0, 8005e06 <_printf_i+0x1ea>
 8005e02:	1b40      	subs	r0, r0, r5
 8005e04:	6060      	str	r0, [r4, #4]
 8005e06:	6863      	ldr	r3, [r4, #4]
 8005e08:	6123      	str	r3, [r4, #16]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e10:	e7aa      	b.n	8005d68 <_printf_i+0x14c>
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	462a      	mov	r2, r5
 8005e16:	4649      	mov	r1, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	47d0      	blx	sl
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d0ad      	beq.n	8005d7c <_printf_i+0x160>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	079b      	lsls	r3, r3, #30
 8005e24:	d413      	bmi.n	8005e4e <_printf_i+0x232>
 8005e26:	68e0      	ldr	r0, [r4, #12]
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	4298      	cmp	r0, r3
 8005e2c:	bfb8      	it	lt
 8005e2e:	4618      	movlt	r0, r3
 8005e30:	e7a6      	b.n	8005d80 <_printf_i+0x164>
 8005e32:	2301      	movs	r3, #1
 8005e34:	4632      	mov	r2, r6
 8005e36:	4649      	mov	r1, r9
 8005e38:	4640      	mov	r0, r8
 8005e3a:	47d0      	blx	sl
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d09d      	beq.n	8005d7c <_printf_i+0x160>
 8005e40:	3501      	adds	r5, #1
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	9903      	ldr	r1, [sp, #12]
 8005e46:	1a5b      	subs	r3, r3, r1
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dcf2      	bgt.n	8005e32 <_printf_i+0x216>
 8005e4c:	e7eb      	b.n	8005e26 <_printf_i+0x20a>
 8005e4e:	2500      	movs	r5, #0
 8005e50:	f104 0619 	add.w	r6, r4, #25
 8005e54:	e7f5      	b.n	8005e42 <_printf_i+0x226>
 8005e56:	bf00      	nop
 8005e58:	0800834a 	.word	0x0800834a
 8005e5c:	0800835b 	.word	0x0800835b

08005e60 <std>:
 8005e60:	2300      	movs	r3, #0
 8005e62:	b510      	push	{r4, lr}
 8005e64:	4604      	mov	r4, r0
 8005e66:	e9c0 3300 	strd	r3, r3, [r0]
 8005e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e6e:	6083      	str	r3, [r0, #8]
 8005e70:	8181      	strh	r1, [r0, #12]
 8005e72:	6643      	str	r3, [r0, #100]	; 0x64
 8005e74:	81c2      	strh	r2, [r0, #14]
 8005e76:	6183      	str	r3, [r0, #24]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	305c      	adds	r0, #92	; 0x5c
 8005e7e:	f000 f914 	bl	80060aa <memset>
 8005e82:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <std+0x58>)
 8005e84:	6263      	str	r3, [r4, #36]	; 0x24
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <std+0x5c>)
 8005e88:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <std+0x60>)
 8005e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <std+0x64>)
 8005e90:	6323      	str	r3, [r4, #48]	; 0x30
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <std+0x68>)
 8005e94:	6224      	str	r4, [r4, #32]
 8005e96:	429c      	cmp	r4, r3
 8005e98:	d006      	beq.n	8005ea8 <std+0x48>
 8005e9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005e9e:	4294      	cmp	r4, r2
 8005ea0:	d002      	beq.n	8005ea8 <std+0x48>
 8005ea2:	33d0      	adds	r3, #208	; 0xd0
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	d105      	bne.n	8005eb4 <std+0x54>
 8005ea8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb0:	f000 b978 	b.w	80061a4 <__retarget_lock_init_recursive>
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	bf00      	nop
 8005eb8:	08006025 	.word	0x08006025
 8005ebc:	08006047 	.word	0x08006047
 8005ec0:	0800607f 	.word	0x0800607f
 8005ec4:	080060a3 	.word	0x080060a3
 8005ec8:	200003c8 	.word	0x200003c8

08005ecc <stdio_exit_handler>:
 8005ecc:	4a02      	ldr	r2, [pc, #8]	; (8005ed8 <stdio_exit_handler+0xc>)
 8005ece:	4903      	ldr	r1, [pc, #12]	; (8005edc <stdio_exit_handler+0x10>)
 8005ed0:	4803      	ldr	r0, [pc, #12]	; (8005ee0 <stdio_exit_handler+0x14>)
 8005ed2:	f000 b869 	b.w	8005fa8 <_fwalk_sglue>
 8005ed6:	bf00      	nop
 8005ed8:	20000018 	.word	0x20000018
 8005edc:	08007b59 	.word	0x08007b59
 8005ee0:	20000024 	.word	0x20000024

08005ee4 <cleanup_stdio>:
 8005ee4:	6841      	ldr	r1, [r0, #4]
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <cleanup_stdio+0x34>)
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	b510      	push	{r4, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	d001      	beq.n	8005ef4 <cleanup_stdio+0x10>
 8005ef0:	f001 fe32 	bl	8007b58 <_fflush_r>
 8005ef4:	68a1      	ldr	r1, [r4, #8]
 8005ef6:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <cleanup_stdio+0x38>)
 8005ef8:	4299      	cmp	r1, r3
 8005efa:	d002      	beq.n	8005f02 <cleanup_stdio+0x1e>
 8005efc:	4620      	mov	r0, r4
 8005efe:	f001 fe2b 	bl	8007b58 <_fflush_r>
 8005f02:	68e1      	ldr	r1, [r4, #12]
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <cleanup_stdio+0x3c>)
 8005f06:	4299      	cmp	r1, r3
 8005f08:	d004      	beq.n	8005f14 <cleanup_stdio+0x30>
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f10:	f001 be22 	b.w	8007b58 <_fflush_r>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	bf00      	nop
 8005f18:	200003c8 	.word	0x200003c8
 8005f1c:	20000430 	.word	0x20000430
 8005f20:	20000498 	.word	0x20000498

08005f24 <global_stdio_init.part.0>:
 8005f24:	b510      	push	{r4, lr}
 8005f26:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <global_stdio_init.part.0+0x30>)
 8005f28:	4c0b      	ldr	r4, [pc, #44]	; (8005f58 <global_stdio_init.part.0+0x34>)
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <global_stdio_init.part.0+0x38>)
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	2200      	movs	r2, #0
 8005f32:	2104      	movs	r1, #4
 8005f34:	f7ff ff94 	bl	8005e60 <std>
 8005f38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	2109      	movs	r1, #9
 8005f40:	f7ff ff8e 	bl	8005e60 <std>
 8005f44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f48:	2202      	movs	r2, #2
 8005f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f4e:	2112      	movs	r1, #18
 8005f50:	f7ff bf86 	b.w	8005e60 <std>
 8005f54:	20000500 	.word	0x20000500
 8005f58:	200003c8 	.word	0x200003c8
 8005f5c:	08005ecd 	.word	0x08005ecd

08005f60 <__sfp_lock_acquire>:
 8005f60:	4801      	ldr	r0, [pc, #4]	; (8005f68 <__sfp_lock_acquire+0x8>)
 8005f62:	f000 b920 	b.w	80061a6 <__retarget_lock_acquire_recursive>
 8005f66:	bf00      	nop
 8005f68:	20000509 	.word	0x20000509

08005f6c <__sfp_lock_release>:
 8005f6c:	4801      	ldr	r0, [pc, #4]	; (8005f74 <__sfp_lock_release+0x8>)
 8005f6e:	f000 b91b 	b.w	80061a8 <__retarget_lock_release_recursive>
 8005f72:	bf00      	nop
 8005f74:	20000509 	.word	0x20000509

08005f78 <__sinit>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	f7ff fff0 	bl	8005f60 <__sfp_lock_acquire>
 8005f80:	6a23      	ldr	r3, [r4, #32]
 8005f82:	b11b      	cbz	r3, 8005f8c <__sinit+0x14>
 8005f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f88:	f7ff bff0 	b.w	8005f6c <__sfp_lock_release>
 8005f8c:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <__sinit+0x28>)
 8005f8e:	6223      	str	r3, [r4, #32]
 8005f90:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <__sinit+0x2c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1f5      	bne.n	8005f84 <__sinit+0xc>
 8005f98:	f7ff ffc4 	bl	8005f24 <global_stdio_init.part.0>
 8005f9c:	e7f2      	b.n	8005f84 <__sinit+0xc>
 8005f9e:	bf00      	nop
 8005fa0:	08005ee5 	.word	0x08005ee5
 8005fa4:	20000500 	.word	0x20000500

08005fa8 <_fwalk_sglue>:
 8005fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fac:	4607      	mov	r7, r0
 8005fae:	4688      	mov	r8, r1
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	2600      	movs	r6, #0
 8005fb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fb8:	f1b9 0901 	subs.w	r9, r9, #1
 8005fbc:	d505      	bpl.n	8005fca <_fwalk_sglue+0x22>
 8005fbe:	6824      	ldr	r4, [r4, #0]
 8005fc0:	2c00      	cmp	r4, #0
 8005fc2:	d1f7      	bne.n	8005fb4 <_fwalk_sglue+0xc>
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fca:	89ab      	ldrh	r3, [r5, #12]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d907      	bls.n	8005fe0 <_fwalk_sglue+0x38>
 8005fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	d003      	beq.n	8005fe0 <_fwalk_sglue+0x38>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4638      	mov	r0, r7
 8005fdc:	47c0      	blx	r8
 8005fde:	4306      	orrs	r6, r0
 8005fe0:	3568      	adds	r5, #104	; 0x68
 8005fe2:	e7e9      	b.n	8005fb8 <_fwalk_sglue+0x10>

08005fe4 <siprintf>:
 8005fe4:	b40e      	push	{r1, r2, r3}
 8005fe6:	b500      	push	{lr}
 8005fe8:	b09c      	sub	sp, #112	; 0x70
 8005fea:	ab1d      	add	r3, sp, #116	; 0x74
 8005fec:	9002      	str	r0, [sp, #8]
 8005fee:	9006      	str	r0, [sp, #24]
 8005ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ff4:	4809      	ldr	r0, [pc, #36]	; (800601c <siprintf+0x38>)
 8005ff6:	9107      	str	r1, [sp, #28]
 8005ff8:	9104      	str	r1, [sp, #16]
 8005ffa:	4909      	ldr	r1, [pc, #36]	; (8006020 <siprintf+0x3c>)
 8005ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006000:	9105      	str	r1, [sp, #20]
 8006002:	6800      	ldr	r0, [r0, #0]
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	a902      	add	r1, sp, #8
 8006008:	f001 fc22 	bl	8007850 <_svfiprintf_r>
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	2200      	movs	r2, #0
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	b01c      	add	sp, #112	; 0x70
 8006014:	f85d eb04 	ldr.w	lr, [sp], #4
 8006018:	b003      	add	sp, #12
 800601a:	4770      	bx	lr
 800601c:	20000070 	.word	0x20000070
 8006020:	ffff0208 	.word	0xffff0208

08006024 <__sread>:
 8006024:	b510      	push	{r4, lr}
 8006026:	460c      	mov	r4, r1
 8006028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602c:	f000 f86c 	bl	8006108 <_read_r>
 8006030:	2800      	cmp	r0, #0
 8006032:	bfab      	itete	ge
 8006034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006036:	89a3      	ldrhlt	r3, [r4, #12]
 8006038:	181b      	addge	r3, r3, r0
 800603a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800603e:	bfac      	ite	ge
 8006040:	6563      	strge	r3, [r4, #84]	; 0x54
 8006042:	81a3      	strhlt	r3, [r4, #12]
 8006044:	bd10      	pop	{r4, pc}

08006046 <__swrite>:
 8006046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604a:	461f      	mov	r7, r3
 800604c:	898b      	ldrh	r3, [r1, #12]
 800604e:	05db      	lsls	r3, r3, #23
 8006050:	4605      	mov	r5, r0
 8006052:	460c      	mov	r4, r1
 8006054:	4616      	mov	r6, r2
 8006056:	d505      	bpl.n	8006064 <__swrite+0x1e>
 8006058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605c:	2302      	movs	r3, #2
 800605e:	2200      	movs	r2, #0
 8006060:	f000 f840 	bl	80060e4 <_lseek_r>
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800606a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	4632      	mov	r2, r6
 8006072:	463b      	mov	r3, r7
 8006074:	4628      	mov	r0, r5
 8006076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607a:	f000 b857 	b.w	800612c <_write_r>

0800607e <__sseek>:
 800607e:	b510      	push	{r4, lr}
 8006080:	460c      	mov	r4, r1
 8006082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006086:	f000 f82d 	bl	80060e4 <_lseek_r>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	bf15      	itete	ne
 8006090:	6560      	strne	r0, [r4, #84]	; 0x54
 8006092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800609a:	81a3      	strheq	r3, [r4, #12]
 800609c:	bf18      	it	ne
 800609e:	81a3      	strhne	r3, [r4, #12]
 80060a0:	bd10      	pop	{r4, pc}

080060a2 <__sclose>:
 80060a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a6:	f000 b80d 	b.w	80060c4 <_close_r>

080060aa <memset>:
 80060aa:	4402      	add	r2, r0
 80060ac:	4603      	mov	r3, r0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d100      	bne.n	80060b4 <memset+0xa>
 80060b2:	4770      	bx	lr
 80060b4:	f803 1b01 	strb.w	r1, [r3], #1
 80060b8:	e7f9      	b.n	80060ae <memset+0x4>
	...

080060bc <_localeconv_r>:
 80060bc:	4800      	ldr	r0, [pc, #0]	; (80060c0 <_localeconv_r+0x4>)
 80060be:	4770      	bx	lr
 80060c0:	20000164 	.word	0x20000164

080060c4 <_close_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d06      	ldr	r5, [pc, #24]	; (80060e0 <_close_r+0x1c>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fb fa3b 	bl	800154a <_close>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_close_r+0x1a>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_close_r+0x1a>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20000504 	.word	0x20000504

080060e4 <_lseek_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d07      	ldr	r5, [pc, #28]	; (8006104 <_lseek_r+0x20>)
 80060e8:	4604      	mov	r4, r0
 80060ea:	4608      	mov	r0, r1
 80060ec:	4611      	mov	r1, r2
 80060ee:	2200      	movs	r2, #0
 80060f0:	602a      	str	r2, [r5, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f7fb fa50 	bl	8001598 <_lseek>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_lseek_r+0x1e>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_lseek_r+0x1e>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	20000504 	.word	0x20000504

08006108 <_read_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d07      	ldr	r5, [pc, #28]	; (8006128 <_read_r+0x20>)
 800610c:	4604      	mov	r4, r0
 800610e:	4608      	mov	r0, r1
 8006110:	4611      	mov	r1, r2
 8006112:	2200      	movs	r2, #0
 8006114:	602a      	str	r2, [r5, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	f7fb f9de 	bl	80014d8 <_read>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_read_r+0x1e>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_read_r+0x1e>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20000504 	.word	0x20000504

0800612c <_write_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d07      	ldr	r5, [pc, #28]	; (800614c <_write_r+0x20>)
 8006130:	4604      	mov	r4, r0
 8006132:	4608      	mov	r0, r1
 8006134:	4611      	mov	r1, r2
 8006136:	2200      	movs	r2, #0
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fb f9e9 	bl	8001512 <_write>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_write_r+0x1e>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_write_r+0x1e>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	20000504 	.word	0x20000504

08006150 <__errno>:
 8006150:	4b01      	ldr	r3, [pc, #4]	; (8006158 <__errno+0x8>)
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000070 	.word	0x20000070

0800615c <__libc_init_array>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	4d0d      	ldr	r5, [pc, #52]	; (8006194 <__libc_init_array+0x38>)
 8006160:	4c0d      	ldr	r4, [pc, #52]	; (8006198 <__libc_init_array+0x3c>)
 8006162:	1b64      	subs	r4, r4, r5
 8006164:	10a4      	asrs	r4, r4, #2
 8006166:	2600      	movs	r6, #0
 8006168:	42a6      	cmp	r6, r4
 800616a:	d109      	bne.n	8006180 <__libc_init_array+0x24>
 800616c:	4d0b      	ldr	r5, [pc, #44]	; (800619c <__libc_init_array+0x40>)
 800616e:	4c0c      	ldr	r4, [pc, #48]	; (80061a0 <__libc_init_array+0x44>)
 8006170:	f002 f896 	bl	80082a0 <_init>
 8006174:	1b64      	subs	r4, r4, r5
 8006176:	10a4      	asrs	r4, r4, #2
 8006178:	2600      	movs	r6, #0
 800617a:	42a6      	cmp	r6, r4
 800617c:	d105      	bne.n	800618a <__libc_init_array+0x2e>
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	f855 3b04 	ldr.w	r3, [r5], #4
 8006184:	4798      	blx	r3
 8006186:	3601      	adds	r6, #1
 8006188:	e7ee      	b.n	8006168 <__libc_init_array+0xc>
 800618a:	f855 3b04 	ldr.w	r3, [r5], #4
 800618e:	4798      	blx	r3
 8006190:	3601      	adds	r6, #1
 8006192:	e7f2      	b.n	800617a <__libc_init_array+0x1e>
 8006194:	080086ac 	.word	0x080086ac
 8006198:	080086ac 	.word	0x080086ac
 800619c:	080086ac 	.word	0x080086ac
 80061a0:	080086b0 	.word	0x080086b0

080061a4 <__retarget_lock_init_recursive>:
 80061a4:	4770      	bx	lr

080061a6 <__retarget_lock_acquire_recursive>:
 80061a6:	4770      	bx	lr

080061a8 <__retarget_lock_release_recursive>:
 80061a8:	4770      	bx	lr

080061aa <quorem>:
 80061aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ae:	6903      	ldr	r3, [r0, #16]
 80061b0:	690c      	ldr	r4, [r1, #16]
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	4607      	mov	r7, r0
 80061b6:	db7e      	blt.n	80062b6 <quorem+0x10c>
 80061b8:	3c01      	subs	r4, #1
 80061ba:	f101 0814 	add.w	r8, r1, #20
 80061be:	f100 0514 	add.w	r5, r0, #20
 80061c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061d0:	3301      	adds	r3, #1
 80061d2:	429a      	cmp	r2, r3
 80061d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80061e0:	d331      	bcc.n	8006246 <quorem+0x9c>
 80061e2:	f04f 0e00 	mov.w	lr, #0
 80061e6:	4640      	mov	r0, r8
 80061e8:	46ac      	mov	ip, r5
 80061ea:	46f2      	mov	sl, lr
 80061ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80061f0:	b293      	uxth	r3, r2
 80061f2:	fb06 e303 	mla	r3, r6, r3, lr
 80061f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061fa:	0c1a      	lsrs	r2, r3, #16
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	ebaa 0303 	sub.w	r3, sl, r3
 8006202:	f8dc a000 	ldr.w	sl, [ip]
 8006206:	fa13 f38a 	uxtah	r3, r3, sl
 800620a:	fb06 220e 	mla	r2, r6, lr, r2
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	9b00      	ldr	r3, [sp, #0]
 8006212:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006216:	b292      	uxth	r2, r2
 8006218:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800621c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006220:	f8bd 3000 	ldrh.w	r3, [sp]
 8006224:	4581      	cmp	r9, r0
 8006226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800622a:	f84c 3b04 	str.w	r3, [ip], #4
 800622e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006232:	d2db      	bcs.n	80061ec <quorem+0x42>
 8006234:	f855 300b 	ldr.w	r3, [r5, fp]
 8006238:	b92b      	cbnz	r3, 8006246 <quorem+0x9c>
 800623a:	9b01      	ldr	r3, [sp, #4]
 800623c:	3b04      	subs	r3, #4
 800623e:	429d      	cmp	r5, r3
 8006240:	461a      	mov	r2, r3
 8006242:	d32c      	bcc.n	800629e <quorem+0xf4>
 8006244:	613c      	str	r4, [r7, #16]
 8006246:	4638      	mov	r0, r7
 8006248:	f001 f9a8 	bl	800759c <__mcmp>
 800624c:	2800      	cmp	r0, #0
 800624e:	db22      	blt.n	8006296 <quorem+0xec>
 8006250:	3601      	adds	r6, #1
 8006252:	4629      	mov	r1, r5
 8006254:	2000      	movs	r0, #0
 8006256:	f858 2b04 	ldr.w	r2, [r8], #4
 800625a:	f8d1 c000 	ldr.w	ip, [r1]
 800625e:	b293      	uxth	r3, r2
 8006260:	1ac3      	subs	r3, r0, r3
 8006262:	0c12      	lsrs	r2, r2, #16
 8006264:	fa13 f38c 	uxtah	r3, r3, ip
 8006268:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800626c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006270:	b29b      	uxth	r3, r3
 8006272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006276:	45c1      	cmp	r9, r8
 8006278:	f841 3b04 	str.w	r3, [r1], #4
 800627c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006280:	d2e9      	bcs.n	8006256 <quorem+0xac>
 8006282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800628a:	b922      	cbnz	r2, 8006296 <quorem+0xec>
 800628c:	3b04      	subs	r3, #4
 800628e:	429d      	cmp	r5, r3
 8006290:	461a      	mov	r2, r3
 8006292:	d30a      	bcc.n	80062aa <quorem+0x100>
 8006294:	613c      	str	r4, [r7, #16]
 8006296:	4630      	mov	r0, r6
 8006298:	b003      	add	sp, #12
 800629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	3b04      	subs	r3, #4
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	d1ce      	bne.n	8006244 <quorem+0x9a>
 80062a6:	3c01      	subs	r4, #1
 80062a8:	e7c9      	b.n	800623e <quorem+0x94>
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d1f0      	bne.n	8006294 <quorem+0xea>
 80062b2:	3c01      	subs	r4, #1
 80062b4:	e7eb      	b.n	800628e <quorem+0xe4>
 80062b6:	2000      	movs	r0, #0
 80062b8:	e7ee      	b.n	8006298 <quorem+0xee>
 80062ba:	0000      	movs	r0, r0
 80062bc:	0000      	movs	r0, r0
	...

080062c0 <_dtoa_r>:
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	ed2d 8b04 	vpush	{d8-d9}
 80062c8:	69c5      	ldr	r5, [r0, #28]
 80062ca:	b093      	sub	sp, #76	; 0x4c
 80062cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062d0:	ec57 6b10 	vmov	r6, r7, d0
 80062d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062d8:	9107      	str	r1, [sp, #28]
 80062da:	4604      	mov	r4, r0
 80062dc:	920a      	str	r2, [sp, #40]	; 0x28
 80062de:	930d      	str	r3, [sp, #52]	; 0x34
 80062e0:	b975      	cbnz	r5, 8006300 <_dtoa_r+0x40>
 80062e2:	2010      	movs	r0, #16
 80062e4:	f000 fe2a 	bl	8006f3c <malloc>
 80062e8:	4602      	mov	r2, r0
 80062ea:	61e0      	str	r0, [r4, #28]
 80062ec:	b920      	cbnz	r0, 80062f8 <_dtoa_r+0x38>
 80062ee:	4bae      	ldr	r3, [pc, #696]	; (80065a8 <_dtoa_r+0x2e8>)
 80062f0:	21ef      	movs	r1, #239	; 0xef
 80062f2:	48ae      	ldr	r0, [pc, #696]	; (80065ac <_dtoa_r+0x2ec>)
 80062f4:	f001 fc90 	bl	8007c18 <__assert_func>
 80062f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062fc:	6005      	str	r5, [r0, #0]
 80062fe:	60c5      	str	r5, [r0, #12]
 8006300:	69e3      	ldr	r3, [r4, #28]
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	b151      	cbz	r1, 800631c <_dtoa_r+0x5c>
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	604a      	str	r2, [r1, #4]
 800630a:	2301      	movs	r3, #1
 800630c:	4093      	lsls	r3, r2
 800630e:	608b      	str	r3, [r1, #8]
 8006310:	4620      	mov	r0, r4
 8006312:	f000 ff07 	bl	8007124 <_Bfree>
 8006316:	69e3      	ldr	r3, [r4, #28]
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	1e3b      	subs	r3, r7, #0
 800631e:	bfbb      	ittet	lt
 8006320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006324:	9303      	strlt	r3, [sp, #12]
 8006326:	2300      	movge	r3, #0
 8006328:	2201      	movlt	r2, #1
 800632a:	bfac      	ite	ge
 800632c:	f8c8 3000 	strge.w	r3, [r8]
 8006330:	f8c8 2000 	strlt.w	r2, [r8]
 8006334:	4b9e      	ldr	r3, [pc, #632]	; (80065b0 <_dtoa_r+0x2f0>)
 8006336:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800633a:	ea33 0308 	bics.w	r3, r3, r8
 800633e:	d11b      	bne.n	8006378 <_dtoa_r+0xb8>
 8006340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006342:	f242 730f 	movw	r3, #9999	; 0x270f
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800634c:	4333      	orrs	r3, r6
 800634e:	f000 8593 	beq.w	8006e78 <_dtoa_r+0xbb8>
 8006352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006354:	b963      	cbnz	r3, 8006370 <_dtoa_r+0xb0>
 8006356:	4b97      	ldr	r3, [pc, #604]	; (80065b4 <_dtoa_r+0x2f4>)
 8006358:	e027      	b.n	80063aa <_dtoa_r+0xea>
 800635a:	4b97      	ldr	r3, [pc, #604]	; (80065b8 <_dtoa_r+0x2f8>)
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	9800      	ldr	r0, [sp, #0]
 8006366:	b013      	add	sp, #76	; 0x4c
 8006368:	ecbd 8b04 	vpop	{d8-d9}
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	4b90      	ldr	r3, [pc, #576]	; (80065b4 <_dtoa_r+0x2f4>)
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	3303      	adds	r3, #3
 8006376:	e7f3      	b.n	8006360 <_dtoa_r+0xa0>
 8006378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	ec51 0b17 	vmov	r0, r1, d7
 8006382:	eeb0 8a47 	vmov.f32	s16, s14
 8006386:	eef0 8a67 	vmov.f32	s17, s15
 800638a:	2300      	movs	r3, #0
 800638c:	f7fa fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006390:	4681      	mov	r9, r0
 8006392:	b160      	cbz	r0, 80063ae <_dtoa_r+0xee>
 8006394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006396:	2301      	movs	r3, #1
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8568 	beq.w	8006e72 <_dtoa_r+0xbb2>
 80063a2:	4b86      	ldr	r3, [pc, #536]	; (80065bc <_dtoa_r+0x2fc>)
 80063a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	e7da      	b.n	8006364 <_dtoa_r+0xa4>
 80063ae:	aa10      	add	r2, sp, #64	; 0x40
 80063b0:	a911      	add	r1, sp, #68	; 0x44
 80063b2:	4620      	mov	r0, r4
 80063b4:	eeb0 0a48 	vmov.f32	s0, s16
 80063b8:	eef0 0a68 	vmov.f32	s1, s17
 80063bc:	f001 f994 	bl	80076e8 <__d2b>
 80063c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80063c4:	4682      	mov	sl, r0
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	d07f      	beq.n	80064ca <_dtoa_r+0x20a>
 80063ca:	ee18 3a90 	vmov	r3, s17
 80063ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063d6:	ec51 0b18 	vmov	r0, r1, d8
 80063da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80063e6:	4619      	mov	r1, r3
 80063e8:	2200      	movs	r2, #0
 80063ea:	4b75      	ldr	r3, [pc, #468]	; (80065c0 <_dtoa_r+0x300>)
 80063ec:	f7f9 ff4c 	bl	8000288 <__aeabi_dsub>
 80063f0:	a367      	add	r3, pc, #412	; (adr r3, 8006590 <_dtoa_r+0x2d0>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f7fa f8ff 	bl	80005f8 <__aeabi_dmul>
 80063fa:	a367      	add	r3, pc, #412	; (adr r3, 8006598 <_dtoa_r+0x2d8>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f7f9 ff44 	bl	800028c <__adddf3>
 8006404:	4606      	mov	r6, r0
 8006406:	4628      	mov	r0, r5
 8006408:	460f      	mov	r7, r1
 800640a:	f7fa f88b 	bl	8000524 <__aeabi_i2d>
 800640e:	a364      	add	r3, pc, #400	; (adr r3, 80065a0 <_dtoa_r+0x2e0>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7fa f8f0 	bl	80005f8 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7f9 ff34 	bl	800028c <__adddf3>
 8006424:	4606      	mov	r6, r0
 8006426:	460f      	mov	r7, r1
 8006428:	f7fa fb96 	bl	8000b58 <__aeabi_d2iz>
 800642c:	2200      	movs	r2, #0
 800642e:	4683      	mov	fp, r0
 8006430:	2300      	movs	r3, #0
 8006432:	4630      	mov	r0, r6
 8006434:	4639      	mov	r1, r7
 8006436:	f7fa fb51 	bl	8000adc <__aeabi_dcmplt>
 800643a:	b148      	cbz	r0, 8006450 <_dtoa_r+0x190>
 800643c:	4658      	mov	r0, fp
 800643e:	f7fa f871 	bl	8000524 <__aeabi_i2d>
 8006442:	4632      	mov	r2, r6
 8006444:	463b      	mov	r3, r7
 8006446:	f7fa fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800644a:	b908      	cbnz	r0, 8006450 <_dtoa_r+0x190>
 800644c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006450:	f1bb 0f16 	cmp.w	fp, #22
 8006454:	d857      	bhi.n	8006506 <_dtoa_r+0x246>
 8006456:	4b5b      	ldr	r3, [pc, #364]	; (80065c4 <_dtoa_r+0x304>)
 8006458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	ec51 0b18 	vmov	r0, r1, d8
 8006464:	f7fa fb3a 	bl	8000adc <__aeabi_dcmplt>
 8006468:	2800      	cmp	r0, #0
 800646a:	d04e      	beq.n	800650a <_dtoa_r+0x24a>
 800646c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006470:	2300      	movs	r3, #0
 8006472:	930c      	str	r3, [sp, #48]	; 0x30
 8006474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006476:	1b5b      	subs	r3, r3, r5
 8006478:	1e5a      	subs	r2, r3, #1
 800647a:	bf45      	ittet	mi
 800647c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006480:	9305      	strmi	r3, [sp, #20]
 8006482:	2300      	movpl	r3, #0
 8006484:	2300      	movmi	r3, #0
 8006486:	9206      	str	r2, [sp, #24]
 8006488:	bf54      	ite	pl
 800648a:	9305      	strpl	r3, [sp, #20]
 800648c:	9306      	strmi	r3, [sp, #24]
 800648e:	f1bb 0f00 	cmp.w	fp, #0
 8006492:	db3c      	blt.n	800650e <_dtoa_r+0x24e>
 8006494:	9b06      	ldr	r3, [sp, #24]
 8006496:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800649a:	445b      	add	r3, fp
 800649c:	9306      	str	r3, [sp, #24]
 800649e:	2300      	movs	r3, #0
 80064a0:	9308      	str	r3, [sp, #32]
 80064a2:	9b07      	ldr	r3, [sp, #28]
 80064a4:	2b09      	cmp	r3, #9
 80064a6:	d868      	bhi.n	800657a <_dtoa_r+0x2ba>
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	bfc4      	itt	gt
 80064ac:	3b04      	subgt	r3, #4
 80064ae:	9307      	strgt	r3, [sp, #28]
 80064b0:	9b07      	ldr	r3, [sp, #28]
 80064b2:	f1a3 0302 	sub.w	r3, r3, #2
 80064b6:	bfcc      	ite	gt
 80064b8:	2500      	movgt	r5, #0
 80064ba:	2501      	movle	r5, #1
 80064bc:	2b03      	cmp	r3, #3
 80064be:	f200 8085 	bhi.w	80065cc <_dtoa_r+0x30c>
 80064c2:	e8df f003 	tbb	[pc, r3]
 80064c6:	3b2e      	.short	0x3b2e
 80064c8:	5839      	.short	0x5839
 80064ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80064ce:	441d      	add	r5, r3
 80064d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	bfc1      	itttt	gt
 80064d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80064e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80064e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064e8:	bfd6      	itet	le
 80064ea:	f1c3 0320 	rsble	r3, r3, #32
 80064ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80064f2:	fa06 f003 	lslle.w	r0, r6, r3
 80064f6:	f7fa f805 	bl	8000504 <__aeabi_ui2d>
 80064fa:	2201      	movs	r2, #1
 80064fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006500:	3d01      	subs	r5, #1
 8006502:	920e      	str	r2, [sp, #56]	; 0x38
 8006504:	e76f      	b.n	80063e6 <_dtoa_r+0x126>
 8006506:	2301      	movs	r3, #1
 8006508:	e7b3      	b.n	8006472 <_dtoa_r+0x1b2>
 800650a:	900c      	str	r0, [sp, #48]	; 0x30
 800650c:	e7b2      	b.n	8006474 <_dtoa_r+0x1b4>
 800650e:	9b05      	ldr	r3, [sp, #20]
 8006510:	eba3 030b 	sub.w	r3, r3, fp
 8006514:	9305      	str	r3, [sp, #20]
 8006516:	f1cb 0300 	rsb	r3, fp, #0
 800651a:	9308      	str	r3, [sp, #32]
 800651c:	2300      	movs	r3, #0
 800651e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006520:	e7bf      	b.n	80064a2 <_dtoa_r+0x1e2>
 8006522:	2300      	movs	r3, #0
 8006524:	9309      	str	r3, [sp, #36]	; 0x24
 8006526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006528:	2b00      	cmp	r3, #0
 800652a:	dc52      	bgt.n	80065d2 <_dtoa_r+0x312>
 800652c:	2301      	movs	r3, #1
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	9304      	str	r3, [sp, #16]
 8006532:	461a      	mov	r2, r3
 8006534:	920a      	str	r2, [sp, #40]	; 0x28
 8006536:	e00b      	b.n	8006550 <_dtoa_r+0x290>
 8006538:	2301      	movs	r3, #1
 800653a:	e7f3      	b.n	8006524 <_dtoa_r+0x264>
 800653c:	2300      	movs	r3, #0
 800653e:	9309      	str	r3, [sp, #36]	; 0x24
 8006540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006542:	445b      	add	r3, fp
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	3301      	adds	r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	bfb8      	it	lt
 800654e:	2301      	movlt	r3, #1
 8006550:	69e0      	ldr	r0, [r4, #28]
 8006552:	2100      	movs	r1, #0
 8006554:	2204      	movs	r2, #4
 8006556:	f102 0614 	add.w	r6, r2, #20
 800655a:	429e      	cmp	r6, r3
 800655c:	d93d      	bls.n	80065da <_dtoa_r+0x31a>
 800655e:	6041      	str	r1, [r0, #4]
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fd9f 	bl	80070a4 <_Balloc>
 8006566:	9000      	str	r0, [sp, #0]
 8006568:	2800      	cmp	r0, #0
 800656a:	d139      	bne.n	80065e0 <_dtoa_r+0x320>
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <_dtoa_r+0x308>)
 800656e:	4602      	mov	r2, r0
 8006570:	f240 11af 	movw	r1, #431	; 0x1af
 8006574:	e6bd      	b.n	80062f2 <_dtoa_r+0x32>
 8006576:	2301      	movs	r3, #1
 8006578:	e7e1      	b.n	800653e <_dtoa_r+0x27e>
 800657a:	2501      	movs	r5, #1
 800657c:	2300      	movs	r3, #0
 800657e:	9307      	str	r3, [sp, #28]
 8006580:	9509      	str	r5, [sp, #36]	; 0x24
 8006582:	f04f 33ff 	mov.w	r3, #4294967295
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	9304      	str	r3, [sp, #16]
 800658a:	2200      	movs	r2, #0
 800658c:	2312      	movs	r3, #18
 800658e:	e7d1      	b.n	8006534 <_dtoa_r+0x274>
 8006590:	636f4361 	.word	0x636f4361
 8006594:	3fd287a7 	.word	0x3fd287a7
 8006598:	8b60c8b3 	.word	0x8b60c8b3
 800659c:	3fc68a28 	.word	0x3fc68a28
 80065a0:	509f79fb 	.word	0x509f79fb
 80065a4:	3fd34413 	.word	0x3fd34413
 80065a8:	08008379 	.word	0x08008379
 80065ac:	08008390 	.word	0x08008390
 80065b0:	7ff00000 	.word	0x7ff00000
 80065b4:	08008375 	.word	0x08008375
 80065b8:	0800836c 	.word	0x0800836c
 80065bc:	08008349 	.word	0x08008349
 80065c0:	3ff80000 	.word	0x3ff80000
 80065c4:	08008480 	.word	0x08008480
 80065c8:	080083e8 	.word	0x080083e8
 80065cc:	2301      	movs	r3, #1
 80065ce:	9309      	str	r3, [sp, #36]	; 0x24
 80065d0:	e7d7      	b.n	8006582 <_dtoa_r+0x2c2>
 80065d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	e7ba      	b.n	8006550 <_dtoa_r+0x290>
 80065da:	3101      	adds	r1, #1
 80065dc:	0052      	lsls	r2, r2, #1
 80065de:	e7ba      	b.n	8006556 <_dtoa_r+0x296>
 80065e0:	69e3      	ldr	r3, [r4, #28]
 80065e2:	9a00      	ldr	r2, [sp, #0]
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	2b0e      	cmp	r3, #14
 80065ea:	f200 80a8 	bhi.w	800673e <_dtoa_r+0x47e>
 80065ee:	2d00      	cmp	r5, #0
 80065f0:	f000 80a5 	beq.w	800673e <_dtoa_r+0x47e>
 80065f4:	f1bb 0f00 	cmp.w	fp, #0
 80065f8:	dd38      	ble.n	800666c <_dtoa_r+0x3ac>
 80065fa:	4bc0      	ldr	r3, [pc, #768]	; (80068fc <_dtoa_r+0x63c>)
 80065fc:	f00b 020f 	and.w	r2, fp, #15
 8006600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006604:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006608:	e9d3 6700 	ldrd	r6, r7, [r3]
 800660c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006610:	d019      	beq.n	8006646 <_dtoa_r+0x386>
 8006612:	4bbb      	ldr	r3, [pc, #748]	; (8006900 <_dtoa_r+0x640>)
 8006614:	ec51 0b18 	vmov	r0, r1, d8
 8006618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800661c:	f7fa f916 	bl	800084c <__aeabi_ddiv>
 8006620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006624:	f008 080f 	and.w	r8, r8, #15
 8006628:	2503      	movs	r5, #3
 800662a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006900 <_dtoa_r+0x640>
 800662e:	f1b8 0f00 	cmp.w	r8, #0
 8006632:	d10a      	bne.n	800664a <_dtoa_r+0x38a>
 8006634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006638:	4632      	mov	r2, r6
 800663a:	463b      	mov	r3, r7
 800663c:	f7fa f906 	bl	800084c <__aeabi_ddiv>
 8006640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006644:	e02b      	b.n	800669e <_dtoa_r+0x3de>
 8006646:	2502      	movs	r5, #2
 8006648:	e7ef      	b.n	800662a <_dtoa_r+0x36a>
 800664a:	f018 0f01 	tst.w	r8, #1
 800664e:	d008      	beq.n	8006662 <_dtoa_r+0x3a2>
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006658:	f7f9 ffce 	bl	80005f8 <__aeabi_dmul>
 800665c:	3501      	adds	r5, #1
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006666:	f109 0908 	add.w	r9, r9, #8
 800666a:	e7e0      	b.n	800662e <_dtoa_r+0x36e>
 800666c:	f000 809f 	beq.w	80067ae <_dtoa_r+0x4ee>
 8006670:	f1cb 0600 	rsb	r6, fp, #0
 8006674:	4ba1      	ldr	r3, [pc, #644]	; (80068fc <_dtoa_r+0x63c>)
 8006676:	4fa2      	ldr	r7, [pc, #648]	; (8006900 <_dtoa_r+0x640>)
 8006678:	f006 020f 	and.w	r2, r6, #15
 800667c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	ec51 0b18 	vmov	r0, r1, d8
 8006688:	f7f9 ffb6 	bl	80005f8 <__aeabi_dmul>
 800668c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006690:	1136      	asrs	r6, r6, #4
 8006692:	2300      	movs	r3, #0
 8006694:	2502      	movs	r5, #2
 8006696:	2e00      	cmp	r6, #0
 8006698:	d17e      	bne.n	8006798 <_dtoa_r+0x4d8>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1d0      	bne.n	8006640 <_dtoa_r+0x380>
 800669e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8084 	beq.w	80067b2 <_dtoa_r+0x4f2>
 80066aa:	4b96      	ldr	r3, [pc, #600]	; (8006904 <_dtoa_r+0x644>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	4640      	mov	r0, r8
 80066b0:	4649      	mov	r1, r9
 80066b2:	f7fa fa13 	bl	8000adc <__aeabi_dcmplt>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d07b      	beq.n	80067b2 <_dtoa_r+0x4f2>
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d078      	beq.n	80067b2 <_dtoa_r+0x4f2>
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dd39      	ble.n	800673a <_dtoa_r+0x47a>
 80066c6:	4b90      	ldr	r3, [pc, #576]	; (8006908 <_dtoa_r+0x648>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7f9 ff93 	bl	80005f8 <__aeabi_dmul>
 80066d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d6:	9e01      	ldr	r6, [sp, #4]
 80066d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80066dc:	3501      	adds	r5, #1
 80066de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7f9 ff1e 	bl	8000524 <__aeabi_i2d>
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	f7f9 ff84 	bl	80005f8 <__aeabi_dmul>
 80066f0:	4b86      	ldr	r3, [pc, #536]	; (800690c <_dtoa_r+0x64c>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	f7f9 fdca 	bl	800028c <__adddf3>
 80066f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006700:	9303      	str	r3, [sp, #12]
 8006702:	2e00      	cmp	r6, #0
 8006704:	d158      	bne.n	80067b8 <_dtoa_r+0x4f8>
 8006706:	4b82      	ldr	r3, [pc, #520]	; (8006910 <_dtoa_r+0x650>)
 8006708:	2200      	movs	r2, #0
 800670a:	4640      	mov	r0, r8
 800670c:	4649      	mov	r1, r9
 800670e:	f7f9 fdbb 	bl	8000288 <__aeabi_dsub>
 8006712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006716:	4680      	mov	r8, r0
 8006718:	4689      	mov	r9, r1
 800671a:	f7fa f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 800671e:	2800      	cmp	r0, #0
 8006720:	f040 8296 	bne.w	8006c50 <_dtoa_r+0x990>
 8006724:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006728:	4640      	mov	r0, r8
 800672a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800672e:	4649      	mov	r1, r9
 8006730:	f7fa f9d4 	bl	8000adc <__aeabi_dcmplt>
 8006734:	2800      	cmp	r0, #0
 8006736:	f040 8289 	bne.w	8006c4c <_dtoa_r+0x98c>
 800673a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800673e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006740:	2b00      	cmp	r3, #0
 8006742:	f2c0 814e 	blt.w	80069e2 <_dtoa_r+0x722>
 8006746:	f1bb 0f0e 	cmp.w	fp, #14
 800674a:	f300 814a 	bgt.w	80069e2 <_dtoa_r+0x722>
 800674e:	4b6b      	ldr	r3, [pc, #428]	; (80068fc <_dtoa_r+0x63c>)
 8006750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	f280 80dc 	bge.w	8006918 <_dtoa_r+0x658>
 8006760:	9b04      	ldr	r3, [sp, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f300 80d8 	bgt.w	8006918 <_dtoa_r+0x658>
 8006768:	f040 826f 	bne.w	8006c4a <_dtoa_r+0x98a>
 800676c:	4b68      	ldr	r3, [pc, #416]	; (8006910 <_dtoa_r+0x650>)
 800676e:	2200      	movs	r2, #0
 8006770:	4640      	mov	r0, r8
 8006772:	4649      	mov	r1, r9
 8006774:	f7f9 ff40 	bl	80005f8 <__aeabi_dmul>
 8006778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800677c:	f7fa f9c2 	bl	8000b04 <__aeabi_dcmpge>
 8006780:	9e04      	ldr	r6, [sp, #16]
 8006782:	4637      	mov	r7, r6
 8006784:	2800      	cmp	r0, #0
 8006786:	f040 8245 	bne.w	8006c14 <_dtoa_r+0x954>
 800678a:	9d00      	ldr	r5, [sp, #0]
 800678c:	2331      	movs	r3, #49	; 0x31
 800678e:	f805 3b01 	strb.w	r3, [r5], #1
 8006792:	f10b 0b01 	add.w	fp, fp, #1
 8006796:	e241      	b.n	8006c1c <_dtoa_r+0x95c>
 8006798:	07f2      	lsls	r2, r6, #31
 800679a:	d505      	bpl.n	80067a8 <_dtoa_r+0x4e8>
 800679c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a0:	f7f9 ff2a 	bl	80005f8 <__aeabi_dmul>
 80067a4:	3501      	adds	r5, #1
 80067a6:	2301      	movs	r3, #1
 80067a8:	1076      	asrs	r6, r6, #1
 80067aa:	3708      	adds	r7, #8
 80067ac:	e773      	b.n	8006696 <_dtoa_r+0x3d6>
 80067ae:	2502      	movs	r5, #2
 80067b0:	e775      	b.n	800669e <_dtoa_r+0x3de>
 80067b2:	9e04      	ldr	r6, [sp, #16]
 80067b4:	465f      	mov	r7, fp
 80067b6:	e792      	b.n	80066de <_dtoa_r+0x41e>
 80067b8:	9900      	ldr	r1, [sp, #0]
 80067ba:	4b50      	ldr	r3, [pc, #320]	; (80068fc <_dtoa_r+0x63c>)
 80067bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067c0:	4431      	add	r1, r6
 80067c2:	9102      	str	r1, [sp, #8]
 80067c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c6:	eeb0 9a47 	vmov.f32	s18, s14
 80067ca:	eef0 9a67 	vmov.f32	s19, s15
 80067ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067d6:	2900      	cmp	r1, #0
 80067d8:	d044      	beq.n	8006864 <_dtoa_r+0x5a4>
 80067da:	494e      	ldr	r1, [pc, #312]	; (8006914 <_dtoa_r+0x654>)
 80067dc:	2000      	movs	r0, #0
 80067de:	f7fa f835 	bl	800084c <__aeabi_ddiv>
 80067e2:	ec53 2b19 	vmov	r2, r3, d9
 80067e6:	f7f9 fd4f 	bl	8000288 <__aeabi_dsub>
 80067ea:	9d00      	ldr	r5, [sp, #0]
 80067ec:	ec41 0b19 	vmov	d9, r0, r1
 80067f0:	4649      	mov	r1, r9
 80067f2:	4640      	mov	r0, r8
 80067f4:	f7fa f9b0 	bl	8000b58 <__aeabi_d2iz>
 80067f8:	4606      	mov	r6, r0
 80067fa:	f7f9 fe93 	bl	8000524 <__aeabi_i2d>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4640      	mov	r0, r8
 8006804:	4649      	mov	r1, r9
 8006806:	f7f9 fd3f 	bl	8000288 <__aeabi_dsub>
 800680a:	3630      	adds	r6, #48	; 0x30
 800680c:	f805 6b01 	strb.w	r6, [r5], #1
 8006810:	ec53 2b19 	vmov	r2, r3, d9
 8006814:	4680      	mov	r8, r0
 8006816:	4689      	mov	r9, r1
 8006818:	f7fa f960 	bl	8000adc <__aeabi_dcmplt>
 800681c:	2800      	cmp	r0, #0
 800681e:	d164      	bne.n	80068ea <_dtoa_r+0x62a>
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	4937      	ldr	r1, [pc, #220]	; (8006904 <_dtoa_r+0x644>)
 8006826:	2000      	movs	r0, #0
 8006828:	f7f9 fd2e 	bl	8000288 <__aeabi_dsub>
 800682c:	ec53 2b19 	vmov	r2, r3, d9
 8006830:	f7fa f954 	bl	8000adc <__aeabi_dcmplt>
 8006834:	2800      	cmp	r0, #0
 8006836:	f040 80b6 	bne.w	80069a6 <_dtoa_r+0x6e6>
 800683a:	9b02      	ldr	r3, [sp, #8]
 800683c:	429d      	cmp	r5, r3
 800683e:	f43f af7c 	beq.w	800673a <_dtoa_r+0x47a>
 8006842:	4b31      	ldr	r3, [pc, #196]	; (8006908 <_dtoa_r+0x648>)
 8006844:	ec51 0b19 	vmov	r0, r1, d9
 8006848:	2200      	movs	r2, #0
 800684a:	f7f9 fed5 	bl	80005f8 <__aeabi_dmul>
 800684e:	4b2e      	ldr	r3, [pc, #184]	; (8006908 <_dtoa_r+0x648>)
 8006850:	ec41 0b19 	vmov	d9, r0, r1
 8006854:	2200      	movs	r2, #0
 8006856:	4640      	mov	r0, r8
 8006858:	4649      	mov	r1, r9
 800685a:	f7f9 fecd 	bl	80005f8 <__aeabi_dmul>
 800685e:	4680      	mov	r8, r0
 8006860:	4689      	mov	r9, r1
 8006862:	e7c5      	b.n	80067f0 <_dtoa_r+0x530>
 8006864:	ec51 0b17 	vmov	r0, r1, d7
 8006868:	f7f9 fec6 	bl	80005f8 <__aeabi_dmul>
 800686c:	9b02      	ldr	r3, [sp, #8]
 800686e:	9d00      	ldr	r5, [sp, #0]
 8006870:	930f      	str	r3, [sp, #60]	; 0x3c
 8006872:	ec41 0b19 	vmov	d9, r0, r1
 8006876:	4649      	mov	r1, r9
 8006878:	4640      	mov	r0, r8
 800687a:	f7fa f96d 	bl	8000b58 <__aeabi_d2iz>
 800687e:	4606      	mov	r6, r0
 8006880:	f7f9 fe50 	bl	8000524 <__aeabi_i2d>
 8006884:	3630      	adds	r6, #48	; 0x30
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4640      	mov	r0, r8
 800688c:	4649      	mov	r1, r9
 800688e:	f7f9 fcfb 	bl	8000288 <__aeabi_dsub>
 8006892:	f805 6b01 	strb.w	r6, [r5], #1
 8006896:	9b02      	ldr	r3, [sp, #8]
 8006898:	429d      	cmp	r5, r3
 800689a:	4680      	mov	r8, r0
 800689c:	4689      	mov	r9, r1
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	d124      	bne.n	80068ee <_dtoa_r+0x62e>
 80068a4:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <_dtoa_r+0x654>)
 80068a6:	ec51 0b19 	vmov	r0, r1, d9
 80068aa:	f7f9 fcef 	bl	800028c <__adddf3>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4640      	mov	r0, r8
 80068b4:	4649      	mov	r1, r9
 80068b6:	f7fa f92f 	bl	8000b18 <__aeabi_dcmpgt>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d173      	bne.n	80069a6 <_dtoa_r+0x6e6>
 80068be:	ec53 2b19 	vmov	r2, r3, d9
 80068c2:	4914      	ldr	r1, [pc, #80]	; (8006914 <_dtoa_r+0x654>)
 80068c4:	2000      	movs	r0, #0
 80068c6:	f7f9 fcdf 	bl	8000288 <__aeabi_dsub>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4640      	mov	r0, r8
 80068d0:	4649      	mov	r1, r9
 80068d2:	f7fa f903 	bl	8000adc <__aeabi_dcmplt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f43f af2f 	beq.w	800673a <_dtoa_r+0x47a>
 80068dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80068de:	1e6b      	subs	r3, r5, #1
 80068e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068e6:	2b30      	cmp	r3, #48	; 0x30
 80068e8:	d0f8      	beq.n	80068dc <_dtoa_r+0x61c>
 80068ea:	46bb      	mov	fp, r7
 80068ec:	e04a      	b.n	8006984 <_dtoa_r+0x6c4>
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <_dtoa_r+0x648>)
 80068f0:	f7f9 fe82 	bl	80005f8 <__aeabi_dmul>
 80068f4:	4680      	mov	r8, r0
 80068f6:	4689      	mov	r9, r1
 80068f8:	e7bd      	b.n	8006876 <_dtoa_r+0x5b6>
 80068fa:	bf00      	nop
 80068fc:	08008480 	.word	0x08008480
 8006900:	08008458 	.word	0x08008458
 8006904:	3ff00000 	.word	0x3ff00000
 8006908:	40240000 	.word	0x40240000
 800690c:	401c0000 	.word	0x401c0000
 8006910:	40140000 	.word	0x40140000
 8006914:	3fe00000 	.word	0x3fe00000
 8006918:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800691c:	9d00      	ldr	r5, [sp, #0]
 800691e:	4642      	mov	r2, r8
 8006920:	464b      	mov	r3, r9
 8006922:	4630      	mov	r0, r6
 8006924:	4639      	mov	r1, r7
 8006926:	f7f9 ff91 	bl	800084c <__aeabi_ddiv>
 800692a:	f7fa f915 	bl	8000b58 <__aeabi_d2iz>
 800692e:	9001      	str	r0, [sp, #4]
 8006930:	f7f9 fdf8 	bl	8000524 <__aeabi_i2d>
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4630      	mov	r0, r6
 8006942:	4639      	mov	r1, r7
 8006944:	f7f9 fca0 	bl	8000288 <__aeabi_dsub>
 8006948:	9e01      	ldr	r6, [sp, #4]
 800694a:	9f04      	ldr	r7, [sp, #16]
 800694c:	3630      	adds	r6, #48	; 0x30
 800694e:	f805 6b01 	strb.w	r6, [r5], #1
 8006952:	9e00      	ldr	r6, [sp, #0]
 8006954:	1bae      	subs	r6, r5, r6
 8006956:	42b7      	cmp	r7, r6
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	d134      	bne.n	80069c8 <_dtoa_r+0x708>
 800695e:	f7f9 fc95 	bl	800028c <__adddf3>
 8006962:	4642      	mov	r2, r8
 8006964:	464b      	mov	r3, r9
 8006966:	4606      	mov	r6, r0
 8006968:	460f      	mov	r7, r1
 800696a:	f7fa f8d5 	bl	8000b18 <__aeabi_dcmpgt>
 800696e:	b9c8      	cbnz	r0, 80069a4 <_dtoa_r+0x6e4>
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	4630      	mov	r0, r6
 8006976:	4639      	mov	r1, r7
 8006978:	f7fa f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800697c:	b110      	cbz	r0, 8006984 <_dtoa_r+0x6c4>
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	07db      	lsls	r3, r3, #31
 8006982:	d40f      	bmi.n	80069a4 <_dtoa_r+0x6e4>
 8006984:	4651      	mov	r1, sl
 8006986:	4620      	mov	r0, r4
 8006988:	f000 fbcc 	bl	8007124 <_Bfree>
 800698c:	2300      	movs	r3, #0
 800698e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006990:	702b      	strb	r3, [r5, #0]
 8006992:	f10b 0301 	add.w	r3, fp, #1
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800699a:	2b00      	cmp	r3, #0
 800699c:	f43f ace2 	beq.w	8006364 <_dtoa_r+0xa4>
 80069a0:	601d      	str	r5, [r3, #0]
 80069a2:	e4df      	b.n	8006364 <_dtoa_r+0xa4>
 80069a4:	465f      	mov	r7, fp
 80069a6:	462b      	mov	r3, r5
 80069a8:	461d      	mov	r5, r3
 80069aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ae:	2a39      	cmp	r2, #57	; 0x39
 80069b0:	d106      	bne.n	80069c0 <_dtoa_r+0x700>
 80069b2:	9a00      	ldr	r2, [sp, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d1f7      	bne.n	80069a8 <_dtoa_r+0x6e8>
 80069b8:	9900      	ldr	r1, [sp, #0]
 80069ba:	2230      	movs	r2, #48	; 0x30
 80069bc:	3701      	adds	r7, #1
 80069be:	700a      	strb	r2, [r1, #0]
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	3201      	adds	r2, #1
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	e790      	b.n	80068ea <_dtoa_r+0x62a>
 80069c8:	4ba3      	ldr	r3, [pc, #652]	; (8006c58 <_dtoa_r+0x998>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	f7f9 fe14 	bl	80005f8 <__aeabi_dmul>
 80069d0:	2200      	movs	r2, #0
 80069d2:	2300      	movs	r3, #0
 80069d4:	4606      	mov	r6, r0
 80069d6:	460f      	mov	r7, r1
 80069d8:	f7fa f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d09e      	beq.n	800691e <_dtoa_r+0x65e>
 80069e0:	e7d0      	b.n	8006984 <_dtoa_r+0x6c4>
 80069e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	f000 80ca 	beq.w	8006b7e <_dtoa_r+0x8be>
 80069ea:	9a07      	ldr	r2, [sp, #28]
 80069ec:	2a01      	cmp	r2, #1
 80069ee:	f300 80ad 	bgt.w	8006b4c <_dtoa_r+0x88c>
 80069f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069f4:	2a00      	cmp	r2, #0
 80069f6:	f000 80a5 	beq.w	8006b44 <_dtoa_r+0x884>
 80069fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069fe:	9e08      	ldr	r6, [sp, #32]
 8006a00:	9d05      	ldr	r5, [sp, #20]
 8006a02:	9a05      	ldr	r2, [sp, #20]
 8006a04:	441a      	add	r2, r3
 8006a06:	9205      	str	r2, [sp, #20]
 8006a08:	9a06      	ldr	r2, [sp, #24]
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	441a      	add	r2, r3
 8006a0e:	4620      	mov	r0, r4
 8006a10:	9206      	str	r2, [sp, #24]
 8006a12:	f000 fc3d 	bl	8007290 <__i2b>
 8006a16:	4607      	mov	r7, r0
 8006a18:	b165      	cbz	r5, 8006a34 <_dtoa_r+0x774>
 8006a1a:	9b06      	ldr	r3, [sp, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dd09      	ble.n	8006a34 <_dtoa_r+0x774>
 8006a20:	42ab      	cmp	r3, r5
 8006a22:	9a05      	ldr	r2, [sp, #20]
 8006a24:	bfa8      	it	ge
 8006a26:	462b      	movge	r3, r5
 8006a28:	1ad2      	subs	r2, r2, r3
 8006a2a:	9205      	str	r2, [sp, #20]
 8006a2c:	9a06      	ldr	r2, [sp, #24]
 8006a2e:	1aed      	subs	r5, r5, r3
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	9306      	str	r3, [sp, #24]
 8006a34:	9b08      	ldr	r3, [sp, #32]
 8006a36:	b1f3      	cbz	r3, 8006a76 <_dtoa_r+0x7b6>
 8006a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80a3 	beq.w	8006b86 <_dtoa_r+0x8c6>
 8006a40:	2e00      	cmp	r6, #0
 8006a42:	dd10      	ble.n	8006a66 <_dtoa_r+0x7a6>
 8006a44:	4639      	mov	r1, r7
 8006a46:	4632      	mov	r2, r6
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 fce1 	bl	8007410 <__pow5mult>
 8006a4e:	4652      	mov	r2, sl
 8006a50:	4601      	mov	r1, r0
 8006a52:	4607      	mov	r7, r0
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fc31 	bl	80072bc <__multiply>
 8006a5a:	4651      	mov	r1, sl
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 fb60 	bl	8007124 <_Bfree>
 8006a64:	46c2      	mov	sl, r8
 8006a66:	9b08      	ldr	r3, [sp, #32]
 8006a68:	1b9a      	subs	r2, r3, r6
 8006a6a:	d004      	beq.n	8006a76 <_dtoa_r+0x7b6>
 8006a6c:	4651      	mov	r1, sl
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 fcce 	bl	8007410 <__pow5mult>
 8006a74:	4682      	mov	sl, r0
 8006a76:	2101      	movs	r1, #1
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 fc09 	bl	8007290 <__i2b>
 8006a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	4606      	mov	r6, r0
 8006a84:	f340 8081 	ble.w	8006b8a <_dtoa_r+0x8ca>
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fcbf 	bl	8007410 <__pow5mult>
 8006a92:	9b07      	ldr	r3, [sp, #28]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	4606      	mov	r6, r0
 8006a98:	dd7a      	ble.n	8006b90 <_dtoa_r+0x8d0>
 8006a9a:	f04f 0800 	mov.w	r8, #0
 8006a9e:	6933      	ldr	r3, [r6, #16]
 8006aa0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006aa4:	6918      	ldr	r0, [r3, #16]
 8006aa6:	f000 fba5 	bl	80071f4 <__hi0bits>
 8006aaa:	f1c0 0020 	rsb	r0, r0, #32
 8006aae:	9b06      	ldr	r3, [sp, #24]
 8006ab0:	4418      	add	r0, r3
 8006ab2:	f010 001f 	ands.w	r0, r0, #31
 8006ab6:	f000 8094 	beq.w	8006be2 <_dtoa_r+0x922>
 8006aba:	f1c0 0320 	rsb	r3, r0, #32
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	f340 8085 	ble.w	8006bce <_dtoa_r+0x90e>
 8006ac4:	9b05      	ldr	r3, [sp, #20]
 8006ac6:	f1c0 001c 	rsb	r0, r0, #28
 8006aca:	4403      	add	r3, r0
 8006acc:	9305      	str	r3, [sp, #20]
 8006ace:	9b06      	ldr	r3, [sp, #24]
 8006ad0:	4403      	add	r3, r0
 8006ad2:	4405      	add	r5, r0
 8006ad4:	9306      	str	r3, [sp, #24]
 8006ad6:	9b05      	ldr	r3, [sp, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dd05      	ble.n	8006ae8 <_dtoa_r+0x828>
 8006adc:	4651      	mov	r1, sl
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fcef 	bl	80074c4 <__lshift>
 8006ae6:	4682      	mov	sl, r0
 8006ae8:	9b06      	ldr	r3, [sp, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	dd05      	ble.n	8006afa <_dtoa_r+0x83a>
 8006aee:	4631      	mov	r1, r6
 8006af0:	461a      	mov	r2, r3
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fce6 	bl	80074c4 <__lshift>
 8006af8:	4606      	mov	r6, r0
 8006afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d072      	beq.n	8006be6 <_dtoa_r+0x926>
 8006b00:	4631      	mov	r1, r6
 8006b02:	4650      	mov	r0, sl
 8006b04:	f000 fd4a 	bl	800759c <__mcmp>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	da6c      	bge.n	8006be6 <_dtoa_r+0x926>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4651      	mov	r1, sl
 8006b10:	220a      	movs	r2, #10
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 fb28 	bl	8007168 <__multadd>
 8006b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b1e:	4682      	mov	sl, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 81b0 	beq.w	8006e86 <_dtoa_r+0xbc6>
 8006b26:	2300      	movs	r3, #0
 8006b28:	4639      	mov	r1, r7
 8006b2a:	220a      	movs	r2, #10
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f000 fb1b 	bl	8007168 <__multadd>
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	4607      	mov	r7, r0
 8006b38:	f300 8096 	bgt.w	8006c68 <_dtoa_r+0x9a8>
 8006b3c:	9b07      	ldr	r3, [sp, #28]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	dc59      	bgt.n	8006bf6 <_dtoa_r+0x936>
 8006b42:	e091      	b.n	8006c68 <_dtoa_r+0x9a8>
 8006b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b4a:	e758      	b.n	80069fe <_dtoa_r+0x73e>
 8006b4c:	9b04      	ldr	r3, [sp, #16]
 8006b4e:	1e5e      	subs	r6, r3, #1
 8006b50:	9b08      	ldr	r3, [sp, #32]
 8006b52:	42b3      	cmp	r3, r6
 8006b54:	bfbf      	itttt	lt
 8006b56:	9b08      	ldrlt	r3, [sp, #32]
 8006b58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006b5a:	9608      	strlt	r6, [sp, #32]
 8006b5c:	1af3      	sublt	r3, r6, r3
 8006b5e:	bfb4      	ite	lt
 8006b60:	18d2      	addlt	r2, r2, r3
 8006b62:	1b9e      	subge	r6, r3, r6
 8006b64:	9b04      	ldr	r3, [sp, #16]
 8006b66:	bfbc      	itt	lt
 8006b68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006b6a:	2600      	movlt	r6, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	bfb7      	itett	lt
 8006b70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006b74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006b78:	1a9d      	sublt	r5, r3, r2
 8006b7a:	2300      	movlt	r3, #0
 8006b7c:	e741      	b.n	8006a02 <_dtoa_r+0x742>
 8006b7e:	9e08      	ldr	r6, [sp, #32]
 8006b80:	9d05      	ldr	r5, [sp, #20]
 8006b82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b84:	e748      	b.n	8006a18 <_dtoa_r+0x758>
 8006b86:	9a08      	ldr	r2, [sp, #32]
 8006b88:	e770      	b.n	8006a6c <_dtoa_r+0x7ac>
 8006b8a:	9b07      	ldr	r3, [sp, #28]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	dc19      	bgt.n	8006bc4 <_dtoa_r+0x904>
 8006b90:	9b02      	ldr	r3, [sp, #8]
 8006b92:	b9bb      	cbnz	r3, 8006bc4 <_dtoa_r+0x904>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b9a:	b99b      	cbnz	r3, 8006bc4 <_dtoa_r+0x904>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ba2:	0d1b      	lsrs	r3, r3, #20
 8006ba4:	051b      	lsls	r3, r3, #20
 8006ba6:	b183      	cbz	r3, 8006bca <_dtoa_r+0x90a>
 8006ba8:	9b05      	ldr	r3, [sp, #20]
 8006baa:	3301      	adds	r3, #1
 8006bac:	9305      	str	r3, [sp, #20]
 8006bae:	9b06      	ldr	r3, [sp, #24]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	9306      	str	r3, [sp, #24]
 8006bb4:	f04f 0801 	mov.w	r8, #1
 8006bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f47f af6f 	bne.w	8006a9e <_dtoa_r+0x7de>
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	e774      	b.n	8006aae <_dtoa_r+0x7ee>
 8006bc4:	f04f 0800 	mov.w	r8, #0
 8006bc8:	e7f6      	b.n	8006bb8 <_dtoa_r+0x8f8>
 8006bca:	4698      	mov	r8, r3
 8006bcc:	e7f4      	b.n	8006bb8 <_dtoa_r+0x8f8>
 8006bce:	d082      	beq.n	8006ad6 <_dtoa_r+0x816>
 8006bd0:	9a05      	ldr	r2, [sp, #20]
 8006bd2:	331c      	adds	r3, #28
 8006bd4:	441a      	add	r2, r3
 8006bd6:	9205      	str	r2, [sp, #20]
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	441a      	add	r2, r3
 8006bdc:	441d      	add	r5, r3
 8006bde:	9206      	str	r2, [sp, #24]
 8006be0:	e779      	b.n	8006ad6 <_dtoa_r+0x816>
 8006be2:	4603      	mov	r3, r0
 8006be4:	e7f4      	b.n	8006bd0 <_dtoa_r+0x910>
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dc37      	bgt.n	8006c5c <_dtoa_r+0x99c>
 8006bec:	9b07      	ldr	r3, [sp, #28]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	dd34      	ble.n	8006c5c <_dtoa_r+0x99c>
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	b963      	cbnz	r3, 8006c14 <_dtoa_r+0x954>
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	2205      	movs	r2, #5
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 fab2 	bl	8007168 <__multadd>
 8006c04:	4601      	mov	r1, r0
 8006c06:	4606      	mov	r6, r0
 8006c08:	4650      	mov	r0, sl
 8006c0a:	f000 fcc7 	bl	800759c <__mcmp>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f73f adbb 	bgt.w	800678a <_dtoa_r+0x4ca>
 8006c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c16:	9d00      	ldr	r5, [sp, #0]
 8006c18:	ea6f 0b03 	mvn.w	fp, r3
 8006c1c:	f04f 0800 	mov.w	r8, #0
 8006c20:	4631      	mov	r1, r6
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 fa7e 	bl	8007124 <_Bfree>
 8006c28:	2f00      	cmp	r7, #0
 8006c2a:	f43f aeab 	beq.w	8006984 <_dtoa_r+0x6c4>
 8006c2e:	f1b8 0f00 	cmp.w	r8, #0
 8006c32:	d005      	beq.n	8006c40 <_dtoa_r+0x980>
 8006c34:	45b8      	cmp	r8, r7
 8006c36:	d003      	beq.n	8006c40 <_dtoa_r+0x980>
 8006c38:	4641      	mov	r1, r8
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fa72 	bl	8007124 <_Bfree>
 8006c40:	4639      	mov	r1, r7
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 fa6e 	bl	8007124 <_Bfree>
 8006c48:	e69c      	b.n	8006984 <_dtoa_r+0x6c4>
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	4637      	mov	r7, r6
 8006c4e:	e7e1      	b.n	8006c14 <_dtoa_r+0x954>
 8006c50:	46bb      	mov	fp, r7
 8006c52:	4637      	mov	r7, r6
 8006c54:	e599      	b.n	800678a <_dtoa_r+0x4ca>
 8006c56:	bf00      	nop
 8006c58:	40240000 	.word	0x40240000
 8006c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 80c8 	beq.w	8006df4 <_dtoa_r+0xb34>
 8006c64:	9b04      	ldr	r3, [sp, #16]
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	2d00      	cmp	r5, #0
 8006c6a:	dd05      	ble.n	8006c78 <_dtoa_r+0x9b8>
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	462a      	mov	r2, r5
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fc27 	bl	80074c4 <__lshift>
 8006c76:	4607      	mov	r7, r0
 8006c78:	f1b8 0f00 	cmp.w	r8, #0
 8006c7c:	d05b      	beq.n	8006d36 <_dtoa_r+0xa76>
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fa0f 	bl	80070a4 <_Balloc>
 8006c86:	4605      	mov	r5, r0
 8006c88:	b928      	cbnz	r0, 8006c96 <_dtoa_r+0x9d6>
 8006c8a:	4b83      	ldr	r3, [pc, #524]	; (8006e98 <_dtoa_r+0xbd8>)
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c92:	f7ff bb2e 	b.w	80062f2 <_dtoa_r+0x32>
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	3202      	adds	r2, #2
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	f107 010c 	add.w	r1, r7, #12
 8006ca0:	300c      	adds	r0, #12
 8006ca2:	f000 ffab 	bl	8007bfc <memcpy>
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fc0a 	bl	80074c4 <__lshift>
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cba:	4413      	add	r3, r2
 8006cbc:	9308      	str	r3, [sp, #32]
 8006cbe:	9b02      	ldr	r3, [sp, #8]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	46b8      	mov	r8, r7
 8006cc6:	9306      	str	r3, [sp, #24]
 8006cc8:	4607      	mov	r7, r0
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	4631      	mov	r1, r6
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	4650      	mov	r0, sl
 8006cd2:	9301      	str	r3, [sp, #4]
 8006cd4:	f7ff fa69 	bl	80061aa <quorem>
 8006cd8:	4641      	mov	r1, r8
 8006cda:	9002      	str	r0, [sp, #8]
 8006cdc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	f000 fc5b 	bl	800759c <__mcmp>
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	9005      	str	r0, [sp, #20]
 8006cea:	4631      	mov	r1, r6
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 fc71 	bl	80075d4 <__mdiff>
 8006cf2:	68c2      	ldr	r2, [r0, #12]
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	bb02      	cbnz	r2, 8006d3a <_dtoa_r+0xa7a>
 8006cf8:	4601      	mov	r1, r0
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f000 fc4e 	bl	800759c <__mcmp>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4629      	mov	r1, r5
 8006d04:	4620      	mov	r0, r4
 8006d06:	9209      	str	r2, [sp, #36]	; 0x24
 8006d08:	f000 fa0c 	bl	8007124 <_Bfree>
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d10:	9d04      	ldr	r5, [sp, #16]
 8006d12:	ea43 0102 	orr.w	r1, r3, r2
 8006d16:	9b06      	ldr	r3, [sp, #24]
 8006d18:	4319      	orrs	r1, r3
 8006d1a:	d110      	bne.n	8006d3e <_dtoa_r+0xa7e>
 8006d1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d20:	d029      	beq.n	8006d76 <_dtoa_r+0xab6>
 8006d22:	9b05      	ldr	r3, [sp, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dd02      	ble.n	8006d2e <_dtoa_r+0xa6e>
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	f883 9000 	strb.w	r9, [r3]
 8006d34:	e774      	b.n	8006c20 <_dtoa_r+0x960>
 8006d36:	4638      	mov	r0, r7
 8006d38:	e7ba      	b.n	8006cb0 <_dtoa_r+0x9f0>
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	e7e1      	b.n	8006d02 <_dtoa_r+0xa42>
 8006d3e:	9b05      	ldr	r3, [sp, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	db04      	blt.n	8006d4e <_dtoa_r+0xa8e>
 8006d44:	9907      	ldr	r1, [sp, #28]
 8006d46:	430b      	orrs	r3, r1
 8006d48:	9906      	ldr	r1, [sp, #24]
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	d120      	bne.n	8006d90 <_dtoa_r+0xad0>
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	dded      	ble.n	8006d2e <_dtoa_r+0xa6e>
 8006d52:	4651      	mov	r1, sl
 8006d54:	2201      	movs	r2, #1
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 fbb4 	bl	80074c4 <__lshift>
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4682      	mov	sl, r0
 8006d60:	f000 fc1c 	bl	800759c <__mcmp>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	dc03      	bgt.n	8006d70 <_dtoa_r+0xab0>
 8006d68:	d1e1      	bne.n	8006d2e <_dtoa_r+0xa6e>
 8006d6a:	f019 0f01 	tst.w	r9, #1
 8006d6e:	d0de      	beq.n	8006d2e <_dtoa_r+0xa6e>
 8006d70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d74:	d1d8      	bne.n	8006d28 <_dtoa_r+0xa68>
 8006d76:	9a01      	ldr	r2, [sp, #4]
 8006d78:	2339      	movs	r3, #57	; 0x39
 8006d7a:	7013      	strb	r3, [r2, #0]
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	461d      	mov	r5, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d86:	2a39      	cmp	r2, #57	; 0x39
 8006d88:	d06c      	beq.n	8006e64 <_dtoa_r+0xba4>
 8006d8a:	3201      	adds	r2, #1
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	e747      	b.n	8006c20 <_dtoa_r+0x960>
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	dd07      	ble.n	8006da4 <_dtoa_r+0xae4>
 8006d94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d98:	d0ed      	beq.n	8006d76 <_dtoa_r+0xab6>
 8006d9a:	9a01      	ldr	r2, [sp, #4]
 8006d9c:	f109 0301 	add.w	r3, r9, #1
 8006da0:	7013      	strb	r3, [r2, #0]
 8006da2:	e73d      	b.n	8006c20 <_dtoa_r+0x960>
 8006da4:	9b04      	ldr	r3, [sp, #16]
 8006da6:	9a08      	ldr	r2, [sp, #32]
 8006da8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d043      	beq.n	8006e38 <_dtoa_r+0xb78>
 8006db0:	4651      	mov	r1, sl
 8006db2:	2300      	movs	r3, #0
 8006db4:	220a      	movs	r2, #10
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 f9d6 	bl	8007168 <__multadd>
 8006dbc:	45b8      	cmp	r8, r7
 8006dbe:	4682      	mov	sl, r0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	f04f 020a 	mov.w	r2, #10
 8006dc8:	4641      	mov	r1, r8
 8006dca:	4620      	mov	r0, r4
 8006dcc:	d107      	bne.n	8006dde <_dtoa_r+0xb1e>
 8006dce:	f000 f9cb 	bl	8007168 <__multadd>
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	e775      	b.n	8006cca <_dtoa_r+0xa0a>
 8006dde:	f000 f9c3 	bl	8007168 <__multadd>
 8006de2:	4639      	mov	r1, r7
 8006de4:	4680      	mov	r8, r0
 8006de6:	2300      	movs	r3, #0
 8006de8:	220a      	movs	r2, #10
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f9bc 	bl	8007168 <__multadd>
 8006df0:	4607      	mov	r7, r0
 8006df2:	e7f0      	b.n	8006dd6 <_dtoa_r+0xb16>
 8006df4:	9b04      	ldr	r3, [sp, #16]
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	9d00      	ldr	r5, [sp, #0]
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	f7ff f9d4 	bl	80061aa <quorem>
 8006e02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e06:	9b00      	ldr	r3, [sp, #0]
 8006e08:	f805 9b01 	strb.w	r9, [r5], #1
 8006e0c:	1aea      	subs	r2, r5, r3
 8006e0e:	9b01      	ldr	r3, [sp, #4]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	dd07      	ble.n	8006e24 <_dtoa_r+0xb64>
 8006e14:	4651      	mov	r1, sl
 8006e16:	2300      	movs	r3, #0
 8006e18:	220a      	movs	r2, #10
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 f9a4 	bl	8007168 <__multadd>
 8006e20:	4682      	mov	sl, r0
 8006e22:	e7ea      	b.n	8006dfa <_dtoa_r+0xb3a>
 8006e24:	9b01      	ldr	r3, [sp, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bfc8      	it	gt
 8006e2a:	461d      	movgt	r5, r3
 8006e2c:	9b00      	ldr	r3, [sp, #0]
 8006e2e:	bfd8      	it	le
 8006e30:	2501      	movle	r5, #1
 8006e32:	441d      	add	r5, r3
 8006e34:	f04f 0800 	mov.w	r8, #0
 8006e38:	4651      	mov	r1, sl
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f000 fb41 	bl	80074c4 <__lshift>
 8006e42:	4631      	mov	r1, r6
 8006e44:	4682      	mov	sl, r0
 8006e46:	f000 fba9 	bl	800759c <__mcmp>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	dc96      	bgt.n	8006d7c <_dtoa_r+0xabc>
 8006e4e:	d102      	bne.n	8006e56 <_dtoa_r+0xb96>
 8006e50:	f019 0f01 	tst.w	r9, #1
 8006e54:	d192      	bne.n	8006d7c <_dtoa_r+0xabc>
 8006e56:	462b      	mov	r3, r5
 8006e58:	461d      	mov	r5, r3
 8006e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e5e:	2a30      	cmp	r2, #48	; 0x30
 8006e60:	d0fa      	beq.n	8006e58 <_dtoa_r+0xb98>
 8006e62:	e6dd      	b.n	8006c20 <_dtoa_r+0x960>
 8006e64:	9a00      	ldr	r2, [sp, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d189      	bne.n	8006d7e <_dtoa_r+0xabe>
 8006e6a:	f10b 0b01 	add.w	fp, fp, #1
 8006e6e:	2331      	movs	r3, #49	; 0x31
 8006e70:	e796      	b.n	8006da0 <_dtoa_r+0xae0>
 8006e72:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <_dtoa_r+0xbdc>)
 8006e74:	f7ff ba99 	b.w	80063aa <_dtoa_r+0xea>
 8006e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f47f aa6d 	bne.w	800635a <_dtoa_r+0x9a>
 8006e80:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <_dtoa_r+0xbe0>)
 8006e82:	f7ff ba92 	b.w	80063aa <_dtoa_r+0xea>
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dcb5      	bgt.n	8006df8 <_dtoa_r+0xb38>
 8006e8c:	9b07      	ldr	r3, [sp, #28]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	f73f aeb1 	bgt.w	8006bf6 <_dtoa_r+0x936>
 8006e94:	e7b0      	b.n	8006df8 <_dtoa_r+0xb38>
 8006e96:	bf00      	nop
 8006e98:	080083e8 	.word	0x080083e8
 8006e9c:	08008348 	.word	0x08008348
 8006ea0:	0800836c 	.word	0x0800836c

08006ea4 <_free_r>:
 8006ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ea6:	2900      	cmp	r1, #0
 8006ea8:	d044      	beq.n	8006f34 <_free_r+0x90>
 8006eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eae:	9001      	str	r0, [sp, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8006eb6:	bfb8      	it	lt
 8006eb8:	18e4      	addlt	r4, r4, r3
 8006eba:	f000 f8e7 	bl	800708c <__malloc_lock>
 8006ebe:	4a1e      	ldr	r2, [pc, #120]	; (8006f38 <_free_r+0x94>)
 8006ec0:	9801      	ldr	r0, [sp, #4]
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	b933      	cbnz	r3, 8006ed4 <_free_r+0x30>
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	6014      	str	r4, [r2, #0]
 8006eca:	b003      	add	sp, #12
 8006ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ed0:	f000 b8e2 	b.w	8007098 <__malloc_unlock>
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d908      	bls.n	8006eea <_free_r+0x46>
 8006ed8:	6825      	ldr	r5, [r4, #0]
 8006eda:	1961      	adds	r1, r4, r5
 8006edc:	428b      	cmp	r3, r1
 8006ede:	bf01      	itttt	eq
 8006ee0:	6819      	ldreq	r1, [r3, #0]
 8006ee2:	685b      	ldreq	r3, [r3, #4]
 8006ee4:	1949      	addeq	r1, r1, r5
 8006ee6:	6021      	streq	r1, [r4, #0]
 8006ee8:	e7ed      	b.n	8006ec6 <_free_r+0x22>
 8006eea:	461a      	mov	r2, r3
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	b10b      	cbz	r3, 8006ef4 <_free_r+0x50>
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d9fa      	bls.n	8006eea <_free_r+0x46>
 8006ef4:	6811      	ldr	r1, [r2, #0]
 8006ef6:	1855      	adds	r5, r2, r1
 8006ef8:	42a5      	cmp	r5, r4
 8006efa:	d10b      	bne.n	8006f14 <_free_r+0x70>
 8006efc:	6824      	ldr	r4, [r4, #0]
 8006efe:	4421      	add	r1, r4
 8006f00:	1854      	adds	r4, r2, r1
 8006f02:	42a3      	cmp	r3, r4
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	d1e0      	bne.n	8006eca <_free_r+0x26>
 8006f08:	681c      	ldr	r4, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	6053      	str	r3, [r2, #4]
 8006f0e:	440c      	add	r4, r1
 8006f10:	6014      	str	r4, [r2, #0]
 8006f12:	e7da      	b.n	8006eca <_free_r+0x26>
 8006f14:	d902      	bls.n	8006f1c <_free_r+0x78>
 8006f16:	230c      	movs	r3, #12
 8006f18:	6003      	str	r3, [r0, #0]
 8006f1a:	e7d6      	b.n	8006eca <_free_r+0x26>
 8006f1c:	6825      	ldr	r5, [r4, #0]
 8006f1e:	1961      	adds	r1, r4, r5
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf04      	itt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	6063      	str	r3, [r4, #4]
 8006f2a:	bf04      	itt	eq
 8006f2c:	1949      	addeq	r1, r1, r5
 8006f2e:	6021      	streq	r1, [r4, #0]
 8006f30:	6054      	str	r4, [r2, #4]
 8006f32:	e7ca      	b.n	8006eca <_free_r+0x26>
 8006f34:	b003      	add	sp, #12
 8006f36:	bd30      	pop	{r4, r5, pc}
 8006f38:	2000050c 	.word	0x2000050c

08006f3c <malloc>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <malloc+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f000 b823 	b.w	8006f8c <_malloc_r>
 8006f46:	bf00      	nop
 8006f48:	20000070 	.word	0x20000070

08006f4c <sbrk_aligned>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4e0e      	ldr	r6, [pc, #56]	; (8006f88 <sbrk_aligned+0x3c>)
 8006f50:	460c      	mov	r4, r1
 8006f52:	6831      	ldr	r1, [r6, #0]
 8006f54:	4605      	mov	r5, r0
 8006f56:	b911      	cbnz	r1, 8006f5e <sbrk_aligned+0x12>
 8006f58:	f000 fe40 	bl	8007bdc <_sbrk_r>
 8006f5c:	6030      	str	r0, [r6, #0]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 fe3b 	bl	8007bdc <_sbrk_r>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	d00a      	beq.n	8006f80 <sbrk_aligned+0x34>
 8006f6a:	1cc4      	adds	r4, r0, #3
 8006f6c:	f024 0403 	bic.w	r4, r4, #3
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	d007      	beq.n	8006f84 <sbrk_aligned+0x38>
 8006f74:	1a21      	subs	r1, r4, r0
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 fe30 	bl	8007bdc <_sbrk_r>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d101      	bne.n	8006f84 <sbrk_aligned+0x38>
 8006f80:	f04f 34ff 	mov.w	r4, #4294967295
 8006f84:	4620      	mov	r0, r4
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	20000510 	.word	0x20000510

08006f8c <_malloc_r>:
 8006f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	1ccd      	adds	r5, r1, #3
 8006f92:	f025 0503 	bic.w	r5, r5, #3
 8006f96:	3508      	adds	r5, #8
 8006f98:	2d0c      	cmp	r5, #12
 8006f9a:	bf38      	it	cc
 8006f9c:	250c      	movcc	r5, #12
 8006f9e:	2d00      	cmp	r5, #0
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	db01      	blt.n	8006fa8 <_malloc_r+0x1c>
 8006fa4:	42a9      	cmp	r1, r5
 8006fa6:	d905      	bls.n	8006fb4 <_malloc_r+0x28>
 8006fa8:	230c      	movs	r3, #12
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	2600      	movs	r6, #0
 8006fae:	4630      	mov	r0, r6
 8006fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007088 <_malloc_r+0xfc>
 8006fb8:	f000 f868 	bl	800708c <__malloc_lock>
 8006fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc0:	461c      	mov	r4, r3
 8006fc2:	bb5c      	cbnz	r4, 800701c <_malloc_r+0x90>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	f7ff ffc0 	bl	8006f4c <sbrk_aligned>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	4604      	mov	r4, r0
 8006fd0:	d155      	bne.n	800707e <_malloc_r+0xf2>
 8006fd2:	f8d8 4000 	ldr.w	r4, [r8]
 8006fd6:	4626      	mov	r6, r4
 8006fd8:	2e00      	cmp	r6, #0
 8006fda:	d145      	bne.n	8007068 <_malloc_r+0xdc>
 8006fdc:	2c00      	cmp	r4, #0
 8006fde:	d048      	beq.n	8007072 <_malloc_r+0xe6>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	eb04 0903 	add.w	r9, r4, r3
 8006fea:	f000 fdf7 	bl	8007bdc <_sbrk_r>
 8006fee:	4581      	cmp	r9, r0
 8006ff0:	d13f      	bne.n	8007072 <_malloc_r+0xe6>
 8006ff2:	6821      	ldr	r1, [r4, #0]
 8006ff4:	1a6d      	subs	r5, r5, r1
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f7ff ffa7 	bl	8006f4c <sbrk_aligned>
 8006ffe:	3001      	adds	r0, #1
 8007000:	d037      	beq.n	8007072 <_malloc_r+0xe6>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	442b      	add	r3, r5
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	f8d8 3000 	ldr.w	r3, [r8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d038      	beq.n	8007082 <_malloc_r+0xf6>
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	42a2      	cmp	r2, r4
 8007014:	d12b      	bne.n	800706e <_malloc_r+0xe2>
 8007016:	2200      	movs	r2, #0
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	e00f      	b.n	800703c <_malloc_r+0xb0>
 800701c:	6822      	ldr	r2, [r4, #0]
 800701e:	1b52      	subs	r2, r2, r5
 8007020:	d41f      	bmi.n	8007062 <_malloc_r+0xd6>
 8007022:	2a0b      	cmp	r2, #11
 8007024:	d917      	bls.n	8007056 <_malloc_r+0xca>
 8007026:	1961      	adds	r1, r4, r5
 8007028:	42a3      	cmp	r3, r4
 800702a:	6025      	str	r5, [r4, #0]
 800702c:	bf18      	it	ne
 800702e:	6059      	strne	r1, [r3, #4]
 8007030:	6863      	ldr	r3, [r4, #4]
 8007032:	bf08      	it	eq
 8007034:	f8c8 1000 	streq.w	r1, [r8]
 8007038:	5162      	str	r2, [r4, r5]
 800703a:	604b      	str	r3, [r1, #4]
 800703c:	4638      	mov	r0, r7
 800703e:	f104 060b 	add.w	r6, r4, #11
 8007042:	f000 f829 	bl	8007098 <__malloc_unlock>
 8007046:	f026 0607 	bic.w	r6, r6, #7
 800704a:	1d23      	adds	r3, r4, #4
 800704c:	1af2      	subs	r2, r6, r3
 800704e:	d0ae      	beq.n	8006fae <_malloc_r+0x22>
 8007050:	1b9b      	subs	r3, r3, r6
 8007052:	50a3      	str	r3, [r4, r2]
 8007054:	e7ab      	b.n	8006fae <_malloc_r+0x22>
 8007056:	42a3      	cmp	r3, r4
 8007058:	6862      	ldr	r2, [r4, #4]
 800705a:	d1dd      	bne.n	8007018 <_malloc_r+0x8c>
 800705c:	f8c8 2000 	str.w	r2, [r8]
 8007060:	e7ec      	b.n	800703c <_malloc_r+0xb0>
 8007062:	4623      	mov	r3, r4
 8007064:	6864      	ldr	r4, [r4, #4]
 8007066:	e7ac      	b.n	8006fc2 <_malloc_r+0x36>
 8007068:	4634      	mov	r4, r6
 800706a:	6876      	ldr	r6, [r6, #4]
 800706c:	e7b4      	b.n	8006fd8 <_malloc_r+0x4c>
 800706e:	4613      	mov	r3, r2
 8007070:	e7cc      	b.n	800700c <_malloc_r+0x80>
 8007072:	230c      	movs	r3, #12
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	4638      	mov	r0, r7
 8007078:	f000 f80e 	bl	8007098 <__malloc_unlock>
 800707c:	e797      	b.n	8006fae <_malloc_r+0x22>
 800707e:	6025      	str	r5, [r4, #0]
 8007080:	e7dc      	b.n	800703c <_malloc_r+0xb0>
 8007082:	605b      	str	r3, [r3, #4]
 8007084:	deff      	udf	#255	; 0xff
 8007086:	bf00      	nop
 8007088:	2000050c 	.word	0x2000050c

0800708c <__malloc_lock>:
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <__malloc_lock+0x8>)
 800708e:	f7ff b88a 	b.w	80061a6 <__retarget_lock_acquire_recursive>
 8007092:	bf00      	nop
 8007094:	20000508 	.word	0x20000508

08007098 <__malloc_unlock>:
 8007098:	4801      	ldr	r0, [pc, #4]	; (80070a0 <__malloc_unlock+0x8>)
 800709a:	f7ff b885 	b.w	80061a8 <__retarget_lock_release_recursive>
 800709e:	bf00      	nop
 80070a0:	20000508 	.word	0x20000508

080070a4 <_Balloc>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	69c6      	ldr	r6, [r0, #28]
 80070a8:	4604      	mov	r4, r0
 80070aa:	460d      	mov	r5, r1
 80070ac:	b976      	cbnz	r6, 80070cc <_Balloc+0x28>
 80070ae:	2010      	movs	r0, #16
 80070b0:	f7ff ff44 	bl	8006f3c <malloc>
 80070b4:	4602      	mov	r2, r0
 80070b6:	61e0      	str	r0, [r4, #28]
 80070b8:	b920      	cbnz	r0, 80070c4 <_Balloc+0x20>
 80070ba:	4b18      	ldr	r3, [pc, #96]	; (800711c <_Balloc+0x78>)
 80070bc:	4818      	ldr	r0, [pc, #96]	; (8007120 <_Balloc+0x7c>)
 80070be:	216b      	movs	r1, #107	; 0x6b
 80070c0:	f000 fdaa 	bl	8007c18 <__assert_func>
 80070c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070c8:	6006      	str	r6, [r0, #0]
 80070ca:	60c6      	str	r6, [r0, #12]
 80070cc:	69e6      	ldr	r6, [r4, #28]
 80070ce:	68f3      	ldr	r3, [r6, #12]
 80070d0:	b183      	cbz	r3, 80070f4 <_Balloc+0x50>
 80070d2:	69e3      	ldr	r3, [r4, #28]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070da:	b9b8      	cbnz	r0, 800710c <_Balloc+0x68>
 80070dc:	2101      	movs	r1, #1
 80070de:	fa01 f605 	lsl.w	r6, r1, r5
 80070e2:	1d72      	adds	r2, r6, #5
 80070e4:	0092      	lsls	r2, r2, #2
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 fdb4 	bl	8007c54 <_calloc_r>
 80070ec:	b160      	cbz	r0, 8007108 <_Balloc+0x64>
 80070ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070f2:	e00e      	b.n	8007112 <_Balloc+0x6e>
 80070f4:	2221      	movs	r2, #33	; 0x21
 80070f6:	2104      	movs	r1, #4
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 fdab 	bl	8007c54 <_calloc_r>
 80070fe:	69e3      	ldr	r3, [r4, #28]
 8007100:	60f0      	str	r0, [r6, #12]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e4      	bne.n	80070d2 <_Balloc+0x2e>
 8007108:	2000      	movs	r0, #0
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	6802      	ldr	r2, [r0, #0]
 800710e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007112:	2300      	movs	r3, #0
 8007114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007118:	e7f7      	b.n	800710a <_Balloc+0x66>
 800711a:	bf00      	nop
 800711c:	08008379 	.word	0x08008379
 8007120:	080083f9 	.word	0x080083f9

08007124 <_Bfree>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	69c6      	ldr	r6, [r0, #28]
 8007128:	4605      	mov	r5, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b976      	cbnz	r6, 800714c <_Bfree+0x28>
 800712e:	2010      	movs	r0, #16
 8007130:	f7ff ff04 	bl	8006f3c <malloc>
 8007134:	4602      	mov	r2, r0
 8007136:	61e8      	str	r0, [r5, #28]
 8007138:	b920      	cbnz	r0, 8007144 <_Bfree+0x20>
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <_Bfree+0x3c>)
 800713c:	4809      	ldr	r0, [pc, #36]	; (8007164 <_Bfree+0x40>)
 800713e:	218f      	movs	r1, #143	; 0x8f
 8007140:	f000 fd6a 	bl	8007c18 <__assert_func>
 8007144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007148:	6006      	str	r6, [r0, #0]
 800714a:	60c6      	str	r6, [r0, #12]
 800714c:	b13c      	cbz	r4, 800715e <_Bfree+0x3a>
 800714e:	69eb      	ldr	r3, [r5, #28]
 8007150:	6862      	ldr	r2, [r4, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007158:	6021      	str	r1, [r4, #0]
 800715a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	08008379 	.word	0x08008379
 8007164:	080083f9 	.word	0x080083f9

08007168 <__multadd>:
 8007168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	690d      	ldr	r5, [r1, #16]
 800716e:	4607      	mov	r7, r0
 8007170:	460c      	mov	r4, r1
 8007172:	461e      	mov	r6, r3
 8007174:	f101 0c14 	add.w	ip, r1, #20
 8007178:	2000      	movs	r0, #0
 800717a:	f8dc 3000 	ldr.w	r3, [ip]
 800717e:	b299      	uxth	r1, r3
 8007180:	fb02 6101 	mla	r1, r2, r1, r6
 8007184:	0c1e      	lsrs	r6, r3, #16
 8007186:	0c0b      	lsrs	r3, r1, #16
 8007188:	fb02 3306 	mla	r3, r2, r6, r3
 800718c:	b289      	uxth	r1, r1
 800718e:	3001      	adds	r0, #1
 8007190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007194:	4285      	cmp	r5, r0
 8007196:	f84c 1b04 	str.w	r1, [ip], #4
 800719a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800719e:	dcec      	bgt.n	800717a <__multadd+0x12>
 80071a0:	b30e      	cbz	r6, 80071e6 <__multadd+0x7e>
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	42ab      	cmp	r3, r5
 80071a6:	dc19      	bgt.n	80071dc <__multadd+0x74>
 80071a8:	6861      	ldr	r1, [r4, #4]
 80071aa:	4638      	mov	r0, r7
 80071ac:	3101      	adds	r1, #1
 80071ae:	f7ff ff79 	bl	80070a4 <_Balloc>
 80071b2:	4680      	mov	r8, r0
 80071b4:	b928      	cbnz	r0, 80071c2 <__multadd+0x5a>
 80071b6:	4602      	mov	r2, r0
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <__multadd+0x84>)
 80071ba:	480d      	ldr	r0, [pc, #52]	; (80071f0 <__multadd+0x88>)
 80071bc:	21ba      	movs	r1, #186	; 0xba
 80071be:	f000 fd2b 	bl	8007c18 <__assert_func>
 80071c2:	6922      	ldr	r2, [r4, #16]
 80071c4:	3202      	adds	r2, #2
 80071c6:	f104 010c 	add.w	r1, r4, #12
 80071ca:	0092      	lsls	r2, r2, #2
 80071cc:	300c      	adds	r0, #12
 80071ce:	f000 fd15 	bl	8007bfc <memcpy>
 80071d2:	4621      	mov	r1, r4
 80071d4:	4638      	mov	r0, r7
 80071d6:	f7ff ffa5 	bl	8007124 <_Bfree>
 80071da:	4644      	mov	r4, r8
 80071dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071e0:	3501      	adds	r5, #1
 80071e2:	615e      	str	r6, [r3, #20]
 80071e4:	6125      	str	r5, [r4, #16]
 80071e6:	4620      	mov	r0, r4
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ec:	080083e8 	.word	0x080083e8
 80071f0:	080083f9 	.word	0x080083f9

080071f4 <__hi0bits>:
 80071f4:	0c03      	lsrs	r3, r0, #16
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	b9d3      	cbnz	r3, 8007230 <__hi0bits+0x3c>
 80071fa:	0400      	lsls	r0, r0, #16
 80071fc:	2310      	movs	r3, #16
 80071fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007202:	bf04      	itt	eq
 8007204:	0200      	lsleq	r0, r0, #8
 8007206:	3308      	addeq	r3, #8
 8007208:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800720c:	bf04      	itt	eq
 800720e:	0100      	lsleq	r0, r0, #4
 8007210:	3304      	addeq	r3, #4
 8007212:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007216:	bf04      	itt	eq
 8007218:	0080      	lsleq	r0, r0, #2
 800721a:	3302      	addeq	r3, #2
 800721c:	2800      	cmp	r0, #0
 800721e:	db05      	blt.n	800722c <__hi0bits+0x38>
 8007220:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007224:	f103 0301 	add.w	r3, r3, #1
 8007228:	bf08      	it	eq
 800722a:	2320      	moveq	r3, #32
 800722c:	4618      	mov	r0, r3
 800722e:	4770      	bx	lr
 8007230:	2300      	movs	r3, #0
 8007232:	e7e4      	b.n	80071fe <__hi0bits+0xa>

08007234 <__lo0bits>:
 8007234:	6803      	ldr	r3, [r0, #0]
 8007236:	f013 0207 	ands.w	r2, r3, #7
 800723a:	d00c      	beq.n	8007256 <__lo0bits+0x22>
 800723c:	07d9      	lsls	r1, r3, #31
 800723e:	d422      	bmi.n	8007286 <__lo0bits+0x52>
 8007240:	079a      	lsls	r2, r3, #30
 8007242:	bf49      	itett	mi
 8007244:	085b      	lsrmi	r3, r3, #1
 8007246:	089b      	lsrpl	r3, r3, #2
 8007248:	6003      	strmi	r3, [r0, #0]
 800724a:	2201      	movmi	r2, #1
 800724c:	bf5c      	itt	pl
 800724e:	6003      	strpl	r3, [r0, #0]
 8007250:	2202      	movpl	r2, #2
 8007252:	4610      	mov	r0, r2
 8007254:	4770      	bx	lr
 8007256:	b299      	uxth	r1, r3
 8007258:	b909      	cbnz	r1, 800725e <__lo0bits+0x2a>
 800725a:	0c1b      	lsrs	r3, r3, #16
 800725c:	2210      	movs	r2, #16
 800725e:	b2d9      	uxtb	r1, r3
 8007260:	b909      	cbnz	r1, 8007266 <__lo0bits+0x32>
 8007262:	3208      	adds	r2, #8
 8007264:	0a1b      	lsrs	r3, r3, #8
 8007266:	0719      	lsls	r1, r3, #28
 8007268:	bf04      	itt	eq
 800726a:	091b      	lsreq	r3, r3, #4
 800726c:	3204      	addeq	r2, #4
 800726e:	0799      	lsls	r1, r3, #30
 8007270:	bf04      	itt	eq
 8007272:	089b      	lsreq	r3, r3, #2
 8007274:	3202      	addeq	r2, #2
 8007276:	07d9      	lsls	r1, r3, #31
 8007278:	d403      	bmi.n	8007282 <__lo0bits+0x4e>
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	f102 0201 	add.w	r2, r2, #1
 8007280:	d003      	beq.n	800728a <__lo0bits+0x56>
 8007282:	6003      	str	r3, [r0, #0]
 8007284:	e7e5      	b.n	8007252 <__lo0bits+0x1e>
 8007286:	2200      	movs	r2, #0
 8007288:	e7e3      	b.n	8007252 <__lo0bits+0x1e>
 800728a:	2220      	movs	r2, #32
 800728c:	e7e1      	b.n	8007252 <__lo0bits+0x1e>
	...

08007290 <__i2b>:
 8007290:	b510      	push	{r4, lr}
 8007292:	460c      	mov	r4, r1
 8007294:	2101      	movs	r1, #1
 8007296:	f7ff ff05 	bl	80070a4 <_Balloc>
 800729a:	4602      	mov	r2, r0
 800729c:	b928      	cbnz	r0, 80072aa <__i2b+0x1a>
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <__i2b+0x24>)
 80072a0:	4805      	ldr	r0, [pc, #20]	; (80072b8 <__i2b+0x28>)
 80072a2:	f240 1145 	movw	r1, #325	; 0x145
 80072a6:	f000 fcb7 	bl	8007c18 <__assert_func>
 80072aa:	2301      	movs	r3, #1
 80072ac:	6144      	str	r4, [r0, #20]
 80072ae:	6103      	str	r3, [r0, #16]
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	080083e8 	.word	0x080083e8
 80072b8:	080083f9 	.word	0x080083f9

080072bc <__multiply>:
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	4691      	mov	r9, r2
 80072c2:	690a      	ldr	r2, [r1, #16]
 80072c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	bfb8      	it	lt
 80072cc:	460b      	movlt	r3, r1
 80072ce:	460c      	mov	r4, r1
 80072d0:	bfbc      	itt	lt
 80072d2:	464c      	movlt	r4, r9
 80072d4:	4699      	movlt	r9, r3
 80072d6:	6927      	ldr	r7, [r4, #16]
 80072d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072dc:	68a3      	ldr	r3, [r4, #8]
 80072de:	6861      	ldr	r1, [r4, #4]
 80072e0:	eb07 060a 	add.w	r6, r7, sl
 80072e4:	42b3      	cmp	r3, r6
 80072e6:	b085      	sub	sp, #20
 80072e8:	bfb8      	it	lt
 80072ea:	3101      	addlt	r1, #1
 80072ec:	f7ff feda 	bl	80070a4 <_Balloc>
 80072f0:	b930      	cbnz	r0, 8007300 <__multiply+0x44>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b44      	ldr	r3, [pc, #272]	; (8007408 <__multiply+0x14c>)
 80072f6:	4845      	ldr	r0, [pc, #276]	; (800740c <__multiply+0x150>)
 80072f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80072fc:	f000 fc8c 	bl	8007c18 <__assert_func>
 8007300:	f100 0514 	add.w	r5, r0, #20
 8007304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007308:	462b      	mov	r3, r5
 800730a:	2200      	movs	r2, #0
 800730c:	4543      	cmp	r3, r8
 800730e:	d321      	bcc.n	8007354 <__multiply+0x98>
 8007310:	f104 0314 	add.w	r3, r4, #20
 8007314:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007318:	f109 0314 	add.w	r3, r9, #20
 800731c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007320:	9202      	str	r2, [sp, #8]
 8007322:	1b3a      	subs	r2, r7, r4
 8007324:	3a15      	subs	r2, #21
 8007326:	f022 0203 	bic.w	r2, r2, #3
 800732a:	3204      	adds	r2, #4
 800732c:	f104 0115 	add.w	r1, r4, #21
 8007330:	428f      	cmp	r7, r1
 8007332:	bf38      	it	cc
 8007334:	2204      	movcc	r2, #4
 8007336:	9201      	str	r2, [sp, #4]
 8007338:	9a02      	ldr	r2, [sp, #8]
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	429a      	cmp	r2, r3
 800733e:	d80c      	bhi.n	800735a <__multiply+0x9e>
 8007340:	2e00      	cmp	r6, #0
 8007342:	dd03      	ble.n	800734c <__multiply+0x90>
 8007344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007348:	2b00      	cmp	r3, #0
 800734a:	d05b      	beq.n	8007404 <__multiply+0x148>
 800734c:	6106      	str	r6, [r0, #16]
 800734e:	b005      	add	sp, #20
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	f843 2b04 	str.w	r2, [r3], #4
 8007358:	e7d8      	b.n	800730c <__multiply+0x50>
 800735a:	f8b3 a000 	ldrh.w	sl, [r3]
 800735e:	f1ba 0f00 	cmp.w	sl, #0
 8007362:	d024      	beq.n	80073ae <__multiply+0xf2>
 8007364:	f104 0e14 	add.w	lr, r4, #20
 8007368:	46a9      	mov	r9, r5
 800736a:	f04f 0c00 	mov.w	ip, #0
 800736e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007372:	f8d9 1000 	ldr.w	r1, [r9]
 8007376:	fa1f fb82 	uxth.w	fp, r2
 800737a:	b289      	uxth	r1, r1
 800737c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007380:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007384:	f8d9 2000 	ldr.w	r2, [r9]
 8007388:	4461      	add	r1, ip
 800738a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800738e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007392:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007396:	b289      	uxth	r1, r1
 8007398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800739c:	4577      	cmp	r7, lr
 800739e:	f849 1b04 	str.w	r1, [r9], #4
 80073a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073a6:	d8e2      	bhi.n	800736e <__multiply+0xb2>
 80073a8:	9a01      	ldr	r2, [sp, #4]
 80073aa:	f845 c002 	str.w	ip, [r5, r2]
 80073ae:	9a03      	ldr	r2, [sp, #12]
 80073b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073b4:	3304      	adds	r3, #4
 80073b6:	f1b9 0f00 	cmp.w	r9, #0
 80073ba:	d021      	beq.n	8007400 <__multiply+0x144>
 80073bc:	6829      	ldr	r1, [r5, #0]
 80073be:	f104 0c14 	add.w	ip, r4, #20
 80073c2:	46ae      	mov	lr, r5
 80073c4:	f04f 0a00 	mov.w	sl, #0
 80073c8:	f8bc b000 	ldrh.w	fp, [ip]
 80073cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073d0:	fb09 220b 	mla	r2, r9, fp, r2
 80073d4:	4452      	add	r2, sl
 80073d6:	b289      	uxth	r1, r1
 80073d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073dc:	f84e 1b04 	str.w	r1, [lr], #4
 80073e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073e8:	f8be 1000 	ldrh.w	r1, [lr]
 80073ec:	fb09 110a 	mla	r1, r9, sl, r1
 80073f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80073f4:	4567      	cmp	r7, ip
 80073f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073fa:	d8e5      	bhi.n	80073c8 <__multiply+0x10c>
 80073fc:	9a01      	ldr	r2, [sp, #4]
 80073fe:	50a9      	str	r1, [r5, r2]
 8007400:	3504      	adds	r5, #4
 8007402:	e799      	b.n	8007338 <__multiply+0x7c>
 8007404:	3e01      	subs	r6, #1
 8007406:	e79b      	b.n	8007340 <__multiply+0x84>
 8007408:	080083e8 	.word	0x080083e8
 800740c:	080083f9 	.word	0x080083f9

08007410 <__pow5mult>:
 8007410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007414:	4615      	mov	r5, r2
 8007416:	f012 0203 	ands.w	r2, r2, #3
 800741a:	4606      	mov	r6, r0
 800741c:	460f      	mov	r7, r1
 800741e:	d007      	beq.n	8007430 <__pow5mult+0x20>
 8007420:	4c25      	ldr	r4, [pc, #148]	; (80074b8 <__pow5mult+0xa8>)
 8007422:	3a01      	subs	r2, #1
 8007424:	2300      	movs	r3, #0
 8007426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800742a:	f7ff fe9d 	bl	8007168 <__multadd>
 800742e:	4607      	mov	r7, r0
 8007430:	10ad      	asrs	r5, r5, #2
 8007432:	d03d      	beq.n	80074b0 <__pow5mult+0xa0>
 8007434:	69f4      	ldr	r4, [r6, #28]
 8007436:	b97c      	cbnz	r4, 8007458 <__pow5mult+0x48>
 8007438:	2010      	movs	r0, #16
 800743a:	f7ff fd7f 	bl	8006f3c <malloc>
 800743e:	4602      	mov	r2, r0
 8007440:	61f0      	str	r0, [r6, #28]
 8007442:	b928      	cbnz	r0, 8007450 <__pow5mult+0x40>
 8007444:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <__pow5mult+0xac>)
 8007446:	481e      	ldr	r0, [pc, #120]	; (80074c0 <__pow5mult+0xb0>)
 8007448:	f240 11b3 	movw	r1, #435	; 0x1b3
 800744c:	f000 fbe4 	bl	8007c18 <__assert_func>
 8007450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007454:	6004      	str	r4, [r0, #0]
 8007456:	60c4      	str	r4, [r0, #12]
 8007458:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800745c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007460:	b94c      	cbnz	r4, 8007476 <__pow5mult+0x66>
 8007462:	f240 2171 	movw	r1, #625	; 0x271
 8007466:	4630      	mov	r0, r6
 8007468:	f7ff ff12 	bl	8007290 <__i2b>
 800746c:	2300      	movs	r3, #0
 800746e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007472:	4604      	mov	r4, r0
 8007474:	6003      	str	r3, [r0, #0]
 8007476:	f04f 0900 	mov.w	r9, #0
 800747a:	07eb      	lsls	r3, r5, #31
 800747c:	d50a      	bpl.n	8007494 <__pow5mult+0x84>
 800747e:	4639      	mov	r1, r7
 8007480:	4622      	mov	r2, r4
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ff1a 	bl	80072bc <__multiply>
 8007488:	4639      	mov	r1, r7
 800748a:	4680      	mov	r8, r0
 800748c:	4630      	mov	r0, r6
 800748e:	f7ff fe49 	bl	8007124 <_Bfree>
 8007492:	4647      	mov	r7, r8
 8007494:	106d      	asrs	r5, r5, #1
 8007496:	d00b      	beq.n	80074b0 <__pow5mult+0xa0>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	b938      	cbnz	r0, 80074ac <__pow5mult+0x9c>
 800749c:	4622      	mov	r2, r4
 800749e:	4621      	mov	r1, r4
 80074a0:	4630      	mov	r0, r6
 80074a2:	f7ff ff0b 	bl	80072bc <__multiply>
 80074a6:	6020      	str	r0, [r4, #0]
 80074a8:	f8c0 9000 	str.w	r9, [r0]
 80074ac:	4604      	mov	r4, r0
 80074ae:	e7e4      	b.n	800747a <__pow5mult+0x6a>
 80074b0:	4638      	mov	r0, r7
 80074b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b6:	bf00      	nop
 80074b8:	08008548 	.word	0x08008548
 80074bc:	08008379 	.word	0x08008379
 80074c0:	080083f9 	.word	0x080083f9

080074c4 <__lshift>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	460c      	mov	r4, r1
 80074ca:	6849      	ldr	r1, [r1, #4]
 80074cc:	6923      	ldr	r3, [r4, #16]
 80074ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074d2:	68a3      	ldr	r3, [r4, #8]
 80074d4:	4607      	mov	r7, r0
 80074d6:	4691      	mov	r9, r2
 80074d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074dc:	f108 0601 	add.w	r6, r8, #1
 80074e0:	42b3      	cmp	r3, r6
 80074e2:	db0b      	blt.n	80074fc <__lshift+0x38>
 80074e4:	4638      	mov	r0, r7
 80074e6:	f7ff fddd 	bl	80070a4 <_Balloc>
 80074ea:	4605      	mov	r5, r0
 80074ec:	b948      	cbnz	r0, 8007502 <__lshift+0x3e>
 80074ee:	4602      	mov	r2, r0
 80074f0:	4b28      	ldr	r3, [pc, #160]	; (8007594 <__lshift+0xd0>)
 80074f2:	4829      	ldr	r0, [pc, #164]	; (8007598 <__lshift+0xd4>)
 80074f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80074f8:	f000 fb8e 	bl	8007c18 <__assert_func>
 80074fc:	3101      	adds	r1, #1
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	e7ee      	b.n	80074e0 <__lshift+0x1c>
 8007502:	2300      	movs	r3, #0
 8007504:	f100 0114 	add.w	r1, r0, #20
 8007508:	f100 0210 	add.w	r2, r0, #16
 800750c:	4618      	mov	r0, r3
 800750e:	4553      	cmp	r3, sl
 8007510:	db33      	blt.n	800757a <__lshift+0xb6>
 8007512:	6920      	ldr	r0, [r4, #16]
 8007514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007518:	f104 0314 	add.w	r3, r4, #20
 800751c:	f019 091f 	ands.w	r9, r9, #31
 8007520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007528:	d02b      	beq.n	8007582 <__lshift+0xbe>
 800752a:	f1c9 0e20 	rsb	lr, r9, #32
 800752e:	468a      	mov	sl, r1
 8007530:	2200      	movs	r2, #0
 8007532:	6818      	ldr	r0, [r3, #0]
 8007534:	fa00 f009 	lsl.w	r0, r0, r9
 8007538:	4310      	orrs	r0, r2
 800753a:	f84a 0b04 	str.w	r0, [sl], #4
 800753e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007542:	459c      	cmp	ip, r3
 8007544:	fa22 f20e 	lsr.w	r2, r2, lr
 8007548:	d8f3      	bhi.n	8007532 <__lshift+0x6e>
 800754a:	ebac 0304 	sub.w	r3, ip, r4
 800754e:	3b15      	subs	r3, #21
 8007550:	f023 0303 	bic.w	r3, r3, #3
 8007554:	3304      	adds	r3, #4
 8007556:	f104 0015 	add.w	r0, r4, #21
 800755a:	4584      	cmp	ip, r0
 800755c:	bf38      	it	cc
 800755e:	2304      	movcc	r3, #4
 8007560:	50ca      	str	r2, [r1, r3]
 8007562:	b10a      	cbz	r2, 8007568 <__lshift+0xa4>
 8007564:	f108 0602 	add.w	r6, r8, #2
 8007568:	3e01      	subs	r6, #1
 800756a:	4638      	mov	r0, r7
 800756c:	612e      	str	r6, [r5, #16]
 800756e:	4621      	mov	r1, r4
 8007570:	f7ff fdd8 	bl	8007124 <_Bfree>
 8007574:	4628      	mov	r0, r5
 8007576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757a:	f842 0f04 	str.w	r0, [r2, #4]!
 800757e:	3301      	adds	r3, #1
 8007580:	e7c5      	b.n	800750e <__lshift+0x4a>
 8007582:	3904      	subs	r1, #4
 8007584:	f853 2b04 	ldr.w	r2, [r3], #4
 8007588:	f841 2f04 	str.w	r2, [r1, #4]!
 800758c:	459c      	cmp	ip, r3
 800758e:	d8f9      	bhi.n	8007584 <__lshift+0xc0>
 8007590:	e7ea      	b.n	8007568 <__lshift+0xa4>
 8007592:	bf00      	nop
 8007594:	080083e8 	.word	0x080083e8
 8007598:	080083f9 	.word	0x080083f9

0800759c <__mcmp>:
 800759c:	b530      	push	{r4, r5, lr}
 800759e:	6902      	ldr	r2, [r0, #16]
 80075a0:	690c      	ldr	r4, [r1, #16]
 80075a2:	1b12      	subs	r2, r2, r4
 80075a4:	d10e      	bne.n	80075c4 <__mcmp+0x28>
 80075a6:	f100 0314 	add.w	r3, r0, #20
 80075aa:	3114      	adds	r1, #20
 80075ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075bc:	42a5      	cmp	r5, r4
 80075be:	d003      	beq.n	80075c8 <__mcmp+0x2c>
 80075c0:	d305      	bcc.n	80075ce <__mcmp+0x32>
 80075c2:	2201      	movs	r2, #1
 80075c4:	4610      	mov	r0, r2
 80075c6:	bd30      	pop	{r4, r5, pc}
 80075c8:	4283      	cmp	r3, r0
 80075ca:	d3f3      	bcc.n	80075b4 <__mcmp+0x18>
 80075cc:	e7fa      	b.n	80075c4 <__mcmp+0x28>
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295
 80075d2:	e7f7      	b.n	80075c4 <__mcmp+0x28>

080075d4 <__mdiff>:
 80075d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	460c      	mov	r4, r1
 80075da:	4606      	mov	r6, r0
 80075dc:	4611      	mov	r1, r2
 80075de:	4620      	mov	r0, r4
 80075e0:	4690      	mov	r8, r2
 80075e2:	f7ff ffdb 	bl	800759c <__mcmp>
 80075e6:	1e05      	subs	r5, r0, #0
 80075e8:	d110      	bne.n	800760c <__mdiff+0x38>
 80075ea:	4629      	mov	r1, r5
 80075ec:	4630      	mov	r0, r6
 80075ee:	f7ff fd59 	bl	80070a4 <_Balloc>
 80075f2:	b930      	cbnz	r0, 8007602 <__mdiff+0x2e>
 80075f4:	4b3a      	ldr	r3, [pc, #232]	; (80076e0 <__mdiff+0x10c>)
 80075f6:	4602      	mov	r2, r0
 80075f8:	f240 2137 	movw	r1, #567	; 0x237
 80075fc:	4839      	ldr	r0, [pc, #228]	; (80076e4 <__mdiff+0x110>)
 80075fe:	f000 fb0b 	bl	8007c18 <__assert_func>
 8007602:	2301      	movs	r3, #1
 8007604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	bfa4      	itt	ge
 800760e:	4643      	movge	r3, r8
 8007610:	46a0      	movge	r8, r4
 8007612:	4630      	mov	r0, r6
 8007614:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007618:	bfa6      	itte	ge
 800761a:	461c      	movge	r4, r3
 800761c:	2500      	movge	r5, #0
 800761e:	2501      	movlt	r5, #1
 8007620:	f7ff fd40 	bl	80070a4 <_Balloc>
 8007624:	b920      	cbnz	r0, 8007630 <__mdiff+0x5c>
 8007626:	4b2e      	ldr	r3, [pc, #184]	; (80076e0 <__mdiff+0x10c>)
 8007628:	4602      	mov	r2, r0
 800762a:	f240 2145 	movw	r1, #581	; 0x245
 800762e:	e7e5      	b.n	80075fc <__mdiff+0x28>
 8007630:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007634:	6926      	ldr	r6, [r4, #16]
 8007636:	60c5      	str	r5, [r0, #12]
 8007638:	f104 0914 	add.w	r9, r4, #20
 800763c:	f108 0514 	add.w	r5, r8, #20
 8007640:	f100 0e14 	add.w	lr, r0, #20
 8007644:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007648:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800764c:	f108 0210 	add.w	r2, r8, #16
 8007650:	46f2      	mov	sl, lr
 8007652:	2100      	movs	r1, #0
 8007654:	f859 3b04 	ldr.w	r3, [r9], #4
 8007658:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800765c:	fa11 f88b 	uxtah	r8, r1, fp
 8007660:	b299      	uxth	r1, r3
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	eba8 0801 	sub.w	r8, r8, r1
 8007668:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800766c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007670:	fa1f f888 	uxth.w	r8, r8
 8007674:	1419      	asrs	r1, r3, #16
 8007676:	454e      	cmp	r6, r9
 8007678:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800767c:	f84a 3b04 	str.w	r3, [sl], #4
 8007680:	d8e8      	bhi.n	8007654 <__mdiff+0x80>
 8007682:	1b33      	subs	r3, r6, r4
 8007684:	3b15      	subs	r3, #21
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	3304      	adds	r3, #4
 800768c:	3415      	adds	r4, #21
 800768e:	42a6      	cmp	r6, r4
 8007690:	bf38      	it	cc
 8007692:	2304      	movcc	r3, #4
 8007694:	441d      	add	r5, r3
 8007696:	4473      	add	r3, lr
 8007698:	469e      	mov	lr, r3
 800769a:	462e      	mov	r6, r5
 800769c:	4566      	cmp	r6, ip
 800769e:	d30e      	bcc.n	80076be <__mdiff+0xea>
 80076a0:	f10c 0203 	add.w	r2, ip, #3
 80076a4:	1b52      	subs	r2, r2, r5
 80076a6:	f022 0203 	bic.w	r2, r2, #3
 80076aa:	3d03      	subs	r5, #3
 80076ac:	45ac      	cmp	ip, r5
 80076ae:	bf38      	it	cc
 80076b0:	2200      	movcc	r2, #0
 80076b2:	4413      	add	r3, r2
 80076b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80076b8:	b17a      	cbz	r2, 80076da <__mdiff+0x106>
 80076ba:	6107      	str	r7, [r0, #16]
 80076bc:	e7a4      	b.n	8007608 <__mdiff+0x34>
 80076be:	f856 8b04 	ldr.w	r8, [r6], #4
 80076c2:	fa11 f288 	uxtah	r2, r1, r8
 80076c6:	1414      	asrs	r4, r2, #16
 80076c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076cc:	b292      	uxth	r2, r2
 80076ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076d2:	f84e 2b04 	str.w	r2, [lr], #4
 80076d6:	1421      	asrs	r1, r4, #16
 80076d8:	e7e0      	b.n	800769c <__mdiff+0xc8>
 80076da:	3f01      	subs	r7, #1
 80076dc:	e7ea      	b.n	80076b4 <__mdiff+0xe0>
 80076de:	bf00      	nop
 80076e0:	080083e8 	.word	0x080083e8
 80076e4:	080083f9 	.word	0x080083f9

080076e8 <__d2b>:
 80076e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076ec:	460f      	mov	r7, r1
 80076ee:	2101      	movs	r1, #1
 80076f0:	ec59 8b10 	vmov	r8, r9, d0
 80076f4:	4616      	mov	r6, r2
 80076f6:	f7ff fcd5 	bl	80070a4 <_Balloc>
 80076fa:	4604      	mov	r4, r0
 80076fc:	b930      	cbnz	r0, 800770c <__d2b+0x24>
 80076fe:	4602      	mov	r2, r0
 8007700:	4b24      	ldr	r3, [pc, #144]	; (8007794 <__d2b+0xac>)
 8007702:	4825      	ldr	r0, [pc, #148]	; (8007798 <__d2b+0xb0>)
 8007704:	f240 310f 	movw	r1, #783	; 0x30f
 8007708:	f000 fa86 	bl	8007c18 <__assert_func>
 800770c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007714:	bb2d      	cbnz	r5, 8007762 <__d2b+0x7a>
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	f1b8 0300 	subs.w	r3, r8, #0
 800771c:	d026      	beq.n	800776c <__d2b+0x84>
 800771e:	4668      	mov	r0, sp
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	f7ff fd87 	bl	8007234 <__lo0bits>
 8007726:	e9dd 1200 	ldrd	r1, r2, [sp]
 800772a:	b1e8      	cbz	r0, 8007768 <__d2b+0x80>
 800772c:	f1c0 0320 	rsb	r3, r0, #32
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	430b      	orrs	r3, r1
 8007736:	40c2      	lsrs	r2, r0
 8007738:	6163      	str	r3, [r4, #20]
 800773a:	9201      	str	r2, [sp, #4]
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	61a3      	str	r3, [r4, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	bf14      	ite	ne
 8007744:	2202      	movne	r2, #2
 8007746:	2201      	moveq	r2, #1
 8007748:	6122      	str	r2, [r4, #16]
 800774a:	b1bd      	cbz	r5, 800777c <__d2b+0x94>
 800774c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007750:	4405      	add	r5, r0
 8007752:	603d      	str	r5, [r7, #0]
 8007754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	4620      	mov	r0, r4
 800775c:	b003      	add	sp, #12
 800775e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007766:	e7d6      	b.n	8007716 <__d2b+0x2e>
 8007768:	6161      	str	r1, [r4, #20]
 800776a:	e7e7      	b.n	800773c <__d2b+0x54>
 800776c:	a801      	add	r0, sp, #4
 800776e:	f7ff fd61 	bl	8007234 <__lo0bits>
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	6163      	str	r3, [r4, #20]
 8007776:	3020      	adds	r0, #32
 8007778:	2201      	movs	r2, #1
 800777a:	e7e5      	b.n	8007748 <__d2b+0x60>
 800777c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007780:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007784:	6038      	str	r0, [r7, #0]
 8007786:	6918      	ldr	r0, [r3, #16]
 8007788:	f7ff fd34 	bl	80071f4 <__hi0bits>
 800778c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007790:	e7e2      	b.n	8007758 <__d2b+0x70>
 8007792:	bf00      	nop
 8007794:	080083e8 	.word	0x080083e8
 8007798:	080083f9 	.word	0x080083f9

0800779c <__ssputs_r>:
 800779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	688e      	ldr	r6, [r1, #8]
 80077a2:	461f      	mov	r7, r3
 80077a4:	42be      	cmp	r6, r7
 80077a6:	680b      	ldr	r3, [r1, #0]
 80077a8:	4682      	mov	sl, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	4690      	mov	r8, r2
 80077ae:	d82c      	bhi.n	800780a <__ssputs_r+0x6e>
 80077b0:	898a      	ldrh	r2, [r1, #12]
 80077b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077b6:	d026      	beq.n	8007806 <__ssputs_r+0x6a>
 80077b8:	6965      	ldr	r5, [r4, #20]
 80077ba:	6909      	ldr	r1, [r1, #16]
 80077bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077c0:	eba3 0901 	sub.w	r9, r3, r1
 80077c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077c8:	1c7b      	adds	r3, r7, #1
 80077ca:	444b      	add	r3, r9
 80077cc:	106d      	asrs	r5, r5, #1
 80077ce:	429d      	cmp	r5, r3
 80077d0:	bf38      	it	cc
 80077d2:	461d      	movcc	r5, r3
 80077d4:	0553      	lsls	r3, r2, #21
 80077d6:	d527      	bpl.n	8007828 <__ssputs_r+0x8c>
 80077d8:	4629      	mov	r1, r5
 80077da:	f7ff fbd7 	bl	8006f8c <_malloc_r>
 80077de:	4606      	mov	r6, r0
 80077e0:	b360      	cbz	r0, 800783c <__ssputs_r+0xa0>
 80077e2:	6921      	ldr	r1, [r4, #16]
 80077e4:	464a      	mov	r2, r9
 80077e6:	f000 fa09 	bl	8007bfc <memcpy>
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f4:	81a3      	strh	r3, [r4, #12]
 80077f6:	6126      	str	r6, [r4, #16]
 80077f8:	6165      	str	r5, [r4, #20]
 80077fa:	444e      	add	r6, r9
 80077fc:	eba5 0509 	sub.w	r5, r5, r9
 8007800:	6026      	str	r6, [r4, #0]
 8007802:	60a5      	str	r5, [r4, #8]
 8007804:	463e      	mov	r6, r7
 8007806:	42be      	cmp	r6, r7
 8007808:	d900      	bls.n	800780c <__ssputs_r+0x70>
 800780a:	463e      	mov	r6, r7
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	4632      	mov	r2, r6
 8007810:	4641      	mov	r1, r8
 8007812:	f000 f9c9 	bl	8007ba8 <memmove>
 8007816:	68a3      	ldr	r3, [r4, #8]
 8007818:	1b9b      	subs	r3, r3, r6
 800781a:	60a3      	str	r3, [r4, #8]
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	4433      	add	r3, r6
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	2000      	movs	r0, #0
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	462a      	mov	r2, r5
 800782a:	f000 fa3b 	bl	8007ca4 <_realloc_r>
 800782e:	4606      	mov	r6, r0
 8007830:	2800      	cmp	r0, #0
 8007832:	d1e0      	bne.n	80077f6 <__ssputs_r+0x5a>
 8007834:	6921      	ldr	r1, [r4, #16]
 8007836:	4650      	mov	r0, sl
 8007838:	f7ff fb34 	bl	8006ea4 <_free_r>
 800783c:	230c      	movs	r3, #12
 800783e:	f8ca 3000 	str.w	r3, [sl]
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
 800784e:	e7e9      	b.n	8007824 <__ssputs_r+0x88>

08007850 <_svfiprintf_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	4698      	mov	r8, r3
 8007856:	898b      	ldrh	r3, [r1, #12]
 8007858:	061b      	lsls	r3, r3, #24
 800785a:	b09d      	sub	sp, #116	; 0x74
 800785c:	4607      	mov	r7, r0
 800785e:	460d      	mov	r5, r1
 8007860:	4614      	mov	r4, r2
 8007862:	d50e      	bpl.n	8007882 <_svfiprintf_r+0x32>
 8007864:	690b      	ldr	r3, [r1, #16]
 8007866:	b963      	cbnz	r3, 8007882 <_svfiprintf_r+0x32>
 8007868:	2140      	movs	r1, #64	; 0x40
 800786a:	f7ff fb8f 	bl	8006f8c <_malloc_r>
 800786e:	6028      	str	r0, [r5, #0]
 8007870:	6128      	str	r0, [r5, #16]
 8007872:	b920      	cbnz	r0, 800787e <_svfiprintf_r+0x2e>
 8007874:	230c      	movs	r3, #12
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	f04f 30ff 	mov.w	r0, #4294967295
 800787c:	e0d0      	b.n	8007a20 <_svfiprintf_r+0x1d0>
 800787e:	2340      	movs	r3, #64	; 0x40
 8007880:	616b      	str	r3, [r5, #20]
 8007882:	2300      	movs	r3, #0
 8007884:	9309      	str	r3, [sp, #36]	; 0x24
 8007886:	2320      	movs	r3, #32
 8007888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800788c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007890:	2330      	movs	r3, #48	; 0x30
 8007892:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a38 <_svfiprintf_r+0x1e8>
 8007896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800789a:	f04f 0901 	mov.w	r9, #1
 800789e:	4623      	mov	r3, r4
 80078a0:	469a      	mov	sl, r3
 80078a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a6:	b10a      	cbz	r2, 80078ac <_svfiprintf_r+0x5c>
 80078a8:	2a25      	cmp	r2, #37	; 0x25
 80078aa:	d1f9      	bne.n	80078a0 <_svfiprintf_r+0x50>
 80078ac:	ebba 0b04 	subs.w	fp, sl, r4
 80078b0:	d00b      	beq.n	80078ca <_svfiprintf_r+0x7a>
 80078b2:	465b      	mov	r3, fp
 80078b4:	4622      	mov	r2, r4
 80078b6:	4629      	mov	r1, r5
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff ff6f 	bl	800779c <__ssputs_r>
 80078be:	3001      	adds	r0, #1
 80078c0:	f000 80a9 	beq.w	8007a16 <_svfiprintf_r+0x1c6>
 80078c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c6:	445a      	add	r2, fp
 80078c8:	9209      	str	r2, [sp, #36]	; 0x24
 80078ca:	f89a 3000 	ldrb.w	r3, [sl]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80a1 	beq.w	8007a16 <_svfiprintf_r+0x1c6>
 80078d4:	2300      	movs	r3, #0
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295
 80078da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078de:	f10a 0a01 	add.w	sl, sl, #1
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	9307      	str	r3, [sp, #28]
 80078e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ea:	931a      	str	r3, [sp, #104]	; 0x68
 80078ec:	4654      	mov	r4, sl
 80078ee:	2205      	movs	r2, #5
 80078f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f4:	4850      	ldr	r0, [pc, #320]	; (8007a38 <_svfiprintf_r+0x1e8>)
 80078f6:	f7f8 fc6b 	bl	80001d0 <memchr>
 80078fa:	9a04      	ldr	r2, [sp, #16]
 80078fc:	b9d8      	cbnz	r0, 8007936 <_svfiprintf_r+0xe6>
 80078fe:	06d0      	lsls	r0, r2, #27
 8007900:	bf44      	itt	mi
 8007902:	2320      	movmi	r3, #32
 8007904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007908:	0711      	lsls	r1, r2, #28
 800790a:	bf44      	itt	mi
 800790c:	232b      	movmi	r3, #43	; 0x2b
 800790e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007912:	f89a 3000 	ldrb.w	r3, [sl]
 8007916:	2b2a      	cmp	r3, #42	; 0x2a
 8007918:	d015      	beq.n	8007946 <_svfiprintf_r+0xf6>
 800791a:	9a07      	ldr	r2, [sp, #28]
 800791c:	4654      	mov	r4, sl
 800791e:	2000      	movs	r0, #0
 8007920:	f04f 0c0a 	mov.w	ip, #10
 8007924:	4621      	mov	r1, r4
 8007926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792a:	3b30      	subs	r3, #48	; 0x30
 800792c:	2b09      	cmp	r3, #9
 800792e:	d94d      	bls.n	80079cc <_svfiprintf_r+0x17c>
 8007930:	b1b0      	cbz	r0, 8007960 <_svfiprintf_r+0x110>
 8007932:	9207      	str	r2, [sp, #28]
 8007934:	e014      	b.n	8007960 <_svfiprintf_r+0x110>
 8007936:	eba0 0308 	sub.w	r3, r0, r8
 800793a:	fa09 f303 	lsl.w	r3, r9, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	46a2      	mov	sl, r4
 8007944:	e7d2      	b.n	80078ec <_svfiprintf_r+0x9c>
 8007946:	9b03      	ldr	r3, [sp, #12]
 8007948:	1d19      	adds	r1, r3, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	9103      	str	r1, [sp, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	bfbb      	ittet	lt
 8007952:	425b      	neglt	r3, r3
 8007954:	f042 0202 	orrlt.w	r2, r2, #2
 8007958:	9307      	strge	r3, [sp, #28]
 800795a:	9307      	strlt	r3, [sp, #28]
 800795c:	bfb8      	it	lt
 800795e:	9204      	strlt	r2, [sp, #16]
 8007960:	7823      	ldrb	r3, [r4, #0]
 8007962:	2b2e      	cmp	r3, #46	; 0x2e
 8007964:	d10c      	bne.n	8007980 <_svfiprintf_r+0x130>
 8007966:	7863      	ldrb	r3, [r4, #1]
 8007968:	2b2a      	cmp	r3, #42	; 0x2a
 800796a:	d134      	bne.n	80079d6 <_svfiprintf_r+0x186>
 800796c:	9b03      	ldr	r3, [sp, #12]
 800796e:	1d1a      	adds	r2, r3, #4
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	9203      	str	r2, [sp, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	bfb8      	it	lt
 8007978:	f04f 33ff 	movlt.w	r3, #4294967295
 800797c:	3402      	adds	r4, #2
 800797e:	9305      	str	r3, [sp, #20]
 8007980:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007a48 <_svfiprintf_r+0x1f8>
 8007984:	7821      	ldrb	r1, [r4, #0]
 8007986:	2203      	movs	r2, #3
 8007988:	4650      	mov	r0, sl
 800798a:	f7f8 fc21 	bl	80001d0 <memchr>
 800798e:	b138      	cbz	r0, 80079a0 <_svfiprintf_r+0x150>
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	eba0 000a 	sub.w	r0, r0, sl
 8007996:	2240      	movs	r2, #64	; 0x40
 8007998:	4082      	lsls	r2, r0
 800799a:	4313      	orrs	r3, r2
 800799c:	3401      	adds	r4, #1
 800799e:	9304      	str	r3, [sp, #16]
 80079a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a4:	4825      	ldr	r0, [pc, #148]	; (8007a3c <_svfiprintf_r+0x1ec>)
 80079a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079aa:	2206      	movs	r2, #6
 80079ac:	f7f8 fc10 	bl	80001d0 <memchr>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d038      	beq.n	8007a26 <_svfiprintf_r+0x1d6>
 80079b4:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <_svfiprintf_r+0x1f0>)
 80079b6:	bb1b      	cbnz	r3, 8007a00 <_svfiprintf_r+0x1b0>
 80079b8:	9b03      	ldr	r3, [sp, #12]
 80079ba:	3307      	adds	r3, #7
 80079bc:	f023 0307 	bic.w	r3, r3, #7
 80079c0:	3308      	adds	r3, #8
 80079c2:	9303      	str	r3, [sp, #12]
 80079c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c6:	4433      	add	r3, r6
 80079c8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ca:	e768      	b.n	800789e <_svfiprintf_r+0x4e>
 80079cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d0:	460c      	mov	r4, r1
 80079d2:	2001      	movs	r0, #1
 80079d4:	e7a6      	b.n	8007924 <_svfiprintf_r+0xd4>
 80079d6:	2300      	movs	r3, #0
 80079d8:	3401      	adds	r4, #1
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	4619      	mov	r1, r3
 80079de:	f04f 0c0a 	mov.w	ip, #10
 80079e2:	4620      	mov	r0, r4
 80079e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e8:	3a30      	subs	r2, #48	; 0x30
 80079ea:	2a09      	cmp	r2, #9
 80079ec:	d903      	bls.n	80079f6 <_svfiprintf_r+0x1a6>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0c6      	beq.n	8007980 <_svfiprintf_r+0x130>
 80079f2:	9105      	str	r1, [sp, #20]
 80079f4:	e7c4      	b.n	8007980 <_svfiprintf_r+0x130>
 80079f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80079fa:	4604      	mov	r4, r0
 80079fc:	2301      	movs	r3, #1
 80079fe:	e7f0      	b.n	80079e2 <_svfiprintf_r+0x192>
 8007a00:	ab03      	add	r3, sp, #12
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	462a      	mov	r2, r5
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <_svfiprintf_r+0x1f4>)
 8007a08:	a904      	add	r1, sp, #16
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	f7fd fe62 	bl	80056d4 <_printf_float>
 8007a10:	1c42      	adds	r2, r0, #1
 8007a12:	4606      	mov	r6, r0
 8007a14:	d1d6      	bne.n	80079c4 <_svfiprintf_r+0x174>
 8007a16:	89ab      	ldrh	r3, [r5, #12]
 8007a18:	065b      	lsls	r3, r3, #25
 8007a1a:	f53f af2d 	bmi.w	8007878 <_svfiprintf_r+0x28>
 8007a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a20:	b01d      	add	sp, #116	; 0x74
 8007a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a26:	ab03      	add	r3, sp, #12
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <_svfiprintf_r+0x1f4>)
 8007a2e:	a904      	add	r1, sp, #16
 8007a30:	4638      	mov	r0, r7
 8007a32:	f7fe f8f3 	bl	8005c1c <_printf_i>
 8007a36:	e7eb      	b.n	8007a10 <_svfiprintf_r+0x1c0>
 8007a38:	08008554 	.word	0x08008554
 8007a3c:	0800855e 	.word	0x0800855e
 8007a40:	080056d5 	.word	0x080056d5
 8007a44:	0800779d 	.word	0x0800779d
 8007a48:	0800855a 	.word	0x0800855a

08007a4c <__sflush_r>:
 8007a4c:	898a      	ldrh	r2, [r1, #12]
 8007a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a52:	4605      	mov	r5, r0
 8007a54:	0710      	lsls	r0, r2, #28
 8007a56:	460c      	mov	r4, r1
 8007a58:	d458      	bmi.n	8007b0c <__sflush_r+0xc0>
 8007a5a:	684b      	ldr	r3, [r1, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dc05      	bgt.n	8007a6c <__sflush_r+0x20>
 8007a60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	dc02      	bgt.n	8007a6c <__sflush_r+0x20>
 8007a66:	2000      	movs	r0, #0
 8007a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a6e:	2e00      	cmp	r6, #0
 8007a70:	d0f9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a78:	682f      	ldr	r7, [r5, #0]
 8007a7a:	6a21      	ldr	r1, [r4, #32]
 8007a7c:	602b      	str	r3, [r5, #0]
 8007a7e:	d032      	beq.n	8007ae6 <__sflush_r+0x9a>
 8007a80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	075a      	lsls	r2, r3, #29
 8007a86:	d505      	bpl.n	8007a94 <__sflush_r+0x48>
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	1ac0      	subs	r0, r0, r3
 8007a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a8e:	b10b      	cbz	r3, 8007a94 <__sflush_r+0x48>
 8007a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a92:	1ac0      	subs	r0, r0, r3
 8007a94:	2300      	movs	r3, #0
 8007a96:	4602      	mov	r2, r0
 8007a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b0      	blx	r6
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	d106      	bne.n	8007ab4 <__sflush_r+0x68>
 8007aa6:	6829      	ldr	r1, [r5, #0]
 8007aa8:	291d      	cmp	r1, #29
 8007aaa:	d82b      	bhi.n	8007b04 <__sflush_r+0xb8>
 8007aac:	4a29      	ldr	r2, [pc, #164]	; (8007b54 <__sflush_r+0x108>)
 8007aae:	410a      	asrs	r2, r1
 8007ab0:	07d6      	lsls	r6, r2, #31
 8007ab2:	d427      	bmi.n	8007b04 <__sflush_r+0xb8>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	6062      	str	r2, [r4, #4]
 8007ab8:	04d9      	lsls	r1, r3, #19
 8007aba:	6922      	ldr	r2, [r4, #16]
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	d504      	bpl.n	8007aca <__sflush_r+0x7e>
 8007ac0:	1c42      	adds	r2, r0, #1
 8007ac2:	d101      	bne.n	8007ac8 <__sflush_r+0x7c>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b903      	cbnz	r3, 8007aca <__sflush_r+0x7e>
 8007ac8:	6560      	str	r0, [r4, #84]	; 0x54
 8007aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007acc:	602f      	str	r7, [r5, #0]
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	d0c9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	d002      	beq.n	8007ae0 <__sflush_r+0x94>
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7ff f9e2 	bl	8006ea4 <_free_r>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ae4:	e7c0      	b.n	8007a68 <__sflush_r+0x1c>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b0      	blx	r6
 8007aec:	1c41      	adds	r1, r0, #1
 8007aee:	d1c8      	bne.n	8007a82 <__sflush_r+0x36>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0c5      	beq.n	8007a82 <__sflush_r+0x36>
 8007af6:	2b1d      	cmp	r3, #29
 8007af8:	d001      	beq.n	8007afe <__sflush_r+0xb2>
 8007afa:	2b16      	cmp	r3, #22
 8007afc:	d101      	bne.n	8007b02 <__sflush_r+0xb6>
 8007afe:	602f      	str	r7, [r5, #0]
 8007b00:	e7b1      	b.n	8007a66 <__sflush_r+0x1a>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	e7ad      	b.n	8007a68 <__sflush_r+0x1c>
 8007b0c:	690f      	ldr	r7, [r1, #16]
 8007b0e:	2f00      	cmp	r7, #0
 8007b10:	d0a9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007b12:	0793      	lsls	r3, r2, #30
 8007b14:	680e      	ldr	r6, [r1, #0]
 8007b16:	bf08      	it	eq
 8007b18:	694b      	ldreq	r3, [r1, #20]
 8007b1a:	600f      	str	r7, [r1, #0]
 8007b1c:	bf18      	it	ne
 8007b1e:	2300      	movne	r3, #0
 8007b20:	eba6 0807 	sub.w	r8, r6, r7
 8007b24:	608b      	str	r3, [r1, #8]
 8007b26:	f1b8 0f00 	cmp.w	r8, #0
 8007b2a:	dd9c      	ble.n	8007a66 <__sflush_r+0x1a>
 8007b2c:	6a21      	ldr	r1, [r4, #32]
 8007b2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b30:	4643      	mov	r3, r8
 8007b32:	463a      	mov	r2, r7
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b0      	blx	r6
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	dc06      	bgt.n	8007b4a <__sflush_r+0xfe>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295
 8007b48:	e78e      	b.n	8007a68 <__sflush_r+0x1c>
 8007b4a:	4407      	add	r7, r0
 8007b4c:	eba8 0800 	sub.w	r8, r8, r0
 8007b50:	e7e9      	b.n	8007b26 <__sflush_r+0xda>
 8007b52:	bf00      	nop
 8007b54:	dfbffffe 	.word	0xdfbffffe

08007b58 <_fflush_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	690b      	ldr	r3, [r1, #16]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	b913      	cbnz	r3, 8007b68 <_fflush_r+0x10>
 8007b62:	2500      	movs	r5, #0
 8007b64:	4628      	mov	r0, r5
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	b118      	cbz	r0, 8007b72 <_fflush_r+0x1a>
 8007b6a:	6a03      	ldr	r3, [r0, #32]
 8007b6c:	b90b      	cbnz	r3, 8007b72 <_fflush_r+0x1a>
 8007b6e:	f7fe fa03 	bl	8005f78 <__sinit>
 8007b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f3      	beq.n	8007b62 <_fflush_r+0xa>
 8007b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b7c:	07d0      	lsls	r0, r2, #31
 8007b7e:	d404      	bmi.n	8007b8a <_fflush_r+0x32>
 8007b80:	0599      	lsls	r1, r3, #22
 8007b82:	d402      	bmi.n	8007b8a <_fflush_r+0x32>
 8007b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b86:	f7fe fb0e 	bl	80061a6 <__retarget_lock_acquire_recursive>
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	f7ff ff5d 	bl	8007a4c <__sflush_r>
 8007b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b94:	07da      	lsls	r2, r3, #31
 8007b96:	4605      	mov	r5, r0
 8007b98:	d4e4      	bmi.n	8007b64 <_fflush_r+0xc>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	059b      	lsls	r3, r3, #22
 8007b9e:	d4e1      	bmi.n	8007b64 <_fflush_r+0xc>
 8007ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba2:	f7fe fb01 	bl	80061a8 <__retarget_lock_release_recursive>
 8007ba6:	e7dd      	b.n	8007b64 <_fflush_r+0xc>

08007ba8 <memmove>:
 8007ba8:	4288      	cmp	r0, r1
 8007baa:	b510      	push	{r4, lr}
 8007bac:	eb01 0402 	add.w	r4, r1, r2
 8007bb0:	d902      	bls.n	8007bb8 <memmove+0x10>
 8007bb2:	4284      	cmp	r4, r0
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	d807      	bhi.n	8007bc8 <memmove+0x20>
 8007bb8:	1e43      	subs	r3, r0, #1
 8007bba:	42a1      	cmp	r1, r4
 8007bbc:	d008      	beq.n	8007bd0 <memmove+0x28>
 8007bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bc6:	e7f8      	b.n	8007bba <memmove+0x12>
 8007bc8:	4402      	add	r2, r0
 8007bca:	4601      	mov	r1, r0
 8007bcc:	428a      	cmp	r2, r1
 8007bce:	d100      	bne.n	8007bd2 <memmove+0x2a>
 8007bd0:	bd10      	pop	{r4, pc}
 8007bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bda:	e7f7      	b.n	8007bcc <memmove+0x24>

08007bdc <_sbrk_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d06      	ldr	r5, [pc, #24]	; (8007bf8 <_sbrk_r+0x1c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7f9 fce4 	bl	80015b4 <_sbrk>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_sbrk_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_sbrk_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20000504 	.word	0x20000504

08007bfc <memcpy>:
 8007bfc:	440a      	add	r2, r1
 8007bfe:	4291      	cmp	r1, r2
 8007c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c04:	d100      	bne.n	8007c08 <memcpy+0xc>
 8007c06:	4770      	bx	lr
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c12:	4291      	cmp	r1, r2
 8007c14:	d1f9      	bne.n	8007c0a <memcpy+0xe>
 8007c16:	bd10      	pop	{r4, pc}

08007c18 <__assert_func>:
 8007c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c1a:	4614      	mov	r4, r2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <__assert_func+0x2c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4605      	mov	r5, r0
 8007c24:	68d8      	ldr	r0, [r3, #12]
 8007c26:	b14c      	cbz	r4, 8007c3c <__assert_func+0x24>
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <__assert_func+0x30>)
 8007c2a:	9100      	str	r1, [sp, #0]
 8007c2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c30:	4906      	ldr	r1, [pc, #24]	; (8007c4c <__assert_func+0x34>)
 8007c32:	462b      	mov	r3, r5
 8007c34:	f000 f872 	bl	8007d1c <fiprintf>
 8007c38:	f000 f882 	bl	8007d40 <abort>
 8007c3c:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <__assert_func+0x38>)
 8007c3e:	461c      	mov	r4, r3
 8007c40:	e7f3      	b.n	8007c2a <__assert_func+0x12>
 8007c42:	bf00      	nop
 8007c44:	20000070 	.word	0x20000070
 8007c48:	0800856f 	.word	0x0800856f
 8007c4c:	0800857c 	.word	0x0800857c
 8007c50:	080085aa 	.word	0x080085aa

08007c54 <_calloc_r>:
 8007c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c56:	fba1 2402 	umull	r2, r4, r1, r2
 8007c5a:	b94c      	cbnz	r4, 8007c70 <_calloc_r+0x1c>
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	9201      	str	r2, [sp, #4]
 8007c60:	f7ff f994 	bl	8006f8c <_malloc_r>
 8007c64:	9a01      	ldr	r2, [sp, #4]
 8007c66:	4605      	mov	r5, r0
 8007c68:	b930      	cbnz	r0, 8007c78 <_calloc_r+0x24>
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	b003      	add	sp, #12
 8007c6e:	bd30      	pop	{r4, r5, pc}
 8007c70:	220c      	movs	r2, #12
 8007c72:	6002      	str	r2, [r0, #0]
 8007c74:	2500      	movs	r5, #0
 8007c76:	e7f8      	b.n	8007c6a <_calloc_r+0x16>
 8007c78:	4621      	mov	r1, r4
 8007c7a:	f7fe fa16 	bl	80060aa <memset>
 8007c7e:	e7f4      	b.n	8007c6a <_calloc_r+0x16>

08007c80 <__ascii_mbtowc>:
 8007c80:	b082      	sub	sp, #8
 8007c82:	b901      	cbnz	r1, 8007c86 <__ascii_mbtowc+0x6>
 8007c84:	a901      	add	r1, sp, #4
 8007c86:	b142      	cbz	r2, 8007c9a <__ascii_mbtowc+0x1a>
 8007c88:	b14b      	cbz	r3, 8007c9e <__ascii_mbtowc+0x1e>
 8007c8a:	7813      	ldrb	r3, [r2, #0]
 8007c8c:	600b      	str	r3, [r1, #0]
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	1e10      	subs	r0, r2, #0
 8007c92:	bf18      	it	ne
 8007c94:	2001      	movne	r0, #1
 8007c96:	b002      	add	sp, #8
 8007c98:	4770      	bx	lr
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	e7fb      	b.n	8007c96 <__ascii_mbtowc+0x16>
 8007c9e:	f06f 0001 	mvn.w	r0, #1
 8007ca2:	e7f8      	b.n	8007c96 <__ascii_mbtowc+0x16>

08007ca4 <_realloc_r>:
 8007ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4614      	mov	r4, r2
 8007cac:	460e      	mov	r6, r1
 8007cae:	b921      	cbnz	r1, 8007cba <_realloc_r+0x16>
 8007cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	f7ff b969 	b.w	8006f8c <_malloc_r>
 8007cba:	b92a      	cbnz	r2, 8007cc8 <_realloc_r+0x24>
 8007cbc:	f7ff f8f2 	bl	8006ea4 <_free_r>
 8007cc0:	4625      	mov	r5, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc8:	f000 f841 	bl	8007d4e <_malloc_usable_size_r>
 8007ccc:	4284      	cmp	r4, r0
 8007cce:	4607      	mov	r7, r0
 8007cd0:	d802      	bhi.n	8007cd8 <_realloc_r+0x34>
 8007cd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cd6:	d812      	bhi.n	8007cfe <_realloc_r+0x5a>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f7ff f956 	bl	8006f8c <_malloc_r>
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d0ed      	beq.n	8007cc2 <_realloc_r+0x1e>
 8007ce6:	42bc      	cmp	r4, r7
 8007ce8:	4622      	mov	r2, r4
 8007cea:	4631      	mov	r1, r6
 8007cec:	bf28      	it	cs
 8007cee:	463a      	movcs	r2, r7
 8007cf0:	f7ff ff84 	bl	8007bfc <memcpy>
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	f7ff f8d4 	bl	8006ea4 <_free_r>
 8007cfc:	e7e1      	b.n	8007cc2 <_realloc_r+0x1e>
 8007cfe:	4635      	mov	r5, r6
 8007d00:	e7df      	b.n	8007cc2 <_realloc_r+0x1e>

08007d02 <__ascii_wctomb>:
 8007d02:	b149      	cbz	r1, 8007d18 <__ascii_wctomb+0x16>
 8007d04:	2aff      	cmp	r2, #255	; 0xff
 8007d06:	bf85      	ittet	hi
 8007d08:	238a      	movhi	r3, #138	; 0x8a
 8007d0a:	6003      	strhi	r3, [r0, #0]
 8007d0c:	700a      	strbls	r2, [r1, #0]
 8007d0e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d12:	bf98      	it	ls
 8007d14:	2001      	movls	r0, #1
 8007d16:	4770      	bx	lr
 8007d18:	4608      	mov	r0, r1
 8007d1a:	4770      	bx	lr

08007d1c <fiprintf>:
 8007d1c:	b40e      	push	{r1, r2, r3}
 8007d1e:	b503      	push	{r0, r1, lr}
 8007d20:	4601      	mov	r1, r0
 8007d22:	ab03      	add	r3, sp, #12
 8007d24:	4805      	ldr	r0, [pc, #20]	; (8007d3c <fiprintf+0x20>)
 8007d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2a:	6800      	ldr	r0, [r0, #0]
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	f000 f83f 	bl	8007db0 <_vfiprintf_r>
 8007d32:	b002      	add	sp, #8
 8007d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d38:	b003      	add	sp, #12
 8007d3a:	4770      	bx	lr
 8007d3c:	20000070 	.word	0x20000070

08007d40 <abort>:
 8007d40:	b508      	push	{r3, lr}
 8007d42:	2006      	movs	r0, #6
 8007d44:	f000 fa0c 	bl	8008160 <raise>
 8007d48:	2001      	movs	r0, #1
 8007d4a:	f7f9 fbbb 	bl	80014c4 <_exit>

08007d4e <_malloc_usable_size_r>:
 8007d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d52:	1f18      	subs	r0, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bfbc      	itt	lt
 8007d58:	580b      	ldrlt	r3, [r1, r0]
 8007d5a:	18c0      	addlt	r0, r0, r3
 8007d5c:	4770      	bx	lr

08007d5e <__sfputc_r>:
 8007d5e:	6893      	ldr	r3, [r2, #8]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	b410      	push	{r4}
 8007d66:	6093      	str	r3, [r2, #8]
 8007d68:	da08      	bge.n	8007d7c <__sfputc_r+0x1e>
 8007d6a:	6994      	ldr	r4, [r2, #24]
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	db01      	blt.n	8007d74 <__sfputc_r+0x16>
 8007d70:	290a      	cmp	r1, #10
 8007d72:	d103      	bne.n	8007d7c <__sfputc_r+0x1e>
 8007d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d78:	f000 b934 	b.w	8007fe4 <__swbuf_r>
 8007d7c:	6813      	ldr	r3, [r2, #0]
 8007d7e:	1c58      	adds	r0, r3, #1
 8007d80:	6010      	str	r0, [r2, #0]
 8007d82:	7019      	strb	r1, [r3, #0]
 8007d84:	4608      	mov	r0, r1
 8007d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <__sfputs_r>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460f      	mov	r7, r1
 8007d92:	4614      	mov	r4, r2
 8007d94:	18d5      	adds	r5, r2, r3
 8007d96:	42ac      	cmp	r4, r5
 8007d98:	d101      	bne.n	8007d9e <__sfputs_r+0x12>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e007      	b.n	8007dae <__sfputs_r+0x22>
 8007d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da2:	463a      	mov	r2, r7
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff ffda 	bl	8007d5e <__sfputc_r>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d1f3      	bne.n	8007d96 <__sfputs_r+0xa>
 8007dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007db0 <_vfiprintf_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	460d      	mov	r5, r1
 8007db6:	b09d      	sub	sp, #116	; 0x74
 8007db8:	4614      	mov	r4, r2
 8007dba:	4698      	mov	r8, r3
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	b118      	cbz	r0, 8007dc8 <_vfiprintf_r+0x18>
 8007dc0:	6a03      	ldr	r3, [r0, #32]
 8007dc2:	b90b      	cbnz	r3, 8007dc8 <_vfiprintf_r+0x18>
 8007dc4:	f7fe f8d8 	bl	8005f78 <__sinit>
 8007dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dca:	07d9      	lsls	r1, r3, #31
 8007dcc:	d405      	bmi.n	8007dda <_vfiprintf_r+0x2a>
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	059a      	lsls	r2, r3, #22
 8007dd2:	d402      	bmi.n	8007dda <_vfiprintf_r+0x2a>
 8007dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dd6:	f7fe f9e6 	bl	80061a6 <__retarget_lock_acquire_recursive>
 8007dda:	89ab      	ldrh	r3, [r5, #12]
 8007ddc:	071b      	lsls	r3, r3, #28
 8007dde:	d501      	bpl.n	8007de4 <_vfiprintf_r+0x34>
 8007de0:	692b      	ldr	r3, [r5, #16]
 8007de2:	b99b      	cbnz	r3, 8007e0c <_vfiprintf_r+0x5c>
 8007de4:	4629      	mov	r1, r5
 8007de6:	4630      	mov	r0, r6
 8007de8:	f000 f93a 	bl	8008060 <__swsetup_r>
 8007dec:	b170      	cbz	r0, 8007e0c <_vfiprintf_r+0x5c>
 8007dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df0:	07dc      	lsls	r4, r3, #31
 8007df2:	d504      	bpl.n	8007dfe <_vfiprintf_r+0x4e>
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
 8007df8:	b01d      	add	sp, #116	; 0x74
 8007dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	0598      	lsls	r0, r3, #22
 8007e02:	d4f7      	bmi.n	8007df4 <_vfiprintf_r+0x44>
 8007e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e06:	f7fe f9cf 	bl	80061a8 <__retarget_lock_release_recursive>
 8007e0a:	e7f3      	b.n	8007df4 <_vfiprintf_r+0x44>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e10:	2320      	movs	r3, #32
 8007e12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e1a:	2330      	movs	r3, #48	; 0x30
 8007e1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007fd0 <_vfiprintf_r+0x220>
 8007e20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e24:	f04f 0901 	mov.w	r9, #1
 8007e28:	4623      	mov	r3, r4
 8007e2a:	469a      	mov	sl, r3
 8007e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e30:	b10a      	cbz	r2, 8007e36 <_vfiprintf_r+0x86>
 8007e32:	2a25      	cmp	r2, #37	; 0x25
 8007e34:	d1f9      	bne.n	8007e2a <_vfiprintf_r+0x7a>
 8007e36:	ebba 0b04 	subs.w	fp, sl, r4
 8007e3a:	d00b      	beq.n	8007e54 <_vfiprintf_r+0xa4>
 8007e3c:	465b      	mov	r3, fp
 8007e3e:	4622      	mov	r2, r4
 8007e40:	4629      	mov	r1, r5
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7ff ffa2 	bl	8007d8c <__sfputs_r>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	f000 80a9 	beq.w	8007fa0 <_vfiprintf_r+0x1f0>
 8007e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e50:	445a      	add	r2, fp
 8007e52:	9209      	str	r2, [sp, #36]	; 0x24
 8007e54:	f89a 3000 	ldrb.w	r3, [sl]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80a1 	beq.w	8007fa0 <_vfiprintf_r+0x1f0>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f04f 32ff 	mov.w	r2, #4294967295
 8007e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e68:	f10a 0a01 	add.w	sl, sl, #1
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e74:	931a      	str	r3, [sp, #104]	; 0x68
 8007e76:	4654      	mov	r4, sl
 8007e78:	2205      	movs	r2, #5
 8007e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7e:	4854      	ldr	r0, [pc, #336]	; (8007fd0 <_vfiprintf_r+0x220>)
 8007e80:	f7f8 f9a6 	bl	80001d0 <memchr>
 8007e84:	9a04      	ldr	r2, [sp, #16]
 8007e86:	b9d8      	cbnz	r0, 8007ec0 <_vfiprintf_r+0x110>
 8007e88:	06d1      	lsls	r1, r2, #27
 8007e8a:	bf44      	itt	mi
 8007e8c:	2320      	movmi	r3, #32
 8007e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e92:	0713      	lsls	r3, r2, #28
 8007e94:	bf44      	itt	mi
 8007e96:	232b      	movmi	r3, #43	; 0x2b
 8007e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea2:	d015      	beq.n	8007ed0 <_vfiprintf_r+0x120>
 8007ea4:	9a07      	ldr	r2, [sp, #28]
 8007ea6:	4654      	mov	r4, sl
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f04f 0c0a 	mov.w	ip, #10
 8007eae:	4621      	mov	r1, r4
 8007eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb4:	3b30      	subs	r3, #48	; 0x30
 8007eb6:	2b09      	cmp	r3, #9
 8007eb8:	d94d      	bls.n	8007f56 <_vfiprintf_r+0x1a6>
 8007eba:	b1b0      	cbz	r0, 8007eea <_vfiprintf_r+0x13a>
 8007ebc:	9207      	str	r2, [sp, #28]
 8007ebe:	e014      	b.n	8007eea <_vfiprintf_r+0x13a>
 8007ec0:	eba0 0308 	sub.w	r3, r0, r8
 8007ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	9304      	str	r3, [sp, #16]
 8007ecc:	46a2      	mov	sl, r4
 8007ece:	e7d2      	b.n	8007e76 <_vfiprintf_r+0xc6>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	1d19      	adds	r1, r3, #4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	9103      	str	r1, [sp, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bfbb      	ittet	lt
 8007edc:	425b      	neglt	r3, r3
 8007ede:	f042 0202 	orrlt.w	r2, r2, #2
 8007ee2:	9307      	strge	r3, [sp, #28]
 8007ee4:	9307      	strlt	r3, [sp, #28]
 8007ee6:	bfb8      	it	lt
 8007ee8:	9204      	strlt	r2, [sp, #16]
 8007eea:	7823      	ldrb	r3, [r4, #0]
 8007eec:	2b2e      	cmp	r3, #46	; 0x2e
 8007eee:	d10c      	bne.n	8007f0a <_vfiprintf_r+0x15a>
 8007ef0:	7863      	ldrb	r3, [r4, #1]
 8007ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef4:	d134      	bne.n	8007f60 <_vfiprintf_r+0x1b0>
 8007ef6:	9b03      	ldr	r3, [sp, #12]
 8007ef8:	1d1a      	adds	r2, r3, #4
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	9203      	str	r2, [sp, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	bfb8      	it	lt
 8007f02:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f06:	3402      	adds	r4, #2
 8007f08:	9305      	str	r3, [sp, #20]
 8007f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007fe0 <_vfiprintf_r+0x230>
 8007f0e:	7821      	ldrb	r1, [r4, #0]
 8007f10:	2203      	movs	r2, #3
 8007f12:	4650      	mov	r0, sl
 8007f14:	f7f8 f95c 	bl	80001d0 <memchr>
 8007f18:	b138      	cbz	r0, 8007f2a <_vfiprintf_r+0x17a>
 8007f1a:	9b04      	ldr	r3, [sp, #16]
 8007f1c:	eba0 000a 	sub.w	r0, r0, sl
 8007f20:	2240      	movs	r2, #64	; 0x40
 8007f22:	4082      	lsls	r2, r0
 8007f24:	4313      	orrs	r3, r2
 8007f26:	3401      	adds	r4, #1
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2e:	4829      	ldr	r0, [pc, #164]	; (8007fd4 <_vfiprintf_r+0x224>)
 8007f30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f34:	2206      	movs	r2, #6
 8007f36:	f7f8 f94b 	bl	80001d0 <memchr>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d03f      	beq.n	8007fbe <_vfiprintf_r+0x20e>
 8007f3e:	4b26      	ldr	r3, [pc, #152]	; (8007fd8 <_vfiprintf_r+0x228>)
 8007f40:	bb1b      	cbnz	r3, 8007f8a <_vfiprintf_r+0x1da>
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	3307      	adds	r3, #7
 8007f46:	f023 0307 	bic.w	r3, r3, #7
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	9303      	str	r3, [sp, #12]
 8007f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f50:	443b      	add	r3, r7
 8007f52:	9309      	str	r3, [sp, #36]	; 0x24
 8007f54:	e768      	b.n	8007e28 <_vfiprintf_r+0x78>
 8007f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	e7a6      	b.n	8007eae <_vfiprintf_r+0xfe>
 8007f60:	2300      	movs	r3, #0
 8007f62:	3401      	adds	r4, #1
 8007f64:	9305      	str	r3, [sp, #20]
 8007f66:	4619      	mov	r1, r3
 8007f68:	f04f 0c0a 	mov.w	ip, #10
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f72:	3a30      	subs	r2, #48	; 0x30
 8007f74:	2a09      	cmp	r2, #9
 8007f76:	d903      	bls.n	8007f80 <_vfiprintf_r+0x1d0>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0c6      	beq.n	8007f0a <_vfiprintf_r+0x15a>
 8007f7c:	9105      	str	r1, [sp, #20]
 8007f7e:	e7c4      	b.n	8007f0a <_vfiprintf_r+0x15a>
 8007f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f84:	4604      	mov	r4, r0
 8007f86:	2301      	movs	r3, #1
 8007f88:	e7f0      	b.n	8007f6c <_vfiprintf_r+0x1bc>
 8007f8a:	ab03      	add	r3, sp, #12
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4b12      	ldr	r3, [pc, #72]	; (8007fdc <_vfiprintf_r+0x22c>)
 8007f92:	a904      	add	r1, sp, #16
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7fd fb9d 	bl	80056d4 <_printf_float>
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	1c78      	adds	r0, r7, #1
 8007f9e:	d1d6      	bne.n	8007f4e <_vfiprintf_r+0x19e>
 8007fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa2:	07d9      	lsls	r1, r3, #31
 8007fa4:	d405      	bmi.n	8007fb2 <_vfiprintf_r+0x202>
 8007fa6:	89ab      	ldrh	r3, [r5, #12]
 8007fa8:	059a      	lsls	r2, r3, #22
 8007faa:	d402      	bmi.n	8007fb2 <_vfiprintf_r+0x202>
 8007fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fae:	f7fe f8fb 	bl	80061a8 <__retarget_lock_release_recursive>
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	065b      	lsls	r3, r3, #25
 8007fb6:	f53f af1d 	bmi.w	8007df4 <_vfiprintf_r+0x44>
 8007fba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fbc:	e71c      	b.n	8007df8 <_vfiprintf_r+0x48>
 8007fbe:	ab03      	add	r3, sp, #12
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <_vfiprintf_r+0x22c>)
 8007fc6:	a904      	add	r1, sp, #16
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f7fd fe27 	bl	8005c1c <_printf_i>
 8007fce:	e7e4      	b.n	8007f9a <_vfiprintf_r+0x1ea>
 8007fd0:	08008554 	.word	0x08008554
 8007fd4:	0800855e 	.word	0x0800855e
 8007fd8:	080056d5 	.word	0x080056d5
 8007fdc:	08007d8d 	.word	0x08007d8d
 8007fe0:	0800855a 	.word	0x0800855a

08007fe4 <__swbuf_r>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	4614      	mov	r4, r2
 8007fea:	4605      	mov	r5, r0
 8007fec:	b118      	cbz	r0, 8007ff6 <__swbuf_r+0x12>
 8007fee:	6a03      	ldr	r3, [r0, #32]
 8007ff0:	b90b      	cbnz	r3, 8007ff6 <__swbuf_r+0x12>
 8007ff2:	f7fd ffc1 	bl	8005f78 <__sinit>
 8007ff6:	69a3      	ldr	r3, [r4, #24]
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	071a      	lsls	r2, r3, #28
 8007ffe:	d525      	bpl.n	800804c <__swbuf_r+0x68>
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	b31b      	cbz	r3, 800804c <__swbuf_r+0x68>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	6922      	ldr	r2, [r4, #16]
 8008008:	1a98      	subs	r0, r3, r2
 800800a:	6963      	ldr	r3, [r4, #20]
 800800c:	b2f6      	uxtb	r6, r6
 800800e:	4283      	cmp	r3, r0
 8008010:	4637      	mov	r7, r6
 8008012:	dc04      	bgt.n	800801e <__swbuf_r+0x3a>
 8008014:	4621      	mov	r1, r4
 8008016:	4628      	mov	r0, r5
 8008018:	f7ff fd9e 	bl	8007b58 <_fflush_r>
 800801c:	b9e0      	cbnz	r0, 8008058 <__swbuf_r+0x74>
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	3b01      	subs	r3, #1
 8008022:	60a3      	str	r3, [r4, #8]
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	6022      	str	r2, [r4, #0]
 800802a:	701e      	strb	r6, [r3, #0]
 800802c:	6962      	ldr	r2, [r4, #20]
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	429a      	cmp	r2, r3
 8008032:	d004      	beq.n	800803e <__swbuf_r+0x5a>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	07db      	lsls	r3, r3, #31
 8008038:	d506      	bpl.n	8008048 <__swbuf_r+0x64>
 800803a:	2e0a      	cmp	r6, #10
 800803c:	d104      	bne.n	8008048 <__swbuf_r+0x64>
 800803e:	4621      	mov	r1, r4
 8008040:	4628      	mov	r0, r5
 8008042:	f7ff fd89 	bl	8007b58 <_fflush_r>
 8008046:	b938      	cbnz	r0, 8008058 <__swbuf_r+0x74>
 8008048:	4638      	mov	r0, r7
 800804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804c:	4621      	mov	r1, r4
 800804e:	4628      	mov	r0, r5
 8008050:	f000 f806 	bl	8008060 <__swsetup_r>
 8008054:	2800      	cmp	r0, #0
 8008056:	d0d5      	beq.n	8008004 <__swbuf_r+0x20>
 8008058:	f04f 37ff 	mov.w	r7, #4294967295
 800805c:	e7f4      	b.n	8008048 <__swbuf_r+0x64>
	...

08008060 <__swsetup_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4b2a      	ldr	r3, [pc, #168]	; (800810c <__swsetup_r+0xac>)
 8008064:	4605      	mov	r5, r0
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	460c      	mov	r4, r1
 800806a:	b118      	cbz	r0, 8008074 <__swsetup_r+0x14>
 800806c:	6a03      	ldr	r3, [r0, #32]
 800806e:	b90b      	cbnz	r3, 8008074 <__swsetup_r+0x14>
 8008070:	f7fd ff82 	bl	8005f78 <__sinit>
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800807a:	0718      	lsls	r0, r3, #28
 800807c:	d422      	bmi.n	80080c4 <__swsetup_r+0x64>
 800807e:	06d9      	lsls	r1, r3, #27
 8008080:	d407      	bmi.n	8008092 <__swsetup_r+0x32>
 8008082:	2309      	movs	r3, #9
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800808a:	81a3      	strh	r3, [r4, #12]
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	e034      	b.n	80080fc <__swsetup_r+0x9c>
 8008092:	0758      	lsls	r0, r3, #29
 8008094:	d512      	bpl.n	80080bc <__swsetup_r+0x5c>
 8008096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008098:	b141      	cbz	r1, 80080ac <__swsetup_r+0x4c>
 800809a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800809e:	4299      	cmp	r1, r3
 80080a0:	d002      	beq.n	80080a8 <__swsetup_r+0x48>
 80080a2:	4628      	mov	r0, r5
 80080a4:	f7fe fefe 	bl	8006ea4 <_free_r>
 80080a8:	2300      	movs	r3, #0
 80080aa:	6363      	str	r3, [r4, #52]	; 0x34
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	2300      	movs	r3, #0
 80080b6:	6063      	str	r3, [r4, #4]
 80080b8:	6923      	ldr	r3, [r4, #16]
 80080ba:	6023      	str	r3, [r4, #0]
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	f043 0308 	orr.w	r3, r3, #8
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	b94b      	cbnz	r3, 80080dc <__swsetup_r+0x7c>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080d2:	d003      	beq.n	80080dc <__swsetup_r+0x7c>
 80080d4:	4621      	mov	r1, r4
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 f884 	bl	80081e4 <__smakebuf_r>
 80080dc:	89a0      	ldrh	r0, [r4, #12]
 80080de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080e2:	f010 0301 	ands.w	r3, r0, #1
 80080e6:	d00a      	beq.n	80080fe <__swsetup_r+0x9e>
 80080e8:	2300      	movs	r3, #0
 80080ea:	60a3      	str	r3, [r4, #8]
 80080ec:	6963      	ldr	r3, [r4, #20]
 80080ee:	425b      	negs	r3, r3
 80080f0:	61a3      	str	r3, [r4, #24]
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	b943      	cbnz	r3, 8008108 <__swsetup_r+0xa8>
 80080f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080fa:	d1c4      	bne.n	8008086 <__swsetup_r+0x26>
 80080fc:	bd38      	pop	{r3, r4, r5, pc}
 80080fe:	0781      	lsls	r1, r0, #30
 8008100:	bf58      	it	pl
 8008102:	6963      	ldrpl	r3, [r4, #20]
 8008104:	60a3      	str	r3, [r4, #8]
 8008106:	e7f4      	b.n	80080f2 <__swsetup_r+0x92>
 8008108:	2000      	movs	r0, #0
 800810a:	e7f7      	b.n	80080fc <__swsetup_r+0x9c>
 800810c:	20000070 	.word	0x20000070

08008110 <_raise_r>:
 8008110:	291f      	cmp	r1, #31
 8008112:	b538      	push	{r3, r4, r5, lr}
 8008114:	4604      	mov	r4, r0
 8008116:	460d      	mov	r5, r1
 8008118:	d904      	bls.n	8008124 <_raise_r+0x14>
 800811a:	2316      	movs	r3, #22
 800811c:	6003      	str	r3, [r0, #0]
 800811e:	f04f 30ff 	mov.w	r0, #4294967295
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008126:	b112      	cbz	r2, 800812e <_raise_r+0x1e>
 8008128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800812c:	b94b      	cbnz	r3, 8008142 <_raise_r+0x32>
 800812e:	4620      	mov	r0, r4
 8008130:	f000 f830 	bl	8008194 <_getpid_r>
 8008134:	462a      	mov	r2, r5
 8008136:	4601      	mov	r1, r0
 8008138:	4620      	mov	r0, r4
 800813a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813e:	f000 b817 	b.w	8008170 <_kill_r>
 8008142:	2b01      	cmp	r3, #1
 8008144:	d00a      	beq.n	800815c <_raise_r+0x4c>
 8008146:	1c59      	adds	r1, r3, #1
 8008148:	d103      	bne.n	8008152 <_raise_r+0x42>
 800814a:	2316      	movs	r3, #22
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	2001      	movs	r0, #1
 8008150:	e7e7      	b.n	8008122 <_raise_r+0x12>
 8008152:	2400      	movs	r4, #0
 8008154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008158:	4628      	mov	r0, r5
 800815a:	4798      	blx	r3
 800815c:	2000      	movs	r0, #0
 800815e:	e7e0      	b.n	8008122 <_raise_r+0x12>

08008160 <raise>:
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <raise+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f7ff bfd3 	b.w	8008110 <_raise_r>
 800816a:	bf00      	nop
 800816c:	20000070 	.word	0x20000070

08008170 <_kill_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	; (8008190 <_kill_r+0x20>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	f7f9 f991 	bl	80014a4 <_kill>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	d102      	bne.n	800818c <_kill_r+0x1c>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	b103      	cbz	r3, 800818c <_kill_r+0x1c>
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	bf00      	nop
 8008190:	20000504 	.word	0x20000504

08008194 <_getpid_r>:
 8008194:	f7f9 b97e 	b.w	8001494 <_getpid>

08008198 <__swhatbuf_r>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	460c      	mov	r4, r1
 800819c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a0:	2900      	cmp	r1, #0
 80081a2:	b096      	sub	sp, #88	; 0x58
 80081a4:	4615      	mov	r5, r2
 80081a6:	461e      	mov	r6, r3
 80081a8:	da0d      	bge.n	80081c6 <__swhatbuf_r+0x2e>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	bf0c      	ite	eq
 80081b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081ba:	2340      	movne	r3, #64	; 0x40
 80081bc:	2000      	movs	r0, #0
 80081be:	6031      	str	r1, [r6, #0]
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	b016      	add	sp, #88	; 0x58
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
 80081c6:	466a      	mov	r2, sp
 80081c8:	f000 f848 	bl	800825c <_fstat_r>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	dbec      	blt.n	80081aa <__swhatbuf_r+0x12>
 80081d0:	9901      	ldr	r1, [sp, #4]
 80081d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081da:	4259      	negs	r1, r3
 80081dc:	4159      	adcs	r1, r3
 80081de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e2:	e7eb      	b.n	80081bc <__swhatbuf_r+0x24>

080081e4 <__smakebuf_r>:
 80081e4:	898b      	ldrh	r3, [r1, #12]
 80081e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081e8:	079d      	lsls	r5, r3, #30
 80081ea:	4606      	mov	r6, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	d507      	bpl.n	8008200 <__smakebuf_r+0x1c>
 80081f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	2301      	movs	r3, #1
 80081fa:	6163      	str	r3, [r4, #20]
 80081fc:	b002      	add	sp, #8
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	ab01      	add	r3, sp, #4
 8008202:	466a      	mov	r2, sp
 8008204:	f7ff ffc8 	bl	8008198 <__swhatbuf_r>
 8008208:	9900      	ldr	r1, [sp, #0]
 800820a:	4605      	mov	r5, r0
 800820c:	4630      	mov	r0, r6
 800820e:	f7fe febd 	bl	8006f8c <_malloc_r>
 8008212:	b948      	cbnz	r0, 8008228 <__smakebuf_r+0x44>
 8008214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008218:	059a      	lsls	r2, r3, #22
 800821a:	d4ef      	bmi.n	80081fc <__smakebuf_r+0x18>
 800821c:	f023 0303 	bic.w	r3, r3, #3
 8008220:	f043 0302 	orr.w	r3, r3, #2
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	e7e3      	b.n	80081f0 <__smakebuf_r+0xc>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	6020      	str	r0, [r4, #0]
 800822c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	9b00      	ldr	r3, [sp, #0]
 8008234:	6163      	str	r3, [r4, #20]
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	6120      	str	r0, [r4, #16]
 800823a:	b15b      	cbz	r3, 8008254 <__smakebuf_r+0x70>
 800823c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f81d 	bl	8008280 <_isatty_r>
 8008246:	b128      	cbz	r0, 8008254 <__smakebuf_r+0x70>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	431d      	orrs	r5, r3
 8008258:	81a5      	strh	r5, [r4, #12]
 800825a:	e7cf      	b.n	80081fc <__smakebuf_r+0x18>

0800825c <_fstat_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4d07      	ldr	r5, [pc, #28]	; (800827c <_fstat_r+0x20>)
 8008260:	2300      	movs	r3, #0
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	4611      	mov	r1, r2
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	f7f9 f97a 	bl	8001562 <_fstat>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	d102      	bne.n	8008278 <_fstat_r+0x1c>
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	b103      	cbz	r3, 8008278 <_fstat_r+0x1c>
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	bd38      	pop	{r3, r4, r5, pc}
 800827a:	bf00      	nop
 800827c:	20000504 	.word	0x20000504

08008280 <_isatty_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d06      	ldr	r5, [pc, #24]	; (800829c <_isatty_r+0x1c>)
 8008284:	2300      	movs	r3, #0
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	602b      	str	r3, [r5, #0]
 800828c:	f7f9 f979 	bl	8001582 <_isatty>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_isatty_r+0x1a>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_isatty_r+0x1a>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	20000504 	.word	0x20000504

080082a0 <_init>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr

080082ac <_fini>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr
