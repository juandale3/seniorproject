/*
 * flow_controller.c
 *
 *  Created on: Dec 17, 2023
 *      Author: Juan Lopez
 */

#include "main.h"
#include "flow_controller.h"

#include <string.h>	// used for UART printing
#include <math.h> 	// used for rounding

// Static Analog Variables	------------------------------------------------//
static const uint8_t maxVoltage = 5;				// Max signal that can be sent from the flow controller
static const float voltageDivider = 10/(10+5.1);	// 10k & 5.1k ohms resistors
static const uint8_t referenceVolt = 1;				// before voltage division. At reference, flow rate is 0
static const uint8_t flowScale = 200;				// Max flow rate we are able to measure through Analog signal
static const float scalingFactor = ((float)(maxVoltage-referenceVolt)/flowScale);

static const float amp = 1.0 + 5.1/10;			// This is how much the OpAmp is increasing the DAC signal from the STM Rf = 10k, Ri = 5.1 k



// Variables
float instFlow = 0;
float unRestrictedFlow = 0;
float flowRestriction = 0.0;




// Pins
// PA0, input pin DI1
static GPIO_InitTypeDef FlowMethodPin = {GPIO_PIN_12, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0};
static GPIO_TypeDef * FlowMethodGroup = GPIOC;
// PA1, input pin DI2
static GPIO_InitTypeDef ContactDI2Pin = {GPIO_PIN_9, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0};
static GPIO_TypeDef * ContactDI2Group = GPIOC;
// PA2, input pin DI3
static GPIO_InitTypeDef ContactDI3Pin = {GPIO_PIN_5, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0};
static GPIO_TypeDef * ContactDI3Group = GPIOA;


// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
	ADC_ChannelConfTypeDef sConfig = {0};

	sConfig.Channel = ADC_CHANNEL_9;
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
	{
	  Error_Handler();
	}
	return;
}
float readFlow(float voltage)
{
	//	/*if(fabs(instFlow - prev) < 0.7){
	//		instFlow = prev;
	//	}
	//	instFlow = roundf(instFlow);*/
	//	return instFlow;
//	instFlow = (voltage - 0.662)/  0.0132;
//	return instFlow;

	instFlow = (voltage/voltageDivider - (float)referenceVolt)/scalingFactor;
	return instFlow;
}

//float setFlowRate(float inputVoltage, uint8_t targetFlowRate){
//
//	readFlow(inputVoltage);
//	unRestrictedFlow = instFlow / (1.0 - flowRestriction);
//	flowRestriction = (float)targetFlowRate / unRestrictedFlow;
//
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;

}

void flowRateMethod(uint8_t method){

	// This is PA_0
	// 0 = "Tri-State"
	// 1 = "Gnd"
//	GPIO_InitTypeDef GPIO_InitStruct = {0};
//	GPIO_InitStruct.Pin = GPIO_PIN_1;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//
//	if(method == 0){
//		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	} else{
//		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	}
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	// This must change
//


	// This needs to be tested
	if(method == 0){
		FlowMethodPin.Mode = GPIO_MODE_INPUT;
	} else{
		FlowMethodPin.Mode = GPIO_MODE_OUTPUT_PP;
	}
	HAL_GPIO_Init(FlowMethodGroup, &FlowMethodPin);

}

void flowRateSP(uint8_t setPoint){
	// test this function
	switch(setPoint){
	case(0):
			ContactDI2Pin.Mode = GPIO_MODE_INPUT;
			ContactDI3Pin.Mode = GPIO_MODE_INPUT;
			HAL_GPIO_Init(ContactDI2Group, &ContactDI2Pin);
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	case(1):
			ContactDI2Pin.Mode = GPIO_MODE_OUTPUT_PP;;
			ContactDI3Pin.Mode = GPIO_MODE_INPUT;
			HAL_GPIO_Init(ContactDI2Group, &ContactDI2Pin);
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	case(2):
			ContactDI2Pin.Mode = GPIO_MODE_INPUT;
			ContactDI3Pin.Mode = GPIO_MODE_OUTPUT_PP;;
			HAL_GPIO_Init(ContactDI2Group, &ContactDI2Pin);
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	case(3):
			ContactDI2Pin.Mode = GPIO_MODE_OUTPUT_PP;
			ContactDI3Pin.Mode = GPIO_MODE_OUTPUT_PP;
			HAL_GPIO_Init(ContactDI2Group, &ContactDI2Pin);
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	default:
			ContactDI2Pin.Mode = GPIO_MODE_INPUT;
			ContactDI3Pin.Mode = GPIO_MODE_INPUT;
			HAL_GPIO_Init(ContactDI2Group, &ContactDI2Pin);
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
return;
}
void flowStateOpen(void){
return;
}
void flowStateControl(void){
return;
}

// Static Functions		------------------------------------------------//

