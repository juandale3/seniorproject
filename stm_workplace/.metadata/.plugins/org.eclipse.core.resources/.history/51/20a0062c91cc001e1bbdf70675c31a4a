/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "flow_controller.h"
#include "project_calls.h"
#include "vacuum_gauge.h"
#include "stepperMotor.h"

#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
  enum State {
      START,
	  VAC_ACHIEVMENT_TEST_INIT,
      VAC_ACHIEVMENT_TEST,
	  WARM_UP_INIT,
      WARM_UP,
      LOAD_TEST_INIT,
	  LOAD_TEST,
      OPERATION_TEST_INIT,
	  OPERATION_TEST,
	  ULTIMATE_MEASURE_TEST_INIT,
      ULTIMATE_MEASURE_TEST,
      IDLE,
      FAIL_STATE,
      STOP
  };
  struct stateVariables {
  	  float vacuumScale;
  	  float flowRate;
  	  char msg[100];
  };
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

DAC_HandleTypeDef hdac;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* Definitions for stateMachine */
osThreadId_t stateMachineHandle;
const osThreadAttr_t stateMachine_attributes = {
  .name = "stateMachine",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for sendData */
osThreadId_t sendDataHandle;
const osThreadAttr_t sendData_attributes = {
  .name = "sendData",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityBelowNormal1,
};
/* USER CODE BEGIN PV */
int tests[10];
int* currentTest = &tests[0];
enum State eNextState = START;
//enum State eNextState = IDLE;

float volts = 0;
float dacVolts = 0;
float FlowRate = 0;
float vacuumScale = 0;
char msg[100];
char mail[100];
char tx_buffer[10] = "Received\n";



static GPIO_TypeDef * solenoidOneGroup = GPIOA;
static uint16_t solenoidOnePin = GPIO_PIN_1;

static GPIO_TypeDef * solenoidTwoGroup = GPIOA;
static uint16_t solenoidTwoPin = GPIO_PIN_2;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_ADC1_Init(void);
static void MX_DAC_Init(void);
static void MX_USART2_UART_Init(void);
void StartDefaultTask(void *argument);
void StartTask02(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END SysInit */



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
  MX_ADC1_Init();
  MX_DAC_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  volts = setFlowRate(0);
  dacSet(&hdac, DAC_CHANNEL_1, volts);



  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);

  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  /*
	  vacuumGaugeADC(&hadc1);
	  volts = adcGet(&hadc1);
	  vacuumScale = readVacuum(volts);
	  sprintf(msg, "Vacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r\n", volts, vacuumScale);
	  printMsg(msg, &huart3);
	  HAL_Delay(1000);
	*/


	  /*
	  flowControllerADC(&hadc1);
	  volts = adcGet(&hadc1);
	  FlowRate = readFlow(volts);
	  sprintf(msg, "Flow Controller\t\tVolts: %.3f V\tFlow Rate:\t%1.0f\tL/min\r\n", volts, FlowRate);
	  printMsg(msg, &huart3);
	  dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(volts, 50));
	  HAL_Delay(1000);
	  */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 38400;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{

  /* USER CODE BEGIN USB_OTG_FS_Init 0 */

  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : DI3_Pin DI2_Pin DI1_Pin */
  GPIO_InitStruct.Pin = DI3_Pin|DI2_Pin|DI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the stateMachine thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(eNextState) {
	  			case START:
					// Needs GUI: What tests need to be perform and in what order
//					VAC_ACHIEVMENT_TEST_INIT,
//					WARM_UP_INIT,
//					LOAD_TEST_INIT,
//					OPERATION_TEST_INIT,
//					ULTIMATE_MEASURE_TEST_INT,

	  				// void listenMsg(int * str, UART_HandleTypeDef *huart2);
	  				sprintf(msg,"STARTING\r\n");
	  				printMsg(msg, &huart3);
	  				osDelay(1000);

					tests[0] = 1;
					tests[1] = 3;
					tests[2] = 5;
					tests[3] = 7;
					tests[4] = 9;
					tests[5] = 11;
					tests[6] = 13;

					eNextState = *currentTest;
	  				break;
	  			case VAC_ACHIEVMENT_TEST_INIT:
//					Parameters needed to perform vacuum test
//					(Step 18) Basically, the pump is turned on, we first time how long it takes to achieve the value on the
//					base pressure sensor.
//					ATS will make sure the make sure the pump reaches 3.0m Torr within 60 minutes. If the time
//					to reach target vacuum pressure goes over 60 minutes, shut pump off.
//
//					Which pump
//					How much mTorr
//					allocated time for this test
//
//					Tasks
//					Task Number One:
//						recieve parameters from GUI
//						Initialization
//						- set timer, target mTorr, assign which pump
//						- open/close solonoids, close flow controller, open stepper motor
	  				osThreadSuspend(sendDataHandle);
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST_INIT\r\n");
	  				printMsg(msg, &huart3);
	  				osDelay(1000);

	  				sprintf(msg,"open/close solenoids, close flow controller, open stepper motor\r\n");
	  				printMsg(msg, &huart3);
	  				osDelay(1000);

	  				flowStateClose();
	  				stepperOpen();
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
	  				vacuumGaugeADC(&hadc1);

	  				eNextState = VAC_ACHIEVMENT_TEST;
	  				break;
	  			case VAC_ACHIEVMENT_TEST:
//	  				monitor status
//	  				- mTorr if mTorr = target, shut pump off, success
//	  				- Timer if Timer > set time, shut pump off, failure
//	  				- if success/failure, send data, remove task two&three, move to next state
	  				volts = adcGet(&hadc1);
//	  				vacuumScale = readVacuum(volts);
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST Scanning\r\n");
	  				printMsg(msg, &huart3);
	  				osThreadResume(sendDataHandle);
	  				osDelay(1000);


	  				vacuumScale = 50.0;
	  				if(vacuumScale >= 50){
		  				sprintf(msg,"vacuum of 50 mTorr reached\r\n");
		  				printMsg(msg, &huart3);
		  				osThreadSuspend(sendDataHandle);
		  				osDelay(1000);
		  				currentTest++;
		  				eNextState = *currentTest;
	  				}
//	  				else if(Timer > 60 minutes){
//	  					test failed
//	  					eNextState = FAIL_STATE;
//	  				}
	  				else{
	  					eNextState = VAC_ACHIEVMENT_TEST;
	  				}

	  				//osDelay(100);

	  				break;
	  			case WARM_UP_INIT:
//					(Step 19) The pump is still running the whole time with no stops, and we then need to measure the
//					temperature externally after the pump has been running for 3 hours and record the pump sensor
//					temperature reading (this could just be a screengrab at the 3-hour mark of the pump status data).
//					Thermocouple sensors will be used and already attached to the pump before step 18.
//					Which pump
//					allocated time for this test
//					Maxuim temputure for this test

//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor
	  				sprintf(msg,"WARM_UP_INIT\r\n");
	  				printMsg(msg, &huart3);
	  				osDelay(1000);

	  				sprintf(msg,"open/close solenoids, open flow controller, open stepper motor\r\n");
	  				printMsg(msg, &huart3);
	  				osDelay(1000);

	  				flowStateOpen();
	  				stepperOpen();
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
	  				vacuumGaugeADC(&hadc1);

	  				eNextState = WARM_UP;
	  				break;
	  			case WARM_UP:
//					- Timer if Timer >= set time, success,
//					- temperature if temp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				float temp = 0;
	  				int timer = 3;
	  				sprintf(msg,"WARM_UP Scanning\r\n");
	  				printMsg(msg, &huart3);
	  				osThreadResume(sendDataHandle);
	  				osDelay(1000);


	  				if(temp > 100){
//	  					test failed
	  					eNextState = FAIL_STATE;
	  				}else if(timer >= 3){
		  				sprintf(msg,"Time is up: success\r\n");
		  				printMsg(msg, &huart3);
		  				currentTest++;
		  				eNextState = *currentTest;
		  				osThreadSuspend(sendDataHandle);
		  				osDelay(1000);
	  				}else{
	  					eNextState = WARM_UP;
	  				}
	  				//osDelay(250);
	  				break;
	  			case LOAD_TEST_INIT:
//					(Step 20) The pump is still running when we start the load test where we add 50slm load to the
//					pump and keep running for 8 hours.
//					During this 8-hour process, the pump shuts off automatically if overheating occurs. The station
//					should display when the pump shuts off.
//					When the pump shuts off, we start step 18 over to the second pump.

//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump, flow load
//					- open/close solonoids, control flow controller, open stepper motor

	  				sprintf(msg,"LOAD_TEST_INIT\r\n");
	  				printMsg(msg, &huart3);
	  				osDelay(1000);

	  				sprintf(msg,"open/close solenoids, control flow controller, open stepper motor\r\n");
	  				printMsg(msg, &huart3);
	  				osDelay(1000);

	  				flowStateControl();
	  				dacVolts = setFlowRate(50);
	  				dacSet(&hdac, DAC_CHANNEL_1, dacVolts);

	  				stepperOpen();
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
	  				flowControllerADC(&hadc1);

	  				eNextState = LOAD_TEST;

	  				break;
	  			case LOAD_TEST:
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- flow rate < flow load, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				temp = 0;
	  				timer = 8;
	  				sprintf(msg,"LOAD_TEST Scanning\r\n");
	  				printMsg(msg, &huart3);
	  				osThreadResume(sendDataHandle);
	  				osDelay(1000);


	  				if(temp > 100){
//	  					test failed
	  					eNextState = FAIL_STATE;
	  				}else if(timer >= 8){
		  				sprintf(msg,"Time is up: success\r\n");
		  				printMsg(msg, &huart3);
		  				currentTest++;
		  				eNextState = *currentTest;
		  				osThreadSuspend(sendDataHandle);
		  				osDelay(1000);
	  				}else{
	  					eNextState = LOAD_TEST;
	  				}

	  				break;
	  			case OPERATION_TEST_INIT:
//					(Step 21) Continue running the pump after the load test for 3-4 hours and take a screen grab of the
//					data.
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor

	  				sprintf(msg,"OPERATION_TEST_INIT\r\n");
	  				printMsg(msg, &huart3);
	  				osDelay(1000);
	  				eNextState = LOAD_TEST;
	  				break;
	  			case OPERATION_TEST:
//					monitor status
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state

	  				sprintf(msg,"OPERATION_TEST\r\n");
	  				printMsg(msg, &huart3);
	  				osThreadResume(sendDataHandle);
	  				osDelay(1000);
	  				osThreadSuspend(sendDataHandle);


	  				currentTest++;
	  				eNextState = *currentTest;

	  				break;
	  			case ULTIMATE_MEASURE_TEST_INIT:
//					(Step 22) The pump is still running, and we need to check the vacuum pressure again like step 18.
//					• ATS will turn on Vacuum gauge once more and measure the ultimate vacuum pressure.
//					Below is proposed design setup for test 18 – 22 where both top inlets of the pump are connected
//					through metal tubing where when one pump goes through a series of test, the opposite solenoid will
//					remain closed.
//					Once Steps 18 –22 are completed, when can move forward with step 23.

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST_INIT\r\n");
	  				printMsg(msg, &huart3);
					osDelay(1000);

	  				eNextState = ULTIMATE_MEASURE_TEST;

	  				break;
	  			case ULTIMATE_MEASURE_TEST:

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST\r\n");
	  				printMsg(msg, &huart3);
	  				osThreadResume(sendDataHandle);
	  				osDelay(1000);
	  				osThreadSuspend(sendDataHandle);

	  				currentTest++;
	  				eNextState = *currentTest;
	  				break;
	  			case FAIL_STATE:
	  				break;
	  			case IDLE:
	  				sprintf(msg,"IDLE %0.3f\r\n", volts);
	  				printMsg(msg, &huart3);
	  				//currentTest++;
	  				//eNextState = *currentTest;
	  				flowRateMethod(0);
	  				osDelay(1000);
	  				eNextState = IDLE;
	  				break;
	  			case STOP:
	  				eNextState = STOP;
	  				HAL_Delay(5000);
	  				break;
	  			default:
	  				eNextState = STOP;
	  }

	  osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTask02 */
/**
* @brief Function implementing the sendData thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */

void StartTask02(void *argument)
{
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	osThreadSuspend(stateMachineHandle);
	HAL_UART_Receive_IT(&huart2, (uint8_t *)msg, 5);


  /* USER CODE END StartTask02 */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart == &huart2)
    {
        // Echo received data back
        HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 20);

        // Start a new receive operation
        HAL_UART_Receive_IT(&huart2, (uint8_t*)msg, 5);
    }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
