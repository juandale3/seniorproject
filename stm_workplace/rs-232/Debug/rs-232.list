
rs-232.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008b60  08008b60  00018b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008ff0  08008ff0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ff0  08008ff0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000002f8  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009605  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018d5  00000000  00000000  0002984c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000748  00000000  00000000  0002b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000057e  00000000  00000000  0002b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b51a  00000000  00000000  0002bdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a80d  00000000  00000000  00047308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009c65a  00000000  00000000  00051b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000033ac  00000000  00000000  000ee170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000f151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b48 	.word	0x08008b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008b48 	.word	0x08008b48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fb90 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f810 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 f8c0 	bl	8000e84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d04:	f000 f88e 	bl	8000e24 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d08:	f000 f85c 	bl	8000dc4 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  accessPumpData(&huart1);
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <main+0x28>)
 8000d0e:	f000 f8e3 	bl	8000ed8 <accessPumpData>
	  HAL_Delay(1000);
 8000d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d16:	f000 fbe7 	bl	80014e8 <HAL_Delay>
	  accessPumpData(&huart1);
 8000d1a:	e7f7      	b.n	8000d0c <main+0x18>
 8000d1c:	200001f0 	.word	0x200001f0

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b096      	sub	sp, #88	; 0x58
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 ff39 	bl	8004ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fe39 	bl	80019e0 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d74:	f000 f8aa 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fe62 	bl	8002a5c <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d9e:	f000 f895 	bl	8000ecc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 f88b 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000db8:	f000 f888 	bl	8000ecc <Error_Handler>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3758      	adds	r7, #88	; 0x58
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <MX_USART1_UART_Init+0x5c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000dd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000df0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000df4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_USART1_UART_Init+0x58>)
 8000e0a:	f002 f983 	bl	8003114 <HAL_UART_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000e14:	f000 f85a 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200001f0 	.word	0x200001f0
 8000e20:	40013800 	.word	0x40013800

08000e24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e2a:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <MX_USART2_UART_Init+0x5c>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e68:	f002 f954 	bl	8003114 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e72:	f000 f82b 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000278 	.word	0x20000278
 8000e80:	40004400 	.word	0x40004400

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_GPIO_Init+0x44>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <MX_GPIO_Init+0x44>)
 8000e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_GPIO_Init+0x44>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_GPIO_Init+0x44>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <MX_GPIO_Init+0x44>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_GPIO_Init+0x44>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <accessPumpData>:
uint8_t tx_frame[TRANSMIT_SIZE];
uint8_t rx_frame[RECEIVE_SIZE];
float analogData[SENSOR_MAX];


void accessPumpData(UART_HandleTypeDef* huart){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	 // Initialize tx_frame with Start of TX (STX)
	tx_frame[0] = STX;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <accessPumpData+0xb0>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	701a      	strb	r2, [r3, #0]

    // TEXT
	// Analog data read command is M20
    memcpy(&tx_frame[1], "M20", 3);	// Assign 'M', '2', '0' at indices 1, 2, 3 using memcpy
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4928      	ldr	r1, [pc, #160]	; (8000f8c <accessPumpData+0xb4>)
 8000eea:	4829      	ldr	r0, [pc, #164]	; (8000f90 <accessPumpData+0xb8>)
 8000eec:	f003 feed 	bl	8004cca <memcpy>
    // Analog data acquisition bits
    tx_frame[4] = '0';
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <accessPumpData+0xb0>)
 8000ef2:	2230      	movs	r2, #48	; 0x30
 8000ef4:	711a      	strb	r2, [r3, #4]
    tx_frame[5] = '0';
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <accessPumpData+0xb0>)
 8000ef8:	2230      	movs	r2, #48	; 0x30
 8000efa:	715a      	strb	r2, [r3, #5]
    tx_frame[6] = '0';
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <accessPumpData+0xb0>)
 8000efe:	2230      	movs	r2, #48	; 0x30
 8000f00:	719a      	strb	r2, [r3, #6]
    tx_frame[7] = '0';
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <accessPumpData+0xb0>)
 8000f04:	2230      	movs	r2, #48	; 0x30
 8000f06:	71da      	strb	r2, [r3, #7]
    tx_frame[8] = '0';
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <accessPumpData+0xb0>)
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	721a      	strb	r2, [r3, #8]
    tx_frame[9] = '0';
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <accessPumpData+0xb0>)
 8000f10:	2230      	movs	r2, #48	; 0x30
 8000f12:	725a      	strb	r2, [r3, #9]
    //tx_frame[10] = '9';
    //tx_frame[11] = convertToAscii(0x0E);
    tx_frame[10] = '0';
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <accessPumpData+0xb0>)
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	729a      	strb	r2, [r3, #10]
    tx_frame[11] = convertToAscii(0x03);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 f83c 	bl	8000f98 <convertToAscii>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <accessPumpData+0xb0>)
 8000f26:	72da      	strb	r2, [r3, #11]
    // End of TX
    tx_frame[12] = ETX;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <accessPumpData+0xb0>)
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	731a      	strb	r2, [r3, #12]

    //checksum
    pumpChecksum();
 8000f2e:	f000 f847 	bl	8000fc0 <pumpChecksum>

    // End of Frame
    tx_frame[15] = CR;
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <accessPumpData+0xb0>)
 8000f34:	220d      	movs	r2, #13
 8000f36:	73da      	strb	r2, [r3, #15]

    uint8_t frameTotal = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	73bb      	strb	r3, [r7, #14]
    uint8_t count = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, &tx_frame[0], TRANSMIT_SIZE, HAL_MAX_DELAY);
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	2210      	movs	r2, #16
 8000f46:	4910      	ldr	r1, [pc, #64]	; (8000f88 <accessPumpData+0xb0>)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f002 f931 	bl	80031b0 <HAL_UART_Transmit>
	while(count < frameTotal){
 8000f4e:	e00c      	b.n	8000f6a <accessPumpData+0x92>
		HAL_UART_Receive(huart, &rx_frame[0], RECEIVE_SIZE, HAL_MAX_DELAY);
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	220e      	movs	r2, #14
 8000f56:	490f      	ldr	r1, [pc, #60]	; (8000f94 <accessPumpData+0xbc>)
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f002 f9b3 	bl	80032c4 <HAL_UART_Receive>
		interpreter(rx_frame);
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <accessPumpData+0xbc>)
 8000f60:	f000 f864 	bl	800102c <interpreter>
		count++;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	3301      	adds	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
	while(count < frameTotal){
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3ee      	bcc.n	8000f50 <accessPumpData+0x78>
	}
	HAL_UART_Receive(huart, &rx_frame[0], END_MESSAGE_SIZE, HAL_MAX_DELAY);
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	2208      	movs	r2, #8
 8000f78:	4906      	ldr	r1, [pc, #24]	; (8000f94 <accessPumpData+0xbc>)
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f002 f9a2 	bl	80032c4 <HAL_UART_Receive>
	return;
 8000f80:	bf00      	nop
}
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000300 	.word	0x20000300
 8000f8c:	08008b60 	.word	0x08008b60
 8000f90:	20000301 	.word	0x20000301
 8000f94:	20000310 	.word	0x20000310

08000f98 <convertToAscii>:

char convertToAscii(char character){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	if((uint8_t) character <= 0x0F){
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d803      	bhi.n	8000fb0 <convertToAscii+0x18>
		return	character + 0x30;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	3330      	adds	r3, #48	; 0x30
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	e000      	b.n	8000fb2 <convertToAscii+0x1a>
	}else{
		return	character;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <pumpChecksum>:

void pumpChecksum(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	uint16_t sum = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i <= 12; i++){
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	e00a      	b.n	8000fe6 <pumpChecksum+0x26>
		sum +=tx_frame[i];
 8000fd0:	4a15      	ldr	r2, [pc, #84]	; (8001028 <pumpChecksum+0x68>)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4413      	add	r3, r2
 8000fde:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i <= 12; i++){
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	ddf1      	ble.n	8000fd0 <pumpChecksum+0x10>
	}
	tx_frame[13] = convertToAscii((sum>>4)&0x000F);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffcc 	bl	8000f98 <convertToAscii>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <pumpChecksum+0x68>)
 8001006:	735a      	strb	r2, [r3, #13]
	tx_frame[14] = convertToAscii(sum&0x000F);
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ffc0 	bl	8000f98 <convertToAscii>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b02      	ldr	r3, [pc, #8]	; (8001028 <pumpChecksum+0x68>)
 800101e:	739a      	strb	r2, [r3, #14]

	return;
 8001020:	bf00      	nop
}
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000300 	.word	0x20000300

0800102c <interpreter>:
uint8_t interpreter(uint8_t * rx_frame){
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	// uint8_t endOfMessage = 0;	// 1 = end of message
	uint8_t ReadCode;

	char ReadStr[3];
	char analogDataStr[8];
	strncpy(ReadStr,(char *)&rx_frame[1], 2);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1c59      	adds	r1, r3, #1
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2202      	movs	r2, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fdb9 	bl	8004bb6 <strncpy>
	ReadStr[2] = '\0';
 8001044:	2300      	movs	r3, #0
 8001046:	75bb      	strb	r3, [r7, #22]

	ReadCode = atoi(ReadStr);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fd4e 	bl	8003aee <atoi>
 8001052:	4603      	mov	r3, r0
 8001054:	75fb      	strb	r3, [r7, #23]
	strncpy(analogDataStr, (char *)&rx_frame[3],7);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1cd9      	adds	r1, r3, #3
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2207      	movs	r2, #7
 8001060:	4618      	mov	r0, r3
 8001062:	f003 fda8 	bl	8004bb6 <strncpy>
	analogDataStr[7] = '\0';
 8001066:	2300      	movs	r3, #0
 8001068:	74fb      	strb	r3, [r7, #19]

	sscanf(analogDataStr, "%f", &analogData[ReadCode]);
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <interpreter+0x5c>)
 8001070:	441a      	add	r2, r3
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4905      	ldr	r1, [pc, #20]	; (800108c <interpreter+0x60>)
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fd23 	bl	8004ac4 <siscanf>
//	case(22):	// Cooler 3
//			break;
//	default:	// An Error or End of Message
//		return 1;
//	}
	return 0;
 800107e:	2300      	movs	r3, #0

}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000320 	.word	0x20000320
 800108c:	08008b64 	.word	0x08008b64

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x44>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_MspInit+0x44>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x44>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x44>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x44>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x44>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a30      	ldr	r2, [pc, #192]	; (80011b8 <HAL_UART_MspInit+0xe0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12a      	bne.n	8001150 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_UART_MspInit+0xe4>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6193      	str	r3, [r2, #24]
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	4a29      	ldr	r2, [pc, #164]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	6153      	str	r3, [r2, #20]
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800112a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113c:	2307      	movs	r3, #7
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f000 fad7 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800114e:	e02e      	b.n	80011ae <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_UART_MspInit+0xe8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d129      	bne.n	80011ae <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_UART_MspInit+0xe4>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_UART_MspInit+0xe4>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800118a:	f248 0304 	movw	r3, #32772	; 0x8004
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119c:	2307      	movs	r3, #7
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f000 faa7 	bl	80016fc <HAL_GPIO_Init>
}
 80011ae:	bf00      	nop
 80011b0:	3730      	adds	r7, #48	; 0x30
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40004400 	.word	0x40004400

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f94a 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return 1;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_kill>:

int _kill(int pid, int sig)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001232:	f003 fd1d 	bl	8004c70 <__errno>
 8001236:	4603      	mov	r3, r0
 8001238:	2216      	movs	r2, #22
 800123a:	601a      	str	r2, [r3, #0]
  return -1;
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_exit>:

void _exit (int status)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffe7 	bl	8001228 <_kill>
  while (1) {}    /* Make sure we hang here */
 800125a:	e7fe      	b.n	800125a <_exit+0x12>

0800125c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e00a      	b.n	8001284 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800126e:	f3af 8000 	nop.w
 8001272:	4601      	mov	r1, r0
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	b2ca      	uxtb	r2, r1
 800127c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf0      	blt.n	800126e <_read+0x12>
  }

  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e009      	b.n	80012bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	60ba      	str	r2, [r7, #8]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf1      	blt.n	80012a8 <_write+0x12>
  }
  return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_close>:

int _close(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f6:	605a      	str	r2, [r3, #4]
  return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_isatty>:

int _isatty(int file)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f003 fc82 	bl	8004c70 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20003000 	.word	0x20003000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000378 	.word	0x20000378
 80013a0:	200004d0 	.word	0x200004d0

080013a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff ffea 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	; (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	; (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 fc41 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7ff fc7b 	bl	8000cf4 <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001400:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800140c:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 8001410:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001414:	200004cc 	.word	0x200004cc

08001418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_2_IRQHandler>
	...

0800141c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_Init+0x28>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_Init+0x28>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f931 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe2a 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40022000 	.word	0x40022000

08001448 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f93b 	bl	80016e2 <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f911 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	2000037c 	.word	0x2000037c

080014d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2000037c 	.word	0x2000037c

080014e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff47 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff5c 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff8e 	bl	80015e8 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffb0 	bl	8001650 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e14e      	b.n	80019aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8140 	beq.w	80019a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d005      	beq.n	800173c <HAL_GPIO_Init+0x40>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d130      	bne.n	800179e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001772:	2201      	movs	r2, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 0201 	and.w	r2, r3, #1
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d017      	beq.n	80017da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d123      	bne.n	800182e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	6939      	ldr	r1, [r7, #16]
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0203 	and.w	r2, r3, #3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 809a 	beq.w	80019a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a54      	ldr	r2, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001888:	4a50      	ldr	r2, [pc, #320]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	220f      	movs	r2, #15
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b2:	d013      	beq.n	80018dc <HAL_GPIO_Init+0x1e0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a46      	ldr	r2, [pc, #280]	; (80019d0 <HAL_GPIO_Init+0x2d4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00d      	beq.n	80018d8 <HAL_GPIO_Init+0x1dc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a45      	ldr	r2, [pc, #276]	; (80019d4 <HAL_GPIO_Init+0x2d8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d007      	beq.n	80018d4 <HAL_GPIO_Init+0x1d8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a44      	ldr	r2, [pc, #272]	; (80019d8 <HAL_GPIO_Init+0x2dc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_GPIO_Init+0x1d4>
 80018cc:	2303      	movs	r3, #3
 80018ce:	e006      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d0:	2305      	movs	r3, #5
 80018d2:	e004      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018dc:	2300      	movs	r3, #0
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ee:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001920:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800194a:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800199e:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f aea9 	bne.w	800170c <HAL_GPIO_Init+0x10>
  }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f001 b823 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 817d 	beq.w	8001d16 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a1c:	4bbc      	ldr	r3, [pc, #752]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d00c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a28:	4bb9      	ldr	r3, [pc, #740]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d15c      	bne.n	8001aee <HAL_RCC_OscConfig+0x10e>
 8001a34:	4bb6      	ldr	r3, [pc, #728]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d155      	bne.n	8001aee <HAL_RCC_OscConfig+0x10e>
 8001a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_RCC_OscConfig+0x94>
 8001a6e:	4ba8      	ldr	r3, [pc, #672]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e015      	b.n	8001aa0 <HAL_RCC_OscConfig+0xc0>
 8001a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a9c:	4b9c      	ldr	r3, [pc, #624]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001aa8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001aac:	fa92 f2a2 	rbit	r2, r2
 8001ab0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ab4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ab8:	fab2 f282 	clz	r2, r2
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	f002 021f 	and.w	r2, r2, #31
 8001ac8:	2101      	movs	r1, #1
 8001aca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 811f 	beq.w	8001d14 <HAL_RCC_OscConfig+0x334>
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 8116 	bne.w	8001d14 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f000 bfaf 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12e>
 8001b00:	4b83      	ldr	r3, [pc, #524]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a82      	ldr	r2, [pc, #520]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e036      	b.n	8001b7c <HAL_RCC_OscConfig+0x19c>
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x158>
 8001b1e:	4b7c      	ldr	r3, [pc, #496]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7b      	ldr	r2, [pc, #492]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b79      	ldr	r3, [pc, #484]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a78      	ldr	r2, [pc, #480]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e021      	b.n	8001b7c <HAL_RCC_OscConfig+0x19c>
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x184>
 8001b4a:	4b71      	ldr	r3, [pc, #452]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a70      	ldr	r2, [pc, #448]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b6e      	ldr	r3, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6d      	ldr	r2, [pc, #436]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0x19c>
 8001b64:	4b6a      	ldr	r3, [pc, #424]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a69      	ldr	r2, [pc, #420]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a66      	ldr	r2, [pc, #408]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f023 020f 	bic.w	r2, r3, #15
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	495f      	ldr	r1, [pc, #380]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d059      	beq.n	8001c5a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fc93 	bl	80014d0 <HAL_GetTick>
 8001baa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fc8e 	bl	80014d0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	; 0x64
 8001bbe:	d902      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f000 bf43 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>
 8001bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001bda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x218>
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e015      	b.n	8001c24 <HAL_RCC_OscConfig+0x244>
 8001bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c10:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c28:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c30:	fa92 f2a2 	rbit	r2, r2
 8001c34:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c3c:	fab2 f282 	clz	r2, r2
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f042 0220 	orr.w	r2, r2, #32
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f002 021f 	and.w	r2, r2, #31
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ab      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x1d0>
 8001c58:	e05d      	b.n	8001d16 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fc39 	bl	80014d0 <HAL_GetTick>
 8001c5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fc34 	bl	80014d0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	; 0x64
 8001c72:	d902      	bls.n	8001c7a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	f000 bee9 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_RCC_OscConfig+0x2cc>
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	e015      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2f8>
 8001cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cc8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_RCC_OscConfig+0x330>)
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cdc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ce0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ce4:	fa92 f2a2 	rbit	r2, r2
 8001ce8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001cec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001cf0:	fab2 f282 	clz	r2, r2
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f042 0220 	orr.w	r2, r2, #32
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f002 021f 	and.w	r2, r2, #31
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ab      	bne.n	8001c64 <HAL_RCC_OscConfig+0x284>
 8001d0c:	e003      	b.n	8001d16 <HAL_RCC_OscConfig+0x336>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 817d 	beq.w	8002026 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d2c:	4ba6      	ldr	r3, [pc, #664]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d38:	4ba3      	ldr	r3, [pc, #652]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d172      	bne.n	8001e2a <HAL_RCC_OscConfig+0x44a>
 8001d44:	4ba0      	ldr	r3, [pc, #640]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d16c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x44a>
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_OscConfig+0x3a0>
 8001d7a:	4b93      	ldr	r3, [pc, #588]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	e013      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c8>
 8001d80:	2302      	movs	r3, #2
 8001d82:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001da4:	4b88      	ldr	r3, [pc, #544]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2202      	movs	r2, #2
 8001daa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001dae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001db2:	fa92 f2a2 	rbit	r2, r2
 8001db6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001dba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001dbe:	fab2 f282 	clz	r2, r2
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	f042 0220 	orr.w	r2, r2, #32
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f002 021f 	and.w	r2, r2, #31
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <HAL_RCC_OscConfig+0x410>
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f000 be2e 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	21f8      	movs	r1, #248	; 0xf8
 8001e06:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e0e:	fa91 f1a1 	rbit	r1, r1
 8001e12:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e16:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e1a:	fab1 f181 	clz	r1, r1
 8001e1e:	b2c9      	uxtb	r1, r1
 8001e20:	408b      	lsls	r3, r1
 8001e22:	4969      	ldr	r1, [pc, #420]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e28:	e0fd      	b.n	8002026 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8088 	beq.w	8001f4c <HAL_RCC_OscConfig+0x56c>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	461a      	mov	r2, r3
 8001e64:	2301      	movs	r3, #1
 8001e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fb32 	bl	80014d0 <HAL_GetTick>
 8001e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff fb2d 	bl	80014d0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d902      	bls.n	8001e88 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f000 bde2 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d102      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4d8>
 8001eb2:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	e013      	b.n	8001ee0 <HAL_RCC_OscConfig+0x500>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ed0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ee6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001eea:	fa92 f2a2 	rbit	r2, r2
 8001eee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ef2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001ef6:	fab2 f282 	clz	r2, r2
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	f042 0220 	orr.w	r2, r2, #32
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	f002 021f 	and.w	r2, r2, #31
 8001f06:	2101      	movs	r1, #1
 8001f08:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0af      	beq.n	8001e72 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	21f8      	movs	r1, #248	; 0xf8
 8001f28:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f30:	fa91 f1a1 	rbit	r1, r1
 8001f34:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f38:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f3c:	fab1 f181 	clz	r1, r1
 8001f40:	b2c9      	uxtb	r1, r1
 8001f42:	408b      	lsls	r3, r1
 8001f44:	4920      	ldr	r1, [pc, #128]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
 8001f4a:	e06c      	b.n	8002026 <HAL_RCC_OscConfig+0x646>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	461a      	mov	r2, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff faaa 	bl	80014d0 <HAL_GetTick>
 8001f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff faa5 	bl	80014d0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d902      	bls.n	8001f98 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	f000 bd5a 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d104      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5ec>
 8001fc2:	4b01      	ldr	r3, [pc, #4]	; (8001fc8 <HAL_RCC_OscConfig+0x5e8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e015      	b.n	8001ff4 <HAL_RCC_OscConfig+0x614>
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001fe4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ff0:	4bc8      	ldr	r3, [pc, #800]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ffa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002006:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ad      	bne.n	8001f82 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8110 	beq.w	800225c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d079      	beq.n	8002140 <HAL_RCC_OscConfig+0x760>
 800204c:	2301      	movs	r3, #1
 800204e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800205e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	4bab      	ldr	r3, [pc, #684]	; (8002318 <HAL_RCC_OscConfig+0x938>)
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	461a      	mov	r2, r3
 8002072:	2301      	movs	r3, #1
 8002074:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7ff fa2b 	bl	80014d0 <HAL_GetTick>
 800207a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff fa26 	bl	80014d0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d902      	bls.n	8002096 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	f000 bcdb 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fa93 f2a3 	rbit	r2, r3
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020d4:	2202      	movs	r2, #2
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f0:	4b88      	ldr	r3, [pc, #544]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 80020f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020fc:	2102      	movs	r1, #2
 80020fe:	6019      	str	r1, [r3, #0]
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f1a3 	rbit	r1, r3
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002116:	6019      	str	r1, [r3, #0]
  return result;
 8002118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0a0      	beq.n	8002080 <HAL_RCC_OscConfig+0x6a0>
 800213e:	e08d      	b.n	800225c <HAL_RCC_OscConfig+0x87c>
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002162:	601a      	str	r2, [r3, #0]
  return result;
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800216c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x938>)
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	461a      	mov	r2, r3
 800217e:	2300      	movs	r3, #0
 8002180:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7ff f9a5 	bl	80014d0 <HAL_GetTick>
 8002186:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218c:	f7ff f9a0 	bl	80014d0 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d902      	bls.n	80021a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	f000 bc55 	b.w	8002a4c <HAL_RCC_OscConfig+0x106c>
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021aa:	2202      	movs	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f2a3 	rbit	r2, r3
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021ce:	2202      	movs	r2, #2
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021f2:	2202      	movs	r2, #2
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800220c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 8002210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800221a:	2102      	movs	r1, #2
 800221c:	6019      	str	r1, [r3, #0]
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fa93 f1a3 	rbit	r1, r3
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002234:	6019      	str	r1, [r3, #0]
  return result;
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d197      	bne.n	800218c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 81a1 	beq.w	80025b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d116      	bne.n	80022b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	61d3      	str	r3, [r2, #28]
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_RCC_OscConfig+0x93c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11a      	bne.n	80022f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_RCC_OscConfig+0x93c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_RCC_OscConfig+0x93c>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ca:	f7ff f901 	bl	80014d0 <HAL_GetTick>
 80022ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	e009      	b.n	80022e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7ff f8fc 	bl	80014d0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	; 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e3b1      	b.n	8002a4c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_RCC_OscConfig+0x93c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ef      	beq.n	80022d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10d      	bne.n	8002320 <HAL_RCC_OscConfig+0x940>
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <HAL_RCC_OscConfig+0x934>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6213      	str	r3, [r2, #32]
 8002310:	e03c      	b.n	800238c <HAL_RCC_OscConfig+0x9ac>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	10908120 	.word	0x10908120
 800231c:	40007000 	.word	0x40007000
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10c      	bne.n	800234a <HAL_RCC_OscConfig+0x96a>
 8002330:	4bc1      	ldr	r3, [pc, #772]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4ac0      	ldr	r2, [pc, #768]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	4bbe      	ldr	r3, [pc, #760]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4abd      	ldr	r2, [pc, #756]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002342:	f023 0304 	bic.w	r3, r3, #4
 8002346:	6213      	str	r3, [r2, #32]
 8002348:	e020      	b.n	800238c <HAL_RCC_OscConfig+0x9ac>
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b05      	cmp	r3, #5
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x994>
 800235a:	4bb7      	ldr	r3, [pc, #732]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4ab6      	ldr	r2, [pc, #728]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6213      	str	r3, [r2, #32]
 8002366:	4bb4      	ldr	r3, [pc, #720]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4ab3      	ldr	r2, [pc, #716]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0x9ac>
 8002374:	4bb0      	ldr	r3, [pc, #704]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4aaf      	ldr	r2, [pc, #700]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	4bad      	ldr	r3, [pc, #692]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4aac      	ldr	r2, [pc, #688]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002386:	f023 0304 	bic.w	r3, r3, #4
 800238a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8081 	beq.w	80024a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7ff f897 	bl	80014d0 <HAL_GetTick>
 80023a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f7ff f892 	bl	80014d0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e345      	b.n	8002a4c <HAL_RCC_OscConfig+0x106c>
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002406:	601a      	str	r2, [r3, #0]
  return result;
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002410:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d102      	bne.n	800242c <HAL_RCC_OscConfig+0xa4c>
 8002426:	4b84      	ldr	r3, [pc, #528]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	e013      	b.n	8002454 <HAL_RCC_OscConfig+0xa74>
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002434:	2202      	movs	r2, #2
 8002436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	4b79      	ldr	r3, [pc, #484]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002458:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800245c:	2102      	movs	r1, #2
 800245e:	6011      	str	r1, [r2, #0]
 8002460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002464:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	fa92 f1a2 	rbit	r1, r2
 800246e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002472:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002476:	6011      	str	r1, [r2, #0]
  return result;
 8002478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800247c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d084      	beq.n	80023a8 <HAL_RCC_OscConfig+0x9c8>
 800249e:	e07f      	b.n	80025a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a0:	f7ff f816 	bl	80014d0 <HAL_GetTick>
 80024a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff f811 	bl	80014d0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e2c4      	b.n	8002a4c <HAL_RCC_OscConfig+0x106c>
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024ca:	2202      	movs	r2, #2
 80024cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024ee:	2202      	movs	r2, #2
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002508:	601a      	str	r2, [r3, #0]
  return result;
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002512:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d102      	bne.n	800252e <HAL_RCC_OscConfig+0xb4e>
 8002528:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	e013      	b.n	8002556 <HAL_RCC_OscConfig+0xb76>
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002536:	2202      	movs	r2, #2
 8002538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	fa93 f2a3 	rbit	r2, r3
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	4b39      	ldr	r3, [pc, #228]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800255a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800255e:	2102      	movs	r1, #2
 8002560:	6011      	str	r1, [r2, #0]
 8002562:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002566:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	fa92 f1a2 	rbit	r1, r2
 8002570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002574:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002578:	6011      	str	r1, [r2, #0]
  return result;
 800257a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	fab2 f282 	clz	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f002 021f 	and.w	r2, r2, #31
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f202 	lsl.w	r2, r1, r2
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d184      	bne.n	80024aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8242 	beq.w	8002a4a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_RCC_OscConfig+0xc58>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	f000 8213 	beq.w	80029fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	f040 8162 	bne.w	80028aa <HAL_RCC_OscConfig+0xeca>
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800260a:	601a      	str	r2, [r3, #0]
  return result;
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002614:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	461a      	mov	r2, r3
 8002628:	2300      	movs	r3, #0
 800262a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe ff50 	bl	80014d0 <HAL_GetTick>
 8002630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002634:	e00c      	b.n	8002650 <HAL_RCC_OscConfig+0xc70>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe ff48 	bl	80014d0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1fd      	b.n	8002a4c <HAL_RCC_OscConfig+0x106c>
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f2a3 	rbit	r2, r3
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002674:	601a      	str	r2, [r3, #0]
  return result;
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800267e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <HAL_RCC_OscConfig+0xcba>
 8002694:	4bb0      	ldr	r3, [pc, #704]	; (8002958 <HAL_RCC_OscConfig+0xf78>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	e027      	b.n	80026ea <HAL_RCC_OscConfig+0xd0a>
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f2a3 	rbit	r2, r3
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	fa93 f2a3 	rbit	r2, r3
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	4b9c      	ldr	r3, [pc, #624]	; (8002958 <HAL_RCC_OscConfig+0xf78>)
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026f6:	6011      	str	r1, [r2, #0]
 80026f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	fa92 f1a2 	rbit	r1, r2
 8002706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800270a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800270e:	6011      	str	r1, [r2, #0]
  return result;
 8002710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002714:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d182      	bne.n	800263c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <HAL_RCC_OscConfig+0xf78>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	430b      	orrs	r3, r1
 8002758:	497f      	ldr	r1, [pc, #508]	; (8002958 <HAL_RCC_OscConfig+0xf78>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002766:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002782:	601a      	str	r2, [r3, #0]
  return result;
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800278c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002798:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	461a      	mov	r2, r3
 80027a0:	2301      	movs	r3, #1
 80027a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe94 	bl	80014d0 <HAL_GetTick>
 80027a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ac:	e009      	b.n	80027c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ae:	f7fe fe8f 	bl	80014d0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e144      	b.n	8002a4c <HAL_RCC_OscConfig+0x106c>
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027e6:	601a      	str	r2, [r3, #0]
  return result;
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0xe2c>
 8002806:	4b54      	ldr	r3, [pc, #336]	; (8002958 <HAL_RCC_OscConfig+0xf78>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e027      	b.n	800285c <HAL_RCC_OscConfig+0xe7c>
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fa93 f2a3 	rbit	r2, r3
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800283a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f2a3 	rbit	r2, r3
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <HAL_RCC_OscConfig+0xf78>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002860:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002864:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002868:	6011      	str	r1, [r2, #0]
 800286a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	fa92 f1a2 	rbit	r1, r2
 8002878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002880:	6011      	str	r1, [r2, #0]
  return result;
 8002882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002886:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	fab2 f282 	clz	r2, r2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f042 0220 	orr.w	r2, r2, #32
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f002 021f 	and.w	r2, r2, #31
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d082      	beq.n	80027ae <HAL_RCC_OscConfig+0xdce>
 80028a8:	e0cf      	b.n	8002a4a <HAL_RCC_OscConfig+0x106a>
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028ce:	601a      	str	r2, [r3, #0]
  return result;
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	461a      	mov	r2, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fdee 	bl	80014d0 <HAL_GetTick>
 80028f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	e009      	b.n	800290e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe fde9 	bl	80014d0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e09e      	b.n	8002a4c <HAL_RCC_OscConfig+0x106c>
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002932:	601a      	str	r2, [r3, #0]
  return result;
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800293c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d104      	bne.n	800295c <HAL_RCC_OscConfig+0xf7c>
 8002952:	4b01      	ldr	r3, [pc, #4]	; (8002958 <HAL_RCC_OscConfig+0xf78>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	e029      	b.n	80029ac <HAL_RCC_OscConfig+0xfcc>
 8002958:	40021000 	.word	0x40021000
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800298a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <HAL_RCC_OscConfig+0x1078>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029b8:	6011      	str	r1, [r2, #0]
 80029ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	fa92 f1a2 	rbit	r1, r2
 80029c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029d0:	6011      	str	r1, [r2, #0]
  return result;
 80029d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f002 021f 	and.w	r2, r2, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f202 	lsl.w	r2, r1, r2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d180      	bne.n	80028fa <HAL_RCC_OscConfig+0xf1a>
 80029f8:	e027      	b.n	8002a4a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e01e      	b.n	8002a4c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCC_OscConfig+0x1078>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d10b      	bne.n	8002a46 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b09e      	sub	sp, #120	; 0x78
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e162      	b.n	8002d3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b90      	ldr	r3, [pc, #576]	; (8002cb8 <HAL_RCC_ClockConfig+0x25c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b8d      	ldr	r3, [pc, #564]	; (8002cb8 <HAL_RCC_ClockConfig+0x25c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	498b      	ldr	r1, [pc, #556]	; (8002cb8 <HAL_RCC_ClockConfig+0x25c>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b89      	ldr	r3, [pc, #548]	; (8002cb8 <HAL_RCC_ClockConfig+0x25c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e14a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b82      	ldr	r3, [pc, #520]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	497f      	ldr	r1, [pc, #508]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80dc 	beq.w	8002c88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d13c      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xf6>
 8002ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002adc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xa6>
 8002afc:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	e00f      	b.n	8002b22 <HAL_RCC_ClockConfig+0xc6>
 8002b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b14:	663b      	str	r3, [r7, #96]	; 0x60
 8002b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b1e:	4b67      	ldr	r3, [pc, #412]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b26:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b2a:	fa92 f2a2 	rbit	r2, r2
 8002b2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b32:	fab2 f282 	clz	r2, r2
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f042 0220 	orr.w	r2, r2, #32
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f002 021f 	and.w	r2, r2, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f202 	lsl.w	r2, r1, r2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d17b      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0f3      	b.n	8002d3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d13c      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x178>
 8002b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x128>
 8002b7e:	4b4f      	ldr	r3, [pc, #316]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x148>
 8002b84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	647b      	str	r3, [r7, #68]	; 0x44
 8002b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
 8002b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f042 0220 	orr.w	r2, r2, #32
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f002 021f 	and.w	r2, r2, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d13a      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b2      	b.n	8002d3a <HAL_RCC_ClockConfig+0x2de>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x1a0>
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	e00d      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1bc>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
 8002c08:	2302      	movs	r3, #2
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2202      	movs	r2, #2
 8002c1a:	61ba      	str	r2, [r7, #24]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	617a      	str	r2, [r7, #20]
  return result;
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	fab2 f282 	clz	r2, r2
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f002 021f 	and.w	r2, r2, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e079      	b.n	8002d3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f023 0203 	bic.w	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	491a      	ldr	r1, [pc, #104]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c58:	f7fe fc3a 	bl	80014d0 <HAL_GetTick>
 8002c5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c60:	f7fe fc36 	bl	80014d0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e061      	b.n	8002d3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 020c 	and.w	r2, r3, #12
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d1eb      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x25c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d214      	bcs.n	8002cc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCC_ClockConfig+0x25c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 0207 	bic.w	r2, r3, #7
 8002c9e:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <HAL_RCC_ClockConfig+0x25c>)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_RCC_ClockConfig+0x25c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e040      	b.n	8002d3a <HAL_RCC_ClockConfig+0x2de>
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_RCC_ClockConfig+0x2e8>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	491a      	ldr	r1, [pc, #104]	; (8002d44 <HAL_RCC_ClockConfig+0x2e8>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_RCC_ClockConfig+0x2e8>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4912      	ldr	r1, [pc, #72]	; (8002d44 <HAL_RCC_ClockConfig+0x2e8>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cfe:	f000 f829 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 8002d02:	4601      	mov	r1, r0
 8002d04:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_RCC_ClockConfig+0x2e8>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0c:	22f0      	movs	r2, #240	; 0xf0
 8002d0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	fa92 f2a2 	rbit	r2, r2
 8002d16:	60fa      	str	r2, [r7, #12]
  return result;
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	fab2 f282 	clz	r2, r2
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	40d3      	lsrs	r3, r2
 8002d22:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x2ec>)
 8002d24:	5cd3      	ldrb	r3, [r2, r3]
 8002d26:	fa21 f303 	lsr.w	r3, r1, r3
 8002d2a:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_RCC_ClockConfig+0x2f0>)
 8002d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_RCC_ClockConfig+0x2f4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fb88 	bl	8001448 <HAL_InitTick>
  
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3778      	adds	r7, #120	; 0x78
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	08008b74 	.word	0x08008b74
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	20000004 	.word	0x20000004

08002d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b08b      	sub	sp, #44	; 0x2c
 8002d58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d002      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x30>
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x36>
 8002d82:	e03c      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d84:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d86:	623b      	str	r3, [r7, #32]
      break;
 8002d88:	e03c      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	fa92 f2a2 	rbit	r2, r2
 8002d9c:	607a      	str	r2, [r7, #4]
  return result;
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	40d3      	lsrs	r3, r2
 8002da8:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002daa:	5cd3      	ldrb	r3, [r2, r3]
 8002dac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	220f      	movs	r2, #15
 8002db8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	fa92 f2a2 	rbit	r2, r2
 8002dc0:	60fa      	str	r2, [r7, #12]
  return result;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	fab2 f282 	clz	r2, r2
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	40d3      	lsrs	r3, r2
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
 8002dec:	e004      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	623b      	str	r3, [r7, #32]
      break;
 8002dfc:	e002      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e00:	623b      	str	r3, [r7, #32]
      break;
 8002e02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e04:	6a3b      	ldr	r3, [r7, #32]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	372c      	adds	r7, #44	; 0x2c
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	007a1200 	.word	0x007a1200
 8002e1c:	08008b8c 	.word	0x08008b8c
 8002e20:	08008b9c 	.word	0x08008b9c
 8002e24:	003d0900 	.word	0x003d0900

08002e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000000 	.word	0x20000000

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e46:	f7ff ffef 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	fa92 f2a2 	rbit	r2, r2
 8002e60:	603a      	str	r2, [r7, #0]
  return result;
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	fab2 f282 	clz	r2, r2
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	40d3      	lsrs	r3, r2
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08008b84 	.word	0x08008b84

08002e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e8a:	f7ff ffcd 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	fa92 f2a2 	rbit	r2, r2
 8002ea4:	603a      	str	r2, [r7, #0]
  return result;
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	fab2 f282 	clz	r2, r2
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	40d3      	lsrs	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08008b84 	.word	0x08008b84

08002ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b092      	sub	sp, #72	; 0x48
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80cd 	beq.w	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eec:	4b86      	ldr	r3, [pc, #536]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10e      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	4a82      	ldr	r2, [pc, #520]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	61d3      	str	r3, [r2, #28]
 8002f04:	4b80      	ldr	r3, [pc, #512]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b7a      	ldr	r3, [pc, #488]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a79      	ldr	r2, [pc, #484]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe facf 	bl	80014d0 <HAL_GetTick>
 8002f32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe facb 	bl	80014d0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0db      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b70      	ldr	r3, [pc, #448]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f54:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d07d      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d076      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f72:	4b65      	ldr	r3, [pc, #404]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b5e      	ldr	r3, [pc, #376]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b55      	ldr	r3, [pc, #340]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fc4:	4a50      	ldr	r2, [pc, #320]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d045      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fa7c 	bl	80014d0 <HAL_GetTick>
 8002fd8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fa78 	bl	80014d0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e086      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	2302      	movs	r3, #2
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	61fb      	str	r3, [r7, #28]
  return result;
 800300a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f043 0302 	orr.w	r3, r3, #2
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d102      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003020:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	e007      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003026:	2302      	movs	r3, #2
 8003028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	4b35      	ldr	r3, [pc, #212]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2202      	movs	r2, #2
 8003038:	613a      	str	r2, [r7, #16]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	fa92 f2a2 	rbit	r2, r2
 8003040:	60fa      	str	r2, [r7, #12]
  return result;
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	fab2 f282 	clz	r2, r2
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	f002 021f 	and.w	r2, r2, #31
 8003054:	2101      	movs	r1, #1
 8003056:	fa01 f202 	lsl.w	r2, r1, r2
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0bd      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003060:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4926      	ldr	r1, [pc, #152]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306e:	4313      	orrs	r3, r2
 8003070:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003072:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307a:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4a22      	ldr	r2, [pc, #136]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003084:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	491a      	ldr	r1, [pc, #104]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	f023 0210 	bic.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4912      	ldr	r1, [pc, #72]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	490b      	ldr	r1, [pc, #44]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3748      	adds	r7, #72	; 0x48
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
 8003110:	10908100 	.word	0x10908100

08003114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e040      	b.n	80031a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd ffce 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f980 	bl	8003458 <UART_SetConfig>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e022      	b.n	80031a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 faaa 	bl	80036c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800317e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800318e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fb31 	bl	8003808 <UART_CheckIdleState>
 80031a6:	4603      	mov	r3, r0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	; 0x28
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d178      	bne.n	80032ba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Transmit+0x24>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e071      	b.n	80032bc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2221      	movs	r2, #33	; 0x21
 80031e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e6:	f7fe f973 	bl	80014d0 <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003204:	d108      	bne.n	8003218 <HAL_UART_Transmit+0x68>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d104      	bne.n	8003218 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	e003      	b.n	8003220 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003220:	e030      	b.n	8003284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb93 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e03c      	b.n	80032bc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	881a      	ldrh	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003254:	b292      	uxth	r2, r2
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	3302      	adds	r3, #2
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	e008      	b.n	8003272 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b292      	uxth	r2, r2
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	3301      	adds	r3, #1
 8003270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1c8      	bne.n	8003222 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2200      	movs	r2, #0
 8003298:	2140      	movs	r1, #64	; 0x40
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fb5c 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e005      	b.n	80032bc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3720      	adds	r7, #32
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032da:	2b20      	cmp	r3, #32
 80032dc:	f040 80b6 	bne.w	800344c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_UART_Receive+0x28>
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0ae      	b.n	800344e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2222      	movs	r2, #34	; 0x22
 80032fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003306:	f7fe f8e3 	bl	80014d0 <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	88fa      	ldrh	r2, [r7, #6]
 8003310:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d10e      	bne.n	8003344 <HAL_UART_Receive+0x80>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <HAL_UART_Receive+0x76>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003334:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003338:	e02d      	b.n	8003396 <HAL_UART_Receive+0xd2>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	22ff      	movs	r2, #255	; 0xff
 800333e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003342:	e028      	b.n	8003396 <HAL_UART_Receive+0xd2>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10d      	bne.n	8003368 <HAL_UART_Receive+0xa4>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_UART_Receive+0x9a>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800335c:	e01b      	b.n	8003396 <HAL_UART_Receive+0xd2>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	227f      	movs	r2, #127	; 0x7f
 8003362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003366:	e016      	b.n	8003396 <HAL_UART_Receive+0xd2>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003370:	d10d      	bne.n	800338e <HAL_UART_Receive+0xca>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <HAL_UART_Receive+0xc0>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	227f      	movs	r2, #127	; 0x7f
 800337e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003382:	e008      	b.n	8003396 <HAL_UART_Receive+0xd2>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	223f      	movs	r2, #63	; 0x3f
 8003388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800338c:	e003      	b.n	8003396 <HAL_UART_Receive+0xd2>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800339c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a6:	d108      	bne.n	80033ba <HAL_UART_Receive+0xf6>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d104      	bne.n	80033ba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e003      	b.n	80033c2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80033c2:	e037      	b.n	8003434 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2120      	movs	r1, #32
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fac2 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e033      	b.n	800344e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10c      	bne.n	8003406 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	8a7b      	ldrh	r3, [r7, #18]
 80033f6:	4013      	ands	r3, r2
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	3302      	adds	r3, #2
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e00d      	b.n	8003422 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800340c:	b29b      	uxth	r3, r3
 800340e:	b2da      	uxtb	r2, r3
 8003410:	8a7b      	ldrh	r3, [r7, #18]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	4013      	ands	r3, r2
 8003416:	b2da      	uxtb	r2, r3
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	3301      	adds	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1c1      	bne.n	80033c4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b8a      	ldr	r3, [pc, #552]	; (80036ac <UART_SetConfig+0x254>)
 8003484:	4013      	ands	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	430b      	orrs	r3, r1
 800348e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a78      	ldr	r2, [pc, #480]	; (80036b0 <UART_SetConfig+0x258>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d120      	bne.n	8003516 <UART_SetConfig+0xbe>
 80034d4:	4b77      	ldr	r3, [pc, #476]	; (80036b4 <UART_SetConfig+0x25c>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d817      	bhi.n	8003510 <UART_SetConfig+0xb8>
 80034e0:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <UART_SetConfig+0x90>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	08003505 	.word	0x08003505
 80034f0:	0800350b 	.word	0x0800350b
 80034f4:	080034ff 	.word	0x080034ff
 80034f8:	2300      	movs	r3, #0
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e01d      	b.n	800353a <UART_SetConfig+0xe2>
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e01a      	b.n	800353a <UART_SetConfig+0xe2>
 8003504:	2304      	movs	r3, #4
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e017      	b.n	800353a <UART_SetConfig+0xe2>
 800350a:	2308      	movs	r3, #8
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e014      	b.n	800353a <UART_SetConfig+0xe2>
 8003510:	2310      	movs	r3, #16
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e011      	b.n	800353a <UART_SetConfig+0xe2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a67      	ldr	r2, [pc, #412]	; (80036b8 <UART_SetConfig+0x260>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d102      	bne.n	8003526 <UART_SetConfig+0xce>
 8003520:	2300      	movs	r3, #0
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e009      	b.n	800353a <UART_SetConfig+0xe2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a64      	ldr	r2, [pc, #400]	; (80036bc <UART_SetConfig+0x264>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d102      	bne.n	8003536 <UART_SetConfig+0xde>
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e001      	b.n	800353a <UART_SetConfig+0xe2>
 8003536:	2310      	movs	r3, #16
 8003538:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003542:	d15a      	bne.n	80035fa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003544:	7ffb      	ldrb	r3, [r7, #31]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d827      	bhi.n	800359a <UART_SetConfig+0x142>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <UART_SetConfig+0xf8>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003575 	.word	0x08003575
 8003554:	0800357d 	.word	0x0800357d
 8003558:	08003585 	.word	0x08003585
 800355c:	0800359b 	.word	0x0800359b
 8003560:	0800358b 	.word	0x0800358b
 8003564:	0800359b 	.word	0x0800359b
 8003568:	0800359b 	.word	0x0800359b
 800356c:	0800359b 	.word	0x0800359b
 8003570:	08003593 	.word	0x08003593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003574:	f7ff fc64 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003578:	61b8      	str	r0, [r7, #24]
        break;
 800357a:	e013      	b.n	80035a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800357c:	f7ff fc82 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 8003580:	61b8      	str	r0, [r7, #24]
        break;
 8003582:	e00f      	b.n	80035a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003584:	4b4e      	ldr	r3, [pc, #312]	; (80036c0 <UART_SetConfig+0x268>)
 8003586:	61bb      	str	r3, [r7, #24]
        break;
 8003588:	e00c      	b.n	80035a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358a:	f7ff fbe3 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 800358e:	61b8      	str	r0, [r7, #24]
        break;
 8003590:	e008      	b.n	80035a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003596:	61bb      	str	r3, [r7, #24]
        break;
 8003598:	e004      	b.n	80035a4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	77bb      	strb	r3, [r7, #30]
        break;
 80035a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d074      	beq.n	8003694 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	005a      	lsls	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	441a      	add	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	d916      	bls.n	80035f4 <UART_SetConfig+0x19c>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d212      	bcs.n	80035f4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f023 030f 	bic.w	r3, r3, #15
 80035d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	89fb      	ldrh	r3, [r7, #14]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	89fa      	ldrh	r2, [r7, #14]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e04f      	b.n	8003694 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	77bb      	strb	r3, [r7, #30]
 80035f8:	e04c      	b.n	8003694 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035fa:	7ffb      	ldrb	r3, [r7, #31]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d828      	bhi.n	8003652 <UART_SetConfig+0x1fa>
 8003600:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0x1b0>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003635 	.word	0x08003635
 8003610:	0800363d 	.word	0x0800363d
 8003614:	08003653 	.word	0x08003653
 8003618:	08003643 	.word	0x08003643
 800361c:	08003653 	.word	0x08003653
 8003620:	08003653 	.word	0x08003653
 8003624:	08003653 	.word	0x08003653
 8003628:	0800364b 	.word	0x0800364b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800362c:	f7ff fc08 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003630:	61b8      	str	r0, [r7, #24]
        break;
 8003632:	e013      	b.n	800365c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003634:	f7ff fc26 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 8003638:	61b8      	str	r0, [r7, #24]
        break;
 800363a:	e00f      	b.n	800365c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <UART_SetConfig+0x268>)
 800363e:	61bb      	str	r3, [r7, #24]
        break;
 8003640:	e00c      	b.n	800365c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7ff fb87 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 8003646:	61b8      	str	r0, [r7, #24]
        break;
 8003648:	e008      	b.n	800365c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	61bb      	str	r3, [r7, #24]
        break;
 8003650:	e004      	b.n	800365c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	77bb      	strb	r3, [r7, #30]
        break;
 800365a:	bf00      	nop
    }

    if (pclk != 0U)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	085a      	lsrs	r2, r3, #1
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	441a      	add	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d909      	bls.n	8003690 <UART_SetConfig+0x238>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003682:	d205      	bcs.n	8003690 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	e001      	b.n	8003694 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	efff69f3 	.word	0xefff69f3
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40004400 	.word	0x40004400
 80036bc:	40004800 	.word	0x40004800
 80036c0:	007a1200 	.word	0x007a1200

080036c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01a      	beq.n	80037da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037c2:	d10a      	bne.n	80037da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
  }
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b098      	sub	sp, #96	; 0x60
 800380c:	af02      	add	r7, sp, #8
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003818:	f7fd fe5a 	bl	80014d0 <HAL_GetTick>
 800381c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b08      	cmp	r3, #8
 800382a:	d12e      	bne.n	800388a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800382c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003834:	2200      	movs	r2, #0
 8003836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f88c 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d021      	beq.n	800388a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385a:	653b      	str	r3, [r7, #80]	; 0x50
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003864:	647b      	str	r3, [r7, #68]	; 0x44
 8003866:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800386a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e6      	bne.n	8003846 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e062      	b.n	8003950 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d149      	bne.n	800392c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a0:	2200      	movs	r2, #0
 80038a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f856 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d03c      	beq.n	800392c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	623b      	str	r3, [r7, #32]
   return(result);
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
 80038d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e6      	bne.n	80038b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3308      	adds	r3, #8
 8003902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003904:	61fa      	str	r2, [r7, #28]
 8003906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	617b      	str	r3, [r7, #20]
   return(result);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e011      	b.n	8003950 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3758      	adds	r7, #88	; 0x58
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003968:	e049      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d045      	beq.n	80039fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fd fdad 	bl	80014d0 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <UART_WaitOnFlagUntilTimeout+0x30>
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e048      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d031      	beq.n	80039fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d110      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2208      	movs	r2, #8
 80039ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f838 	bl	8003a26 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2208      	movs	r2, #8
 80039ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e029      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d8:	d111      	bne.n	80039fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f81e 	bl	8003a26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e00f      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4013      	ands	r3, r2
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d0a6      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b095      	sub	sp, #84	; 0x54
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e6      	bne.n	8003a2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3308      	adds	r3, #8
 8003a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e5      	bne.n	8003a60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d118      	bne.n	8003ace <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f023 0310 	bic.w	r3, r3, #16
 8003ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e6      	bne.n	8003a9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ae2:	bf00      	nop
 8003ae4:	3754      	adds	r7, #84	; 0x54
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <atoi>:
 8003aee:	220a      	movs	r2, #10
 8003af0:	2100      	movs	r1, #0
 8003af2:	f000 b885 	b.w	8003c00 <strtol>
	...

08003af8 <_strtol_l.constprop.0>:
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afe:	d001      	beq.n	8003b04 <_strtol_l.constprop.0+0xc>
 8003b00:	2b24      	cmp	r3, #36	; 0x24
 8003b02:	d906      	bls.n	8003b12 <_strtol_l.constprop.0+0x1a>
 8003b04:	f001 f8b4 	bl	8004c70 <__errno>
 8003b08:	2316      	movs	r3, #22
 8003b0a:	6003      	str	r3, [r0, #0]
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003bf8 <_strtol_l.constprop.0+0x100>
 8003b16:	460d      	mov	r5, r1
 8003b18:	462e      	mov	r6, r5
 8003b1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b1e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003b22:	f017 0708 	ands.w	r7, r7, #8
 8003b26:	d1f7      	bne.n	8003b18 <_strtol_l.constprop.0+0x20>
 8003b28:	2c2d      	cmp	r4, #45	; 0x2d
 8003b2a:	d132      	bne.n	8003b92 <_strtol_l.constprop.0+0x9a>
 8003b2c:	782c      	ldrb	r4, [r5, #0]
 8003b2e:	2701      	movs	r7, #1
 8003b30:	1cb5      	adds	r5, r6, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d05b      	beq.n	8003bee <_strtol_l.constprop.0+0xf6>
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d109      	bne.n	8003b4e <_strtol_l.constprop.0+0x56>
 8003b3a:	2c30      	cmp	r4, #48	; 0x30
 8003b3c:	d107      	bne.n	8003b4e <_strtol_l.constprop.0+0x56>
 8003b3e:	782c      	ldrb	r4, [r5, #0]
 8003b40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003b44:	2c58      	cmp	r4, #88	; 0x58
 8003b46:	d14d      	bne.n	8003be4 <_strtol_l.constprop.0+0xec>
 8003b48:	786c      	ldrb	r4, [r5, #1]
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	3502      	adds	r5, #2
 8003b4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003b52:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b56:	f04f 0e00 	mov.w	lr, #0
 8003b5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8003b5e:	4676      	mov	r6, lr
 8003b60:	fb03 8a19 	mls	sl, r3, r9, r8
 8003b64:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003b68:	f1bc 0f09 	cmp.w	ip, #9
 8003b6c:	d816      	bhi.n	8003b9c <_strtol_l.constprop.0+0xa4>
 8003b6e:	4664      	mov	r4, ip
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	dd24      	ble.n	8003bbe <_strtol_l.constprop.0+0xc6>
 8003b74:	f1be 3fff 	cmp.w	lr, #4294967295
 8003b78:	d008      	beq.n	8003b8c <_strtol_l.constprop.0+0x94>
 8003b7a:	45b1      	cmp	r9, r6
 8003b7c:	d31c      	bcc.n	8003bb8 <_strtol_l.constprop.0+0xc0>
 8003b7e:	d101      	bne.n	8003b84 <_strtol_l.constprop.0+0x8c>
 8003b80:	45a2      	cmp	sl, r4
 8003b82:	db19      	blt.n	8003bb8 <_strtol_l.constprop.0+0xc0>
 8003b84:	fb06 4603 	mla	r6, r6, r3, r4
 8003b88:	f04f 0e01 	mov.w	lr, #1
 8003b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b90:	e7e8      	b.n	8003b64 <_strtol_l.constprop.0+0x6c>
 8003b92:	2c2b      	cmp	r4, #43	; 0x2b
 8003b94:	bf04      	itt	eq
 8003b96:	782c      	ldrbeq	r4, [r5, #0]
 8003b98:	1cb5      	addeq	r5, r6, #2
 8003b9a:	e7ca      	b.n	8003b32 <_strtol_l.constprop.0+0x3a>
 8003b9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003ba0:	f1bc 0f19 	cmp.w	ip, #25
 8003ba4:	d801      	bhi.n	8003baa <_strtol_l.constprop.0+0xb2>
 8003ba6:	3c37      	subs	r4, #55	; 0x37
 8003ba8:	e7e2      	b.n	8003b70 <_strtol_l.constprop.0+0x78>
 8003baa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003bae:	f1bc 0f19 	cmp.w	ip, #25
 8003bb2:	d804      	bhi.n	8003bbe <_strtol_l.constprop.0+0xc6>
 8003bb4:	3c57      	subs	r4, #87	; 0x57
 8003bb6:	e7db      	b.n	8003b70 <_strtol_l.constprop.0+0x78>
 8003bb8:	f04f 3eff 	mov.w	lr, #4294967295
 8003bbc:	e7e6      	b.n	8003b8c <_strtol_l.constprop.0+0x94>
 8003bbe:	f1be 3fff 	cmp.w	lr, #4294967295
 8003bc2:	d105      	bne.n	8003bd0 <_strtol_l.constprop.0+0xd8>
 8003bc4:	2322      	movs	r3, #34	; 0x22
 8003bc6:	6003      	str	r3, [r0, #0]
 8003bc8:	4646      	mov	r6, r8
 8003bca:	b942      	cbnz	r2, 8003bde <_strtol_l.constprop.0+0xe6>
 8003bcc:	4630      	mov	r0, r6
 8003bce:	e79e      	b.n	8003b0e <_strtol_l.constprop.0+0x16>
 8003bd0:	b107      	cbz	r7, 8003bd4 <_strtol_l.constprop.0+0xdc>
 8003bd2:	4276      	negs	r6, r6
 8003bd4:	2a00      	cmp	r2, #0
 8003bd6:	d0f9      	beq.n	8003bcc <_strtol_l.constprop.0+0xd4>
 8003bd8:	f1be 0f00 	cmp.w	lr, #0
 8003bdc:	d000      	beq.n	8003be0 <_strtol_l.constprop.0+0xe8>
 8003bde:	1e69      	subs	r1, r5, #1
 8003be0:	6011      	str	r1, [r2, #0]
 8003be2:	e7f3      	b.n	8003bcc <_strtol_l.constprop.0+0xd4>
 8003be4:	2430      	movs	r4, #48	; 0x30
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1b1      	bne.n	8003b4e <_strtol_l.constprop.0+0x56>
 8003bea:	2308      	movs	r3, #8
 8003bec:	e7af      	b.n	8003b4e <_strtol_l.constprop.0+0x56>
 8003bee:	2c30      	cmp	r4, #48	; 0x30
 8003bf0:	d0a5      	beq.n	8003b3e <_strtol_l.constprop.0+0x46>
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	e7ab      	b.n	8003b4e <_strtol_l.constprop.0+0x56>
 8003bf6:	bf00      	nop
 8003bf8:	08008bad 	.word	0x08008bad

08003bfc <_strtol_r>:
 8003bfc:	f7ff bf7c 	b.w	8003af8 <_strtol_l.constprop.0>

08003c00 <strtol>:
 8003c00:	4613      	mov	r3, r2
 8003c02:	460a      	mov	r2, r1
 8003c04:	4601      	mov	r1, r0
 8003c06:	4802      	ldr	r0, [pc, #8]	; (8003c10 <strtol+0x10>)
 8003c08:	6800      	ldr	r0, [r0, #0]
 8003c0a:	f7ff bf75 	b.w	8003af8 <_strtol_l.constprop.0>
 8003c0e:	bf00      	nop
 8003c10:	20000064 	.word	0x20000064

08003c14 <__cvt>:
 8003c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c18:	ec55 4b10 	vmov	r4, r5, d0
 8003c1c:	2d00      	cmp	r5, #0
 8003c1e:	460e      	mov	r6, r1
 8003c20:	4619      	mov	r1, r3
 8003c22:	462b      	mov	r3, r5
 8003c24:	bfbb      	ittet	lt
 8003c26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003c2a:	461d      	movlt	r5, r3
 8003c2c:	2300      	movge	r3, #0
 8003c2e:	232d      	movlt	r3, #45	; 0x2d
 8003c30:	700b      	strb	r3, [r1, #0]
 8003c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003c38:	4691      	mov	r9, r2
 8003c3a:	f023 0820 	bic.w	r8, r3, #32
 8003c3e:	bfbc      	itt	lt
 8003c40:	4622      	movlt	r2, r4
 8003c42:	4614      	movlt	r4, r2
 8003c44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c48:	d005      	beq.n	8003c56 <__cvt+0x42>
 8003c4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003c4e:	d100      	bne.n	8003c52 <__cvt+0x3e>
 8003c50:	3601      	adds	r6, #1
 8003c52:	2102      	movs	r1, #2
 8003c54:	e000      	b.n	8003c58 <__cvt+0x44>
 8003c56:	2103      	movs	r1, #3
 8003c58:	ab03      	add	r3, sp, #12
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	ab02      	add	r3, sp, #8
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	ec45 4b10 	vmov	d0, r4, r5
 8003c64:	4653      	mov	r3, sl
 8003c66:	4632      	mov	r2, r6
 8003c68:	f001 f8ce 	bl	8004e08 <_dtoa_r>
 8003c6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c70:	4607      	mov	r7, r0
 8003c72:	d102      	bne.n	8003c7a <__cvt+0x66>
 8003c74:	f019 0f01 	tst.w	r9, #1
 8003c78:	d022      	beq.n	8003cc0 <__cvt+0xac>
 8003c7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c7e:	eb07 0906 	add.w	r9, r7, r6
 8003c82:	d110      	bne.n	8003ca6 <__cvt+0x92>
 8003c84:	783b      	ldrb	r3, [r7, #0]
 8003c86:	2b30      	cmp	r3, #48	; 0x30
 8003c88:	d10a      	bne.n	8003ca0 <__cvt+0x8c>
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4620      	mov	r0, r4
 8003c90:	4629      	mov	r1, r5
 8003c92:	f7fc ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c96:	b918      	cbnz	r0, 8003ca0 <__cvt+0x8c>
 8003c98:	f1c6 0601 	rsb	r6, r6, #1
 8003c9c:	f8ca 6000 	str.w	r6, [sl]
 8003ca0:	f8da 3000 	ldr.w	r3, [sl]
 8003ca4:	4499      	add	r9, r3
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4620      	mov	r0, r4
 8003cac:	4629      	mov	r1, r5
 8003cae:	f7fc ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cb2:	b108      	cbz	r0, 8003cb8 <__cvt+0xa4>
 8003cb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cb8:	2230      	movs	r2, #48	; 0x30
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	454b      	cmp	r3, r9
 8003cbe:	d307      	bcc.n	8003cd0 <__cvt+0xbc>
 8003cc0:	9b03      	ldr	r3, [sp, #12]
 8003cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cc4:	1bdb      	subs	r3, r3, r7
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	b004      	add	sp, #16
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	9103      	str	r1, [sp, #12]
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e7f0      	b.n	8003cba <__cvt+0xa6>

08003cd8 <__exponent>:
 8003cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	bfb8      	it	lt
 8003ce0:	4249      	neglt	r1, r1
 8003ce2:	f803 2b02 	strb.w	r2, [r3], #2
 8003ce6:	bfb4      	ite	lt
 8003ce8:	222d      	movlt	r2, #45	; 0x2d
 8003cea:	222b      	movge	r2, #43	; 0x2b
 8003cec:	2909      	cmp	r1, #9
 8003cee:	7042      	strb	r2, [r0, #1]
 8003cf0:	dd2a      	ble.n	8003d48 <__exponent+0x70>
 8003cf2:	f10d 0207 	add.w	r2, sp, #7
 8003cf6:	4617      	mov	r7, r2
 8003cf8:	260a      	movs	r6, #10
 8003cfa:	4694      	mov	ip, r2
 8003cfc:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d00:	fb06 1415 	mls	r4, r6, r5, r1
 8003d04:	3430      	adds	r4, #48	; 0x30
 8003d06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	2c63      	cmp	r4, #99	; 0x63
 8003d0e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003d12:	4629      	mov	r1, r5
 8003d14:	dcf1      	bgt.n	8003cfa <__exponent+0x22>
 8003d16:	3130      	adds	r1, #48	; 0x30
 8003d18:	f1ac 0402 	sub.w	r4, ip, #2
 8003d1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003d20:	1c41      	adds	r1, r0, #1
 8003d22:	4622      	mov	r2, r4
 8003d24:	42ba      	cmp	r2, r7
 8003d26:	d30a      	bcc.n	8003d3e <__exponent+0x66>
 8003d28:	f10d 0209 	add.w	r2, sp, #9
 8003d2c:	eba2 020c 	sub.w	r2, r2, ip
 8003d30:	42bc      	cmp	r4, r7
 8003d32:	bf88      	it	hi
 8003d34:	2200      	movhi	r2, #0
 8003d36:	4413      	add	r3, r2
 8003d38:	1a18      	subs	r0, r3, r0
 8003d3a:	b003      	add	sp, #12
 8003d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003d42:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003d46:	e7ed      	b.n	8003d24 <__exponent+0x4c>
 8003d48:	2330      	movs	r3, #48	; 0x30
 8003d4a:	3130      	adds	r1, #48	; 0x30
 8003d4c:	7083      	strb	r3, [r0, #2]
 8003d4e:	70c1      	strb	r1, [r0, #3]
 8003d50:	1d03      	adds	r3, r0, #4
 8003d52:	e7f1      	b.n	8003d38 <__exponent+0x60>

08003d54 <_printf_float>:
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	ed2d 8b02 	vpush	{d8}
 8003d5c:	b08d      	sub	sp, #52	; 0x34
 8003d5e:	460c      	mov	r4, r1
 8003d60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003d64:	4616      	mov	r6, r2
 8003d66:	461f      	mov	r7, r3
 8003d68:	4605      	mov	r5, r0
 8003d6a:	f000 ff37 	bl	8004bdc <_localeconv_r>
 8003d6e:	f8d0 a000 	ldr.w	sl, [r0]
 8003d72:	4650      	mov	r0, sl
 8003d74:	f7fc fa7c 	bl	8000270 <strlen>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	9305      	str	r3, [sp, #20]
 8003d80:	f8d8 3000 	ldr.w	r3, [r8]
 8003d84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003d88:	3307      	adds	r3, #7
 8003d8a:	f023 0307 	bic.w	r3, r3, #7
 8003d8e:	f103 0208 	add.w	r2, r3, #8
 8003d92:	f8c8 2000 	str.w	r2, [r8]
 8003d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d9e:	9307      	str	r3, [sp, #28]
 8003da0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003da4:	ee08 0a10 	vmov	s16, r0
 8003da8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003dac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003db0:	4b9e      	ldr	r3, [pc, #632]	; (800402c <_printf_float+0x2d8>)
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	f7fc feb9 	bl	8000b2c <__aeabi_dcmpun>
 8003dba:	bb88      	cbnz	r0, 8003e20 <_printf_float+0xcc>
 8003dbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dc0:	4b9a      	ldr	r3, [pc, #616]	; (800402c <_printf_float+0x2d8>)
 8003dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc6:	f7fc fe93 	bl	8000af0 <__aeabi_dcmple>
 8003dca:	bb48      	cbnz	r0, 8003e20 <_printf_float+0xcc>
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2300      	movs	r3, #0
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	f7fc fe82 	bl	8000adc <__aeabi_dcmplt>
 8003dd8:	b110      	cbz	r0, 8003de0 <_printf_float+0x8c>
 8003dda:	232d      	movs	r3, #45	; 0x2d
 8003ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de0:	4a93      	ldr	r2, [pc, #588]	; (8004030 <_printf_float+0x2dc>)
 8003de2:	4b94      	ldr	r3, [pc, #592]	; (8004034 <_printf_float+0x2e0>)
 8003de4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003de8:	bf94      	ite	ls
 8003dea:	4690      	movls	r8, r2
 8003dec:	4698      	movhi	r8, r3
 8003dee:	2303      	movs	r3, #3
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	9b05      	ldr	r3, [sp, #20]
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	f04f 0900 	mov.w	r9, #0
 8003dfe:	9700      	str	r7, [sp, #0]
 8003e00:	4633      	mov	r3, r6
 8003e02:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e04:	4621      	mov	r1, r4
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 f9da 	bl	80041c0 <_printf_common>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	f040 8090 	bne.w	8003f32 <_printf_float+0x1de>
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295
 8003e16:	b00d      	add	sp, #52	; 0x34
 8003e18:	ecbd 8b02 	vpop	{d8}
 8003e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	4640      	mov	r0, r8
 8003e26:	4649      	mov	r1, r9
 8003e28:	f7fc fe80 	bl	8000b2c <__aeabi_dcmpun>
 8003e2c:	b140      	cbz	r0, 8003e40 <_printf_float+0xec>
 8003e2e:	464b      	mov	r3, r9
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bfbc      	itt	lt
 8003e34:	232d      	movlt	r3, #45	; 0x2d
 8003e36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003e3a:	4a7f      	ldr	r2, [pc, #508]	; (8004038 <_printf_float+0x2e4>)
 8003e3c:	4b7f      	ldr	r3, [pc, #508]	; (800403c <_printf_float+0x2e8>)
 8003e3e:	e7d1      	b.n	8003de4 <_printf_float+0x90>
 8003e40:	6863      	ldr	r3, [r4, #4]
 8003e42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003e46:	9206      	str	r2, [sp, #24]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	d13f      	bne.n	8003ecc <_printf_float+0x178>
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	6063      	str	r3, [r4, #4]
 8003e50:	9b05      	ldr	r3, [sp, #20]
 8003e52:	6861      	ldr	r1, [r4, #4]
 8003e54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9303      	str	r3, [sp, #12]
 8003e5c:	ab0a      	add	r3, sp, #40	; 0x28
 8003e5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003e62:	ab09      	add	r3, sp, #36	; 0x24
 8003e64:	ec49 8b10 	vmov	d0, r8, r9
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e70:	4628      	mov	r0, r5
 8003e72:	f7ff fecf 	bl	8003c14 <__cvt>
 8003e76:	9b06      	ldr	r3, [sp, #24]
 8003e78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e7a:	2b47      	cmp	r3, #71	; 0x47
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	d108      	bne.n	8003e92 <_printf_float+0x13e>
 8003e80:	1cc8      	adds	r0, r1, #3
 8003e82:	db02      	blt.n	8003e8a <_printf_float+0x136>
 8003e84:	6863      	ldr	r3, [r4, #4]
 8003e86:	4299      	cmp	r1, r3
 8003e88:	dd41      	ble.n	8003f0e <_printf_float+0x1ba>
 8003e8a:	f1ab 0302 	sub.w	r3, fp, #2
 8003e8e:	fa5f fb83 	uxtb.w	fp, r3
 8003e92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e96:	d820      	bhi.n	8003eda <_printf_float+0x186>
 8003e98:	3901      	subs	r1, #1
 8003e9a:	465a      	mov	r2, fp
 8003e9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ea0:	9109      	str	r1, [sp, #36]	; 0x24
 8003ea2:	f7ff ff19 	bl	8003cd8 <__exponent>
 8003ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ea8:	1813      	adds	r3, r2, r0
 8003eaa:	2a01      	cmp	r2, #1
 8003eac:	4681      	mov	r9, r0
 8003eae:	6123      	str	r3, [r4, #16]
 8003eb0:	dc02      	bgt.n	8003eb8 <_printf_float+0x164>
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	07d2      	lsls	r2, r2, #31
 8003eb6:	d501      	bpl.n	8003ebc <_printf_float+0x168>
 8003eb8:	3301      	adds	r3, #1
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d09c      	beq.n	8003dfe <_printf_float+0xaa>
 8003ec4:	232d      	movs	r3, #45	; 0x2d
 8003ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eca:	e798      	b.n	8003dfe <_printf_float+0xaa>
 8003ecc:	9a06      	ldr	r2, [sp, #24]
 8003ece:	2a47      	cmp	r2, #71	; 0x47
 8003ed0:	d1be      	bne.n	8003e50 <_printf_float+0xfc>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1bc      	bne.n	8003e50 <_printf_float+0xfc>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e7b9      	b.n	8003e4e <_printf_float+0xfa>
 8003eda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003ede:	d118      	bne.n	8003f12 <_printf_float+0x1be>
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	dd0b      	ble.n	8003efe <_printf_float+0x1aa>
 8003ee6:	6121      	str	r1, [r4, #16]
 8003ee8:	b913      	cbnz	r3, 8003ef0 <_printf_float+0x19c>
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	07d0      	lsls	r0, r2, #31
 8003eee:	d502      	bpl.n	8003ef6 <_printf_float+0x1a2>
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	440b      	add	r3, r1
 8003ef4:	6123      	str	r3, [r4, #16]
 8003ef6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ef8:	f04f 0900 	mov.w	r9, #0
 8003efc:	e7de      	b.n	8003ebc <_printf_float+0x168>
 8003efe:	b913      	cbnz	r3, 8003f06 <_printf_float+0x1b2>
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	07d2      	lsls	r2, r2, #31
 8003f04:	d501      	bpl.n	8003f0a <_printf_float+0x1b6>
 8003f06:	3302      	adds	r3, #2
 8003f08:	e7f4      	b.n	8003ef4 <_printf_float+0x1a0>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e7f2      	b.n	8003ef4 <_printf_float+0x1a0>
 8003f0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f14:	4299      	cmp	r1, r3
 8003f16:	db05      	blt.n	8003f24 <_printf_float+0x1d0>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	6121      	str	r1, [r4, #16]
 8003f1c:	07d8      	lsls	r0, r3, #31
 8003f1e:	d5ea      	bpl.n	8003ef6 <_printf_float+0x1a2>
 8003f20:	1c4b      	adds	r3, r1, #1
 8003f22:	e7e7      	b.n	8003ef4 <_printf_float+0x1a0>
 8003f24:	2900      	cmp	r1, #0
 8003f26:	bfd4      	ite	le
 8003f28:	f1c1 0202 	rsble	r2, r1, #2
 8003f2c:	2201      	movgt	r2, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	e7e0      	b.n	8003ef4 <_printf_float+0x1a0>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	055a      	lsls	r2, r3, #21
 8003f36:	d407      	bmi.n	8003f48 <_printf_float+0x1f4>
 8003f38:	6923      	ldr	r3, [r4, #16]
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	4628      	mov	r0, r5
 8003f40:	47b8      	blx	r7
 8003f42:	3001      	adds	r0, #1
 8003f44:	d12c      	bne.n	8003fa0 <_printf_float+0x24c>
 8003f46:	e764      	b.n	8003e12 <_printf_float+0xbe>
 8003f48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f4c:	f240 80e0 	bls.w	8004110 <_printf_float+0x3bc>
 8003f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f54:	2200      	movs	r2, #0
 8003f56:	2300      	movs	r3, #0
 8003f58:	f7fc fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d034      	beq.n	8003fca <_printf_float+0x276>
 8003f60:	4a37      	ldr	r2, [pc, #220]	; (8004040 <_printf_float+0x2ec>)
 8003f62:	2301      	movs	r3, #1
 8003f64:	4631      	mov	r1, r6
 8003f66:	4628      	mov	r0, r5
 8003f68:	47b8      	blx	r7
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	f43f af51 	beq.w	8003e12 <_printf_float+0xbe>
 8003f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f74:	429a      	cmp	r2, r3
 8003f76:	db02      	blt.n	8003f7e <_printf_float+0x22a>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	07d8      	lsls	r0, r3, #31
 8003f7c:	d510      	bpl.n	8003fa0 <_printf_float+0x24c>
 8003f7e:	ee18 3a10 	vmov	r3, s16
 8003f82:	4652      	mov	r2, sl
 8003f84:	4631      	mov	r1, r6
 8003f86:	4628      	mov	r0, r5
 8003f88:	47b8      	blx	r7
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	f43f af41 	beq.w	8003e12 <_printf_float+0xbe>
 8003f90:	f04f 0800 	mov.w	r8, #0
 8003f94:	f104 091a 	add.w	r9, r4, #26
 8003f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	4543      	cmp	r3, r8
 8003f9e:	dc09      	bgt.n	8003fb4 <_printf_float+0x260>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	079b      	lsls	r3, r3, #30
 8003fa4:	f100 8107 	bmi.w	80041b6 <_printf_float+0x462>
 8003fa8:	68e0      	ldr	r0, [r4, #12]
 8003faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fac:	4298      	cmp	r0, r3
 8003fae:	bfb8      	it	lt
 8003fb0:	4618      	movlt	r0, r3
 8003fb2:	e730      	b.n	8003e16 <_printf_float+0xc2>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	464a      	mov	r2, r9
 8003fb8:	4631      	mov	r1, r6
 8003fba:	4628      	mov	r0, r5
 8003fbc:	47b8      	blx	r7
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	f43f af27 	beq.w	8003e12 <_printf_float+0xbe>
 8003fc4:	f108 0801 	add.w	r8, r8, #1
 8003fc8:	e7e6      	b.n	8003f98 <_printf_float+0x244>
 8003fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	dc39      	bgt.n	8004044 <_printf_float+0x2f0>
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <_printf_float+0x2ec>)
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	47b8      	blx	r7
 8003fda:	3001      	adds	r0, #1
 8003fdc:	f43f af19 	beq.w	8003e12 <_printf_float+0xbe>
 8003fe0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	d102      	bne.n	8003fee <_printf_float+0x29a>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	07d9      	lsls	r1, r3, #31
 8003fec:	d5d8      	bpl.n	8003fa0 <_printf_float+0x24c>
 8003fee:	ee18 3a10 	vmov	r3, s16
 8003ff2:	4652      	mov	r2, sl
 8003ff4:	4631      	mov	r1, r6
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	47b8      	blx	r7
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	f43f af09 	beq.w	8003e12 <_printf_float+0xbe>
 8004000:	f04f 0900 	mov.w	r9, #0
 8004004:	f104 0a1a 	add.w	sl, r4, #26
 8004008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800400a:	425b      	negs	r3, r3
 800400c:	454b      	cmp	r3, r9
 800400e:	dc01      	bgt.n	8004014 <_printf_float+0x2c0>
 8004010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004012:	e792      	b.n	8003f3a <_printf_float+0x1e6>
 8004014:	2301      	movs	r3, #1
 8004016:	4652      	mov	r2, sl
 8004018:	4631      	mov	r1, r6
 800401a:	4628      	mov	r0, r5
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	f43f aef7 	beq.w	8003e12 <_printf_float+0xbe>
 8004024:	f109 0901 	add.w	r9, r9, #1
 8004028:	e7ee      	b.n	8004008 <_printf_float+0x2b4>
 800402a:	bf00      	nop
 800402c:	7fefffff 	.word	0x7fefffff
 8004030:	08008cad 	.word	0x08008cad
 8004034:	08008cb1 	.word	0x08008cb1
 8004038:	08008cb5 	.word	0x08008cb5
 800403c:	08008cb9 	.word	0x08008cb9
 8004040:	08008f47 	.word	0x08008f47
 8004044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004046:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004048:	429a      	cmp	r2, r3
 800404a:	bfa8      	it	ge
 800404c:	461a      	movge	r2, r3
 800404e:	2a00      	cmp	r2, #0
 8004050:	4691      	mov	r9, r2
 8004052:	dc37      	bgt.n	80040c4 <_printf_float+0x370>
 8004054:	f04f 0b00 	mov.w	fp, #0
 8004058:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800405c:	f104 021a 	add.w	r2, r4, #26
 8004060:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004062:	9305      	str	r3, [sp, #20]
 8004064:	eba3 0309 	sub.w	r3, r3, r9
 8004068:	455b      	cmp	r3, fp
 800406a:	dc33      	bgt.n	80040d4 <_printf_float+0x380>
 800406c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004070:	429a      	cmp	r2, r3
 8004072:	db3b      	blt.n	80040ec <_printf_float+0x398>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	07da      	lsls	r2, r3, #31
 8004078:	d438      	bmi.n	80040ec <_printf_float+0x398>
 800407a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800407e:	eba2 0903 	sub.w	r9, r2, r3
 8004082:	9b05      	ldr	r3, [sp, #20]
 8004084:	1ad2      	subs	r2, r2, r3
 8004086:	4591      	cmp	r9, r2
 8004088:	bfa8      	it	ge
 800408a:	4691      	movge	r9, r2
 800408c:	f1b9 0f00 	cmp.w	r9, #0
 8004090:	dc35      	bgt.n	80040fe <_printf_float+0x3aa>
 8004092:	f04f 0800 	mov.w	r8, #0
 8004096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800409a:	f104 0a1a 	add.w	sl, r4, #26
 800409e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	eba3 0309 	sub.w	r3, r3, r9
 80040a8:	4543      	cmp	r3, r8
 80040aa:	f77f af79 	ble.w	8003fa0 <_printf_float+0x24c>
 80040ae:	2301      	movs	r3, #1
 80040b0:	4652      	mov	r2, sl
 80040b2:	4631      	mov	r1, r6
 80040b4:	4628      	mov	r0, r5
 80040b6:	47b8      	blx	r7
 80040b8:	3001      	adds	r0, #1
 80040ba:	f43f aeaa 	beq.w	8003e12 <_printf_float+0xbe>
 80040be:	f108 0801 	add.w	r8, r8, #1
 80040c2:	e7ec      	b.n	800409e <_printf_float+0x34a>
 80040c4:	4613      	mov	r3, r2
 80040c6:	4631      	mov	r1, r6
 80040c8:	4642      	mov	r2, r8
 80040ca:	4628      	mov	r0, r5
 80040cc:	47b8      	blx	r7
 80040ce:	3001      	adds	r0, #1
 80040d0:	d1c0      	bne.n	8004054 <_printf_float+0x300>
 80040d2:	e69e      	b.n	8003e12 <_printf_float+0xbe>
 80040d4:	2301      	movs	r3, #1
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	9205      	str	r2, [sp, #20]
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	f43f ae97 	beq.w	8003e12 <_printf_float+0xbe>
 80040e4:	9a05      	ldr	r2, [sp, #20]
 80040e6:	f10b 0b01 	add.w	fp, fp, #1
 80040ea:	e7b9      	b.n	8004060 <_printf_float+0x30c>
 80040ec:	ee18 3a10 	vmov	r3, s16
 80040f0:	4652      	mov	r2, sl
 80040f2:	4631      	mov	r1, r6
 80040f4:	4628      	mov	r0, r5
 80040f6:	47b8      	blx	r7
 80040f8:	3001      	adds	r0, #1
 80040fa:	d1be      	bne.n	800407a <_printf_float+0x326>
 80040fc:	e689      	b.n	8003e12 <_printf_float+0xbe>
 80040fe:	9a05      	ldr	r2, [sp, #20]
 8004100:	464b      	mov	r3, r9
 8004102:	4442      	add	r2, r8
 8004104:	4631      	mov	r1, r6
 8004106:	4628      	mov	r0, r5
 8004108:	47b8      	blx	r7
 800410a:	3001      	adds	r0, #1
 800410c:	d1c1      	bne.n	8004092 <_printf_float+0x33e>
 800410e:	e680      	b.n	8003e12 <_printf_float+0xbe>
 8004110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004112:	2a01      	cmp	r2, #1
 8004114:	dc01      	bgt.n	800411a <_printf_float+0x3c6>
 8004116:	07db      	lsls	r3, r3, #31
 8004118:	d53a      	bpl.n	8004190 <_printf_float+0x43c>
 800411a:	2301      	movs	r3, #1
 800411c:	4642      	mov	r2, r8
 800411e:	4631      	mov	r1, r6
 8004120:	4628      	mov	r0, r5
 8004122:	47b8      	blx	r7
 8004124:	3001      	adds	r0, #1
 8004126:	f43f ae74 	beq.w	8003e12 <_printf_float+0xbe>
 800412a:	ee18 3a10 	vmov	r3, s16
 800412e:	4652      	mov	r2, sl
 8004130:	4631      	mov	r1, r6
 8004132:	4628      	mov	r0, r5
 8004134:	47b8      	blx	r7
 8004136:	3001      	adds	r0, #1
 8004138:	f43f ae6b 	beq.w	8003e12 <_printf_float+0xbe>
 800413c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004140:	2200      	movs	r2, #0
 8004142:	2300      	movs	r3, #0
 8004144:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004148:	f7fc fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800414c:	b9d8      	cbnz	r0, 8004186 <_printf_float+0x432>
 800414e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004152:	f108 0201 	add.w	r2, r8, #1
 8004156:	4631      	mov	r1, r6
 8004158:	4628      	mov	r0, r5
 800415a:	47b8      	blx	r7
 800415c:	3001      	adds	r0, #1
 800415e:	d10e      	bne.n	800417e <_printf_float+0x42a>
 8004160:	e657      	b.n	8003e12 <_printf_float+0xbe>
 8004162:	2301      	movs	r3, #1
 8004164:	4652      	mov	r2, sl
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	47b8      	blx	r7
 800416c:	3001      	adds	r0, #1
 800416e:	f43f ae50 	beq.w	8003e12 <_printf_float+0xbe>
 8004172:	f108 0801 	add.w	r8, r8, #1
 8004176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	4543      	cmp	r3, r8
 800417c:	dcf1      	bgt.n	8004162 <_printf_float+0x40e>
 800417e:	464b      	mov	r3, r9
 8004180:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004184:	e6da      	b.n	8003f3c <_printf_float+0x1e8>
 8004186:	f04f 0800 	mov.w	r8, #0
 800418a:	f104 0a1a 	add.w	sl, r4, #26
 800418e:	e7f2      	b.n	8004176 <_printf_float+0x422>
 8004190:	2301      	movs	r3, #1
 8004192:	4642      	mov	r2, r8
 8004194:	e7df      	b.n	8004156 <_printf_float+0x402>
 8004196:	2301      	movs	r3, #1
 8004198:	464a      	mov	r2, r9
 800419a:	4631      	mov	r1, r6
 800419c:	4628      	mov	r0, r5
 800419e:	47b8      	blx	r7
 80041a0:	3001      	adds	r0, #1
 80041a2:	f43f ae36 	beq.w	8003e12 <_printf_float+0xbe>
 80041a6:	f108 0801 	add.w	r8, r8, #1
 80041aa:	68e3      	ldr	r3, [r4, #12]
 80041ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041ae:	1a5b      	subs	r3, r3, r1
 80041b0:	4543      	cmp	r3, r8
 80041b2:	dcf0      	bgt.n	8004196 <_printf_float+0x442>
 80041b4:	e6f8      	b.n	8003fa8 <_printf_float+0x254>
 80041b6:	f04f 0800 	mov.w	r8, #0
 80041ba:	f104 0919 	add.w	r9, r4, #25
 80041be:	e7f4      	b.n	80041aa <_printf_float+0x456>

080041c0 <_printf_common>:
 80041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	4616      	mov	r6, r2
 80041c6:	4699      	mov	r9, r3
 80041c8:	688a      	ldr	r2, [r1, #8]
 80041ca:	690b      	ldr	r3, [r1, #16]
 80041cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bfb8      	it	lt
 80041d4:	4613      	movlt	r3, r2
 80041d6:	6033      	str	r3, [r6, #0]
 80041d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041dc:	4607      	mov	r7, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b10a      	cbz	r2, 80041e6 <_printf_common+0x26>
 80041e2:	3301      	adds	r3, #1
 80041e4:	6033      	str	r3, [r6, #0]
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	0699      	lsls	r1, r3, #26
 80041ea:	bf42      	ittt	mi
 80041ec:	6833      	ldrmi	r3, [r6, #0]
 80041ee:	3302      	addmi	r3, #2
 80041f0:	6033      	strmi	r3, [r6, #0]
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	f015 0506 	ands.w	r5, r5, #6
 80041f8:	d106      	bne.n	8004208 <_printf_common+0x48>
 80041fa:	f104 0a19 	add.w	sl, r4, #25
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	6832      	ldr	r2, [r6, #0]
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	42ab      	cmp	r3, r5
 8004206:	dc26      	bgt.n	8004256 <_printf_common+0x96>
 8004208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800420c:	1e13      	subs	r3, r2, #0
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	bf18      	it	ne
 8004212:	2301      	movne	r3, #1
 8004214:	0692      	lsls	r2, r2, #26
 8004216:	d42b      	bmi.n	8004270 <_printf_common+0xb0>
 8004218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800421c:	4649      	mov	r1, r9
 800421e:	4638      	mov	r0, r7
 8004220:	47c0      	blx	r8
 8004222:	3001      	adds	r0, #1
 8004224:	d01e      	beq.n	8004264 <_printf_common+0xa4>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	f003 0306 	and.w	r3, r3, #6
 800422e:	2b04      	cmp	r3, #4
 8004230:	bf02      	ittt	eq
 8004232:	68e5      	ldreq	r5, [r4, #12]
 8004234:	6833      	ldreq	r3, [r6, #0]
 8004236:	1aed      	subeq	r5, r5, r3
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	bf0c      	ite	eq
 800423c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004240:	2500      	movne	r5, #0
 8004242:	4293      	cmp	r3, r2
 8004244:	bfc4      	itt	gt
 8004246:	1a9b      	subgt	r3, r3, r2
 8004248:	18ed      	addgt	r5, r5, r3
 800424a:	2600      	movs	r6, #0
 800424c:	341a      	adds	r4, #26
 800424e:	42b5      	cmp	r5, r6
 8004250:	d11a      	bne.n	8004288 <_printf_common+0xc8>
 8004252:	2000      	movs	r0, #0
 8004254:	e008      	b.n	8004268 <_printf_common+0xa8>
 8004256:	2301      	movs	r3, #1
 8004258:	4652      	mov	r2, sl
 800425a:	4649      	mov	r1, r9
 800425c:	4638      	mov	r0, r7
 800425e:	47c0      	blx	r8
 8004260:	3001      	adds	r0, #1
 8004262:	d103      	bne.n	800426c <_printf_common+0xac>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	3501      	adds	r5, #1
 800426e:	e7c6      	b.n	80041fe <_printf_common+0x3e>
 8004270:	18e1      	adds	r1, r4, r3
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	2030      	movs	r0, #48	; 0x30
 8004276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800427a:	4422      	add	r2, r4
 800427c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004284:	3302      	adds	r3, #2
 8004286:	e7c7      	b.n	8004218 <_printf_common+0x58>
 8004288:	2301      	movs	r3, #1
 800428a:	4622      	mov	r2, r4
 800428c:	4649      	mov	r1, r9
 800428e:	4638      	mov	r0, r7
 8004290:	47c0      	blx	r8
 8004292:	3001      	adds	r0, #1
 8004294:	d0e6      	beq.n	8004264 <_printf_common+0xa4>
 8004296:	3601      	adds	r6, #1
 8004298:	e7d9      	b.n	800424e <_printf_common+0x8e>
	...

0800429c <_printf_i>:
 800429c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	7e0f      	ldrb	r7, [r1, #24]
 80042a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042a4:	2f78      	cmp	r7, #120	; 0x78
 80042a6:	4691      	mov	r9, r2
 80042a8:	4680      	mov	r8, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	469a      	mov	sl, r3
 80042ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042b2:	d807      	bhi.n	80042c4 <_printf_i+0x28>
 80042b4:	2f62      	cmp	r7, #98	; 0x62
 80042b6:	d80a      	bhi.n	80042ce <_printf_i+0x32>
 80042b8:	2f00      	cmp	r7, #0
 80042ba:	f000 80d4 	beq.w	8004466 <_printf_i+0x1ca>
 80042be:	2f58      	cmp	r7, #88	; 0x58
 80042c0:	f000 80c0 	beq.w	8004444 <_printf_i+0x1a8>
 80042c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042cc:	e03a      	b.n	8004344 <_printf_i+0xa8>
 80042ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042d2:	2b15      	cmp	r3, #21
 80042d4:	d8f6      	bhi.n	80042c4 <_printf_i+0x28>
 80042d6:	a101      	add	r1, pc, #4	; (adr r1, 80042dc <_printf_i+0x40>)
 80042d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042dc:	08004335 	.word	0x08004335
 80042e0:	08004349 	.word	0x08004349
 80042e4:	080042c5 	.word	0x080042c5
 80042e8:	080042c5 	.word	0x080042c5
 80042ec:	080042c5 	.word	0x080042c5
 80042f0:	080042c5 	.word	0x080042c5
 80042f4:	08004349 	.word	0x08004349
 80042f8:	080042c5 	.word	0x080042c5
 80042fc:	080042c5 	.word	0x080042c5
 8004300:	080042c5 	.word	0x080042c5
 8004304:	080042c5 	.word	0x080042c5
 8004308:	0800444d 	.word	0x0800444d
 800430c:	08004375 	.word	0x08004375
 8004310:	08004407 	.word	0x08004407
 8004314:	080042c5 	.word	0x080042c5
 8004318:	080042c5 	.word	0x080042c5
 800431c:	0800446f 	.word	0x0800446f
 8004320:	080042c5 	.word	0x080042c5
 8004324:	08004375 	.word	0x08004375
 8004328:	080042c5 	.word	0x080042c5
 800432c:	080042c5 	.word	0x080042c5
 8004330:	0800440f 	.word	0x0800440f
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	602a      	str	r2, [r5, #0]
 800433c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004344:	2301      	movs	r3, #1
 8004346:	e09f      	b.n	8004488 <_printf_i+0x1ec>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	682b      	ldr	r3, [r5, #0]
 800434c:	0607      	lsls	r7, r0, #24
 800434e:	f103 0104 	add.w	r1, r3, #4
 8004352:	6029      	str	r1, [r5, #0]
 8004354:	d501      	bpl.n	800435a <_printf_i+0xbe>
 8004356:	681e      	ldr	r6, [r3, #0]
 8004358:	e003      	b.n	8004362 <_printf_i+0xc6>
 800435a:	0646      	lsls	r6, r0, #25
 800435c:	d5fb      	bpl.n	8004356 <_printf_i+0xba>
 800435e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004362:	2e00      	cmp	r6, #0
 8004364:	da03      	bge.n	800436e <_printf_i+0xd2>
 8004366:	232d      	movs	r3, #45	; 0x2d
 8004368:	4276      	negs	r6, r6
 800436a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800436e:	485a      	ldr	r0, [pc, #360]	; (80044d8 <_printf_i+0x23c>)
 8004370:	230a      	movs	r3, #10
 8004372:	e012      	b.n	800439a <_printf_i+0xfe>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	1d19      	adds	r1, r3, #4
 800437a:	6029      	str	r1, [r5, #0]
 800437c:	0605      	lsls	r5, r0, #24
 800437e:	d501      	bpl.n	8004384 <_printf_i+0xe8>
 8004380:	681e      	ldr	r6, [r3, #0]
 8004382:	e002      	b.n	800438a <_printf_i+0xee>
 8004384:	0641      	lsls	r1, r0, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0xe4>
 8004388:	881e      	ldrh	r6, [r3, #0]
 800438a:	4853      	ldr	r0, [pc, #332]	; (80044d8 <_printf_i+0x23c>)
 800438c:	2f6f      	cmp	r7, #111	; 0x6f
 800438e:	bf0c      	ite	eq
 8004390:	2308      	moveq	r3, #8
 8004392:	230a      	movne	r3, #10
 8004394:	2100      	movs	r1, #0
 8004396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800439a:	6865      	ldr	r5, [r4, #4]
 800439c:	60a5      	str	r5, [r4, #8]
 800439e:	2d00      	cmp	r5, #0
 80043a0:	bfa2      	ittt	ge
 80043a2:	6821      	ldrge	r1, [r4, #0]
 80043a4:	f021 0104 	bicge.w	r1, r1, #4
 80043a8:	6021      	strge	r1, [r4, #0]
 80043aa:	b90e      	cbnz	r6, 80043b0 <_printf_i+0x114>
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	d04b      	beq.n	8004448 <_printf_i+0x1ac>
 80043b0:	4615      	mov	r5, r2
 80043b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80043b6:	fb03 6711 	mls	r7, r3, r1, r6
 80043ba:	5dc7      	ldrb	r7, [r0, r7]
 80043bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043c0:	4637      	mov	r7, r6
 80043c2:	42bb      	cmp	r3, r7
 80043c4:	460e      	mov	r6, r1
 80043c6:	d9f4      	bls.n	80043b2 <_printf_i+0x116>
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d10b      	bne.n	80043e4 <_printf_i+0x148>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	07de      	lsls	r6, r3, #31
 80043d0:	d508      	bpl.n	80043e4 <_printf_i+0x148>
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	6861      	ldr	r1, [r4, #4]
 80043d6:	4299      	cmp	r1, r3
 80043d8:	bfde      	ittt	le
 80043da:	2330      	movle	r3, #48	; 0x30
 80043dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043e4:	1b52      	subs	r2, r2, r5
 80043e6:	6122      	str	r2, [r4, #16]
 80043e8:	f8cd a000 	str.w	sl, [sp]
 80043ec:	464b      	mov	r3, r9
 80043ee:	aa03      	add	r2, sp, #12
 80043f0:	4621      	mov	r1, r4
 80043f2:	4640      	mov	r0, r8
 80043f4:	f7ff fee4 	bl	80041c0 <_printf_common>
 80043f8:	3001      	adds	r0, #1
 80043fa:	d14a      	bne.n	8004492 <_printf_i+0x1f6>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	b004      	add	sp, #16
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	f043 0320 	orr.w	r3, r3, #32
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	4833      	ldr	r0, [pc, #204]	; (80044dc <_printf_i+0x240>)
 8004410:	2778      	movs	r7, #120	; 0x78
 8004412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	6829      	ldr	r1, [r5, #0]
 800441a:	061f      	lsls	r7, r3, #24
 800441c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004420:	d402      	bmi.n	8004428 <_printf_i+0x18c>
 8004422:	065f      	lsls	r7, r3, #25
 8004424:	bf48      	it	mi
 8004426:	b2b6      	uxthmi	r6, r6
 8004428:	07df      	lsls	r7, r3, #31
 800442a:	bf48      	it	mi
 800442c:	f043 0320 	orrmi.w	r3, r3, #32
 8004430:	6029      	str	r1, [r5, #0]
 8004432:	bf48      	it	mi
 8004434:	6023      	strmi	r3, [r4, #0]
 8004436:	b91e      	cbnz	r6, 8004440 <_printf_i+0x1a4>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	f023 0320 	bic.w	r3, r3, #32
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	2310      	movs	r3, #16
 8004442:	e7a7      	b.n	8004394 <_printf_i+0xf8>
 8004444:	4824      	ldr	r0, [pc, #144]	; (80044d8 <_printf_i+0x23c>)
 8004446:	e7e4      	b.n	8004412 <_printf_i+0x176>
 8004448:	4615      	mov	r5, r2
 800444a:	e7bd      	b.n	80043c8 <_printf_i+0x12c>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	6826      	ldr	r6, [r4, #0]
 8004450:	6961      	ldr	r1, [r4, #20]
 8004452:	1d18      	adds	r0, r3, #4
 8004454:	6028      	str	r0, [r5, #0]
 8004456:	0635      	lsls	r5, r6, #24
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	d501      	bpl.n	8004460 <_printf_i+0x1c4>
 800445c:	6019      	str	r1, [r3, #0]
 800445e:	e002      	b.n	8004466 <_printf_i+0x1ca>
 8004460:	0670      	lsls	r0, r6, #25
 8004462:	d5fb      	bpl.n	800445c <_printf_i+0x1c0>
 8004464:	8019      	strh	r1, [r3, #0]
 8004466:	2300      	movs	r3, #0
 8004468:	6123      	str	r3, [r4, #16]
 800446a:	4615      	mov	r5, r2
 800446c:	e7bc      	b.n	80043e8 <_printf_i+0x14c>
 800446e:	682b      	ldr	r3, [r5, #0]
 8004470:	1d1a      	adds	r2, r3, #4
 8004472:	602a      	str	r2, [r5, #0]
 8004474:	681d      	ldr	r5, [r3, #0]
 8004476:	6862      	ldr	r2, [r4, #4]
 8004478:	2100      	movs	r1, #0
 800447a:	4628      	mov	r0, r5
 800447c:	f7fb fea8 	bl	80001d0 <memchr>
 8004480:	b108      	cbz	r0, 8004486 <_printf_i+0x1ea>
 8004482:	1b40      	subs	r0, r0, r5
 8004484:	6060      	str	r0, [r4, #4]
 8004486:	6863      	ldr	r3, [r4, #4]
 8004488:	6123      	str	r3, [r4, #16]
 800448a:	2300      	movs	r3, #0
 800448c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004490:	e7aa      	b.n	80043e8 <_printf_i+0x14c>
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	462a      	mov	r2, r5
 8004496:	4649      	mov	r1, r9
 8004498:	4640      	mov	r0, r8
 800449a:	47d0      	blx	sl
 800449c:	3001      	adds	r0, #1
 800449e:	d0ad      	beq.n	80043fc <_printf_i+0x160>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	079b      	lsls	r3, r3, #30
 80044a4:	d413      	bmi.n	80044ce <_printf_i+0x232>
 80044a6:	68e0      	ldr	r0, [r4, #12]
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	4298      	cmp	r0, r3
 80044ac:	bfb8      	it	lt
 80044ae:	4618      	movlt	r0, r3
 80044b0:	e7a6      	b.n	8004400 <_printf_i+0x164>
 80044b2:	2301      	movs	r3, #1
 80044b4:	4632      	mov	r2, r6
 80044b6:	4649      	mov	r1, r9
 80044b8:	4640      	mov	r0, r8
 80044ba:	47d0      	blx	sl
 80044bc:	3001      	adds	r0, #1
 80044be:	d09d      	beq.n	80043fc <_printf_i+0x160>
 80044c0:	3501      	adds	r5, #1
 80044c2:	68e3      	ldr	r3, [r4, #12]
 80044c4:	9903      	ldr	r1, [sp, #12]
 80044c6:	1a5b      	subs	r3, r3, r1
 80044c8:	42ab      	cmp	r3, r5
 80044ca:	dcf2      	bgt.n	80044b2 <_printf_i+0x216>
 80044cc:	e7eb      	b.n	80044a6 <_printf_i+0x20a>
 80044ce:	2500      	movs	r5, #0
 80044d0:	f104 0619 	add.w	r6, r4, #25
 80044d4:	e7f5      	b.n	80044c2 <_printf_i+0x226>
 80044d6:	bf00      	nop
 80044d8:	08008cbd 	.word	0x08008cbd
 80044dc:	08008cce 	.word	0x08008cce

080044e0 <_scanf_float>:
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	b087      	sub	sp, #28
 80044e6:	4617      	mov	r7, r2
 80044e8:	9303      	str	r3, [sp, #12]
 80044ea:	688b      	ldr	r3, [r1, #8]
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80044f2:	bf83      	ittte	hi
 80044f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80044f8:	195b      	addhi	r3, r3, r5
 80044fa:	9302      	strhi	r3, [sp, #8]
 80044fc:	2300      	movls	r3, #0
 80044fe:	bf86      	itte	hi
 8004500:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004504:	608b      	strhi	r3, [r1, #8]
 8004506:	9302      	strls	r3, [sp, #8]
 8004508:	680b      	ldr	r3, [r1, #0]
 800450a:	468b      	mov	fp, r1
 800450c:	2500      	movs	r5, #0
 800450e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004512:	f84b 3b1c 	str.w	r3, [fp], #28
 8004516:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800451a:	4680      	mov	r8, r0
 800451c:	460c      	mov	r4, r1
 800451e:	465e      	mov	r6, fp
 8004520:	46aa      	mov	sl, r5
 8004522:	46a9      	mov	r9, r5
 8004524:	9501      	str	r5, [sp, #4]
 8004526:	68a2      	ldr	r2, [r4, #8]
 8004528:	b152      	cbz	r2, 8004540 <_scanf_float+0x60>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b4e      	cmp	r3, #78	; 0x4e
 8004530:	d864      	bhi.n	80045fc <_scanf_float+0x11c>
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d83c      	bhi.n	80045b0 <_scanf_float+0xd0>
 8004536:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800453a:	b2c8      	uxtb	r0, r1
 800453c:	280e      	cmp	r0, #14
 800453e:	d93a      	bls.n	80045b6 <_scanf_float+0xd6>
 8004540:	f1b9 0f00 	cmp.w	r9, #0
 8004544:	d003      	beq.n	800454e <_scanf_float+0x6e>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004552:	f1ba 0f01 	cmp.w	sl, #1
 8004556:	f200 8113 	bhi.w	8004780 <_scanf_float+0x2a0>
 800455a:	455e      	cmp	r6, fp
 800455c:	f200 8105 	bhi.w	800476a <_scanf_float+0x28a>
 8004560:	2501      	movs	r5, #1
 8004562:	4628      	mov	r0, r5
 8004564:	b007      	add	sp, #28
 8004566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800456e:	2a0d      	cmp	r2, #13
 8004570:	d8e6      	bhi.n	8004540 <_scanf_float+0x60>
 8004572:	a101      	add	r1, pc, #4	; (adr r1, 8004578 <_scanf_float+0x98>)
 8004574:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004578:	080046b7 	.word	0x080046b7
 800457c:	08004541 	.word	0x08004541
 8004580:	08004541 	.word	0x08004541
 8004584:	08004541 	.word	0x08004541
 8004588:	08004717 	.word	0x08004717
 800458c:	080046ef 	.word	0x080046ef
 8004590:	08004541 	.word	0x08004541
 8004594:	08004541 	.word	0x08004541
 8004598:	080046c5 	.word	0x080046c5
 800459c:	08004541 	.word	0x08004541
 80045a0:	08004541 	.word	0x08004541
 80045a4:	08004541 	.word	0x08004541
 80045a8:	08004541 	.word	0x08004541
 80045ac:	0800467d 	.word	0x0800467d
 80045b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80045b4:	e7db      	b.n	800456e <_scanf_float+0x8e>
 80045b6:	290e      	cmp	r1, #14
 80045b8:	d8c2      	bhi.n	8004540 <_scanf_float+0x60>
 80045ba:	a001      	add	r0, pc, #4	; (adr r0, 80045c0 <_scanf_float+0xe0>)
 80045bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80045c0:	0800466f 	.word	0x0800466f
 80045c4:	08004541 	.word	0x08004541
 80045c8:	0800466f 	.word	0x0800466f
 80045cc:	08004703 	.word	0x08004703
 80045d0:	08004541 	.word	0x08004541
 80045d4:	0800461d 	.word	0x0800461d
 80045d8:	08004659 	.word	0x08004659
 80045dc:	08004659 	.word	0x08004659
 80045e0:	08004659 	.word	0x08004659
 80045e4:	08004659 	.word	0x08004659
 80045e8:	08004659 	.word	0x08004659
 80045ec:	08004659 	.word	0x08004659
 80045f0:	08004659 	.word	0x08004659
 80045f4:	08004659 	.word	0x08004659
 80045f8:	08004659 	.word	0x08004659
 80045fc:	2b6e      	cmp	r3, #110	; 0x6e
 80045fe:	d809      	bhi.n	8004614 <_scanf_float+0x134>
 8004600:	2b60      	cmp	r3, #96	; 0x60
 8004602:	d8b2      	bhi.n	800456a <_scanf_float+0x8a>
 8004604:	2b54      	cmp	r3, #84	; 0x54
 8004606:	d077      	beq.n	80046f8 <_scanf_float+0x218>
 8004608:	2b59      	cmp	r3, #89	; 0x59
 800460a:	d199      	bne.n	8004540 <_scanf_float+0x60>
 800460c:	2d07      	cmp	r5, #7
 800460e:	d197      	bne.n	8004540 <_scanf_float+0x60>
 8004610:	2508      	movs	r5, #8
 8004612:	e029      	b.n	8004668 <_scanf_float+0x188>
 8004614:	2b74      	cmp	r3, #116	; 0x74
 8004616:	d06f      	beq.n	80046f8 <_scanf_float+0x218>
 8004618:	2b79      	cmp	r3, #121	; 0x79
 800461a:	e7f6      	b.n	800460a <_scanf_float+0x12a>
 800461c:	6821      	ldr	r1, [r4, #0]
 800461e:	05c8      	lsls	r0, r1, #23
 8004620:	d51a      	bpl.n	8004658 <_scanf_float+0x178>
 8004622:	9b02      	ldr	r3, [sp, #8]
 8004624:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004628:	6021      	str	r1, [r4, #0]
 800462a:	f109 0901 	add.w	r9, r9, #1
 800462e:	b11b      	cbz	r3, 8004638 <_scanf_float+0x158>
 8004630:	3b01      	subs	r3, #1
 8004632:	3201      	adds	r2, #1
 8004634:	9302      	str	r3, [sp, #8]
 8004636:	60a2      	str	r2, [r4, #8]
 8004638:	68a3      	ldr	r3, [r4, #8]
 800463a:	3b01      	subs	r3, #1
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	6923      	ldr	r3, [r4, #16]
 8004640:	3301      	adds	r3, #1
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	f340 8084 	ble.w	8004758 <_scanf_float+0x278>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	e766      	b.n	8004526 <_scanf_float+0x46>
 8004658:	eb1a 0f05 	cmn.w	sl, r5
 800465c:	f47f af70 	bne.w	8004540 <_scanf_float+0x60>
 8004660:	6822      	ldr	r2, [r4, #0]
 8004662:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004666:	6022      	str	r2, [r4, #0]
 8004668:	f806 3b01 	strb.w	r3, [r6], #1
 800466c:	e7e4      	b.n	8004638 <_scanf_float+0x158>
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	0610      	lsls	r0, r2, #24
 8004672:	f57f af65 	bpl.w	8004540 <_scanf_float+0x60>
 8004676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800467a:	e7f4      	b.n	8004666 <_scanf_float+0x186>
 800467c:	f1ba 0f00 	cmp.w	sl, #0
 8004680:	d10e      	bne.n	80046a0 <_scanf_float+0x1c0>
 8004682:	f1b9 0f00 	cmp.w	r9, #0
 8004686:	d10e      	bne.n	80046a6 <_scanf_float+0x1c6>
 8004688:	6822      	ldr	r2, [r4, #0]
 800468a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800468e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004692:	d108      	bne.n	80046a6 <_scanf_float+0x1c6>
 8004694:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004698:	6022      	str	r2, [r4, #0]
 800469a:	f04f 0a01 	mov.w	sl, #1
 800469e:	e7e3      	b.n	8004668 <_scanf_float+0x188>
 80046a0:	f1ba 0f02 	cmp.w	sl, #2
 80046a4:	d055      	beq.n	8004752 <_scanf_float+0x272>
 80046a6:	2d01      	cmp	r5, #1
 80046a8:	d002      	beq.n	80046b0 <_scanf_float+0x1d0>
 80046aa:	2d04      	cmp	r5, #4
 80046ac:	f47f af48 	bne.w	8004540 <_scanf_float+0x60>
 80046b0:	3501      	adds	r5, #1
 80046b2:	b2ed      	uxtb	r5, r5
 80046b4:	e7d8      	b.n	8004668 <_scanf_float+0x188>
 80046b6:	f1ba 0f01 	cmp.w	sl, #1
 80046ba:	f47f af41 	bne.w	8004540 <_scanf_float+0x60>
 80046be:	f04f 0a02 	mov.w	sl, #2
 80046c2:	e7d1      	b.n	8004668 <_scanf_float+0x188>
 80046c4:	b97d      	cbnz	r5, 80046e6 <_scanf_float+0x206>
 80046c6:	f1b9 0f00 	cmp.w	r9, #0
 80046ca:	f47f af3c 	bne.w	8004546 <_scanf_float+0x66>
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80046d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80046d8:	f47f af39 	bne.w	800454e <_scanf_float+0x6e>
 80046dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	2501      	movs	r5, #1
 80046e4:	e7c0      	b.n	8004668 <_scanf_float+0x188>
 80046e6:	2d03      	cmp	r5, #3
 80046e8:	d0e2      	beq.n	80046b0 <_scanf_float+0x1d0>
 80046ea:	2d05      	cmp	r5, #5
 80046ec:	e7de      	b.n	80046ac <_scanf_float+0x1cc>
 80046ee:	2d02      	cmp	r5, #2
 80046f0:	f47f af26 	bne.w	8004540 <_scanf_float+0x60>
 80046f4:	2503      	movs	r5, #3
 80046f6:	e7b7      	b.n	8004668 <_scanf_float+0x188>
 80046f8:	2d06      	cmp	r5, #6
 80046fa:	f47f af21 	bne.w	8004540 <_scanf_float+0x60>
 80046fe:	2507      	movs	r5, #7
 8004700:	e7b2      	b.n	8004668 <_scanf_float+0x188>
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	0591      	lsls	r1, r2, #22
 8004706:	f57f af1b 	bpl.w	8004540 <_scanf_float+0x60>
 800470a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	f8cd 9004 	str.w	r9, [sp, #4]
 8004714:	e7a8      	b.n	8004668 <_scanf_float+0x188>
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800471c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004720:	d006      	beq.n	8004730 <_scanf_float+0x250>
 8004722:	0550      	lsls	r0, r2, #21
 8004724:	f57f af0c 	bpl.w	8004540 <_scanf_float+0x60>
 8004728:	f1b9 0f00 	cmp.w	r9, #0
 800472c:	f43f af0f 	beq.w	800454e <_scanf_float+0x6e>
 8004730:	0591      	lsls	r1, r2, #22
 8004732:	bf58      	it	pl
 8004734:	9901      	ldrpl	r1, [sp, #4]
 8004736:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800473a:	bf58      	it	pl
 800473c:	eba9 0101 	subpl.w	r1, r9, r1
 8004740:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004744:	bf58      	it	pl
 8004746:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800474a:	6022      	str	r2, [r4, #0]
 800474c:	f04f 0900 	mov.w	r9, #0
 8004750:	e78a      	b.n	8004668 <_scanf_float+0x188>
 8004752:	f04f 0a03 	mov.w	sl, #3
 8004756:	e787      	b.n	8004668 <_scanf_float+0x188>
 8004758:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800475c:	4639      	mov	r1, r7
 800475e:	4640      	mov	r0, r8
 8004760:	4798      	blx	r3
 8004762:	2800      	cmp	r0, #0
 8004764:	f43f aedf 	beq.w	8004526 <_scanf_float+0x46>
 8004768:	e6ea      	b.n	8004540 <_scanf_float+0x60>
 800476a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800476e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004772:	463a      	mov	r2, r7
 8004774:	4640      	mov	r0, r8
 8004776:	4798      	blx	r3
 8004778:	6923      	ldr	r3, [r4, #16]
 800477a:	3b01      	subs	r3, #1
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	e6ec      	b.n	800455a <_scanf_float+0x7a>
 8004780:	1e6b      	subs	r3, r5, #1
 8004782:	2b06      	cmp	r3, #6
 8004784:	d825      	bhi.n	80047d2 <_scanf_float+0x2f2>
 8004786:	2d02      	cmp	r5, #2
 8004788:	d836      	bhi.n	80047f8 <_scanf_float+0x318>
 800478a:	455e      	cmp	r6, fp
 800478c:	f67f aee8 	bls.w	8004560 <_scanf_float+0x80>
 8004790:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004794:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004798:	463a      	mov	r2, r7
 800479a:	4640      	mov	r0, r8
 800479c:	4798      	blx	r3
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	e7f1      	b.n	800478a <_scanf_float+0x2aa>
 80047a6:	9802      	ldr	r0, [sp, #8]
 80047a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80047b0:	9002      	str	r0, [sp, #8]
 80047b2:	463a      	mov	r2, r7
 80047b4:	4640      	mov	r0, r8
 80047b6:	4798      	blx	r3
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047c2:	fa5f fa8a 	uxtb.w	sl, sl
 80047c6:	f1ba 0f02 	cmp.w	sl, #2
 80047ca:	d1ec      	bne.n	80047a6 <_scanf_float+0x2c6>
 80047cc:	3d03      	subs	r5, #3
 80047ce:	b2ed      	uxtb	r5, r5
 80047d0:	1b76      	subs	r6, r6, r5
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	05da      	lsls	r2, r3, #23
 80047d6:	d52f      	bpl.n	8004838 <_scanf_float+0x358>
 80047d8:	055b      	lsls	r3, r3, #21
 80047da:	d510      	bpl.n	80047fe <_scanf_float+0x31e>
 80047dc:	455e      	cmp	r6, fp
 80047de:	f67f aebf 	bls.w	8004560 <_scanf_float+0x80>
 80047e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047ea:	463a      	mov	r2, r7
 80047ec:	4640      	mov	r0, r8
 80047ee:	4798      	blx	r3
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	6123      	str	r3, [r4, #16]
 80047f6:	e7f1      	b.n	80047dc <_scanf_float+0x2fc>
 80047f8:	46aa      	mov	sl, r5
 80047fa:	9602      	str	r6, [sp, #8]
 80047fc:	e7df      	b.n	80047be <_scanf_float+0x2de>
 80047fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	2965      	cmp	r1, #101	; 0x65
 8004806:	f103 33ff 	add.w	r3, r3, #4294967295
 800480a:	f106 35ff 	add.w	r5, r6, #4294967295
 800480e:	6123      	str	r3, [r4, #16]
 8004810:	d00c      	beq.n	800482c <_scanf_float+0x34c>
 8004812:	2945      	cmp	r1, #69	; 0x45
 8004814:	d00a      	beq.n	800482c <_scanf_float+0x34c>
 8004816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800481a:	463a      	mov	r2, r7
 800481c:	4640      	mov	r0, r8
 800481e:	4798      	blx	r3
 8004820:	6923      	ldr	r3, [r4, #16]
 8004822:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004826:	3b01      	subs	r3, #1
 8004828:	1eb5      	subs	r5, r6, #2
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004830:	463a      	mov	r2, r7
 8004832:	4640      	mov	r0, r8
 8004834:	4798      	blx	r3
 8004836:	462e      	mov	r6, r5
 8004838:	6825      	ldr	r5, [r4, #0]
 800483a:	f015 0510 	ands.w	r5, r5, #16
 800483e:	d158      	bne.n	80048f2 <_scanf_float+0x412>
 8004840:	7035      	strb	r5, [r6, #0]
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d11c      	bne.n	8004888 <_scanf_float+0x3a8>
 800484e:	9b01      	ldr	r3, [sp, #4]
 8004850:	454b      	cmp	r3, r9
 8004852:	eba3 0209 	sub.w	r2, r3, r9
 8004856:	d124      	bne.n	80048a2 <_scanf_float+0x3c2>
 8004858:	2200      	movs	r2, #0
 800485a:	4659      	mov	r1, fp
 800485c:	4640      	mov	r0, r8
 800485e:	f002 fc7f 	bl	8007160 <_strtod_r>
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	6821      	ldr	r1, [r4, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f011 0f02 	tst.w	r1, #2
 800486c:	ec57 6b10 	vmov	r6, r7, d0
 8004870:	f103 0204 	add.w	r2, r3, #4
 8004874:	d020      	beq.n	80048b8 <_scanf_float+0x3d8>
 8004876:	9903      	ldr	r1, [sp, #12]
 8004878:	600a      	str	r2, [r1, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	e9c3 6700 	strd	r6, r7, [r3]
 8004880:	68e3      	ldr	r3, [r4, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60e3      	str	r3, [r4, #12]
 8004886:	e66c      	b.n	8004562 <_scanf_float+0x82>
 8004888:	9b04      	ldr	r3, [sp, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0e4      	beq.n	8004858 <_scanf_float+0x378>
 800488e:	9905      	ldr	r1, [sp, #20]
 8004890:	230a      	movs	r3, #10
 8004892:	462a      	mov	r2, r5
 8004894:	3101      	adds	r1, #1
 8004896:	4640      	mov	r0, r8
 8004898:	f7ff f9b0 	bl	8003bfc <_strtol_r>
 800489c:	9b04      	ldr	r3, [sp, #16]
 800489e:	9e05      	ldr	r6, [sp, #20]
 80048a0:	1ac2      	subs	r2, r0, r3
 80048a2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80048a6:	429e      	cmp	r6, r3
 80048a8:	bf28      	it	cs
 80048aa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80048ae:	4912      	ldr	r1, [pc, #72]	; (80048f8 <_scanf_float+0x418>)
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 f8e7 	bl	8004a84 <siprintf>
 80048b6:	e7cf      	b.n	8004858 <_scanf_float+0x378>
 80048b8:	f011 0f04 	tst.w	r1, #4
 80048bc:	9903      	ldr	r1, [sp, #12]
 80048be:	600a      	str	r2, [r1, #0]
 80048c0:	d1db      	bne.n	800487a <_scanf_float+0x39a>
 80048c2:	f8d3 8000 	ldr.w	r8, [r3]
 80048c6:	ee10 2a10 	vmov	r2, s0
 80048ca:	ee10 0a10 	vmov	r0, s0
 80048ce:	463b      	mov	r3, r7
 80048d0:	4639      	mov	r1, r7
 80048d2:	f7fc f92b 	bl	8000b2c <__aeabi_dcmpun>
 80048d6:	b128      	cbz	r0, 80048e4 <_scanf_float+0x404>
 80048d8:	4808      	ldr	r0, [pc, #32]	; (80048fc <_scanf_float+0x41c>)
 80048da:	f000 fa05 	bl	8004ce8 <nanf>
 80048de:	ed88 0a00 	vstr	s0, [r8]
 80048e2:	e7cd      	b.n	8004880 <_scanf_float+0x3a0>
 80048e4:	4630      	mov	r0, r6
 80048e6:	4639      	mov	r1, r7
 80048e8:	f7fc f97e 	bl	8000be8 <__aeabi_d2f>
 80048ec:	f8c8 0000 	str.w	r0, [r8]
 80048f0:	e7c6      	b.n	8004880 <_scanf_float+0x3a0>
 80048f2:	2500      	movs	r5, #0
 80048f4:	e635      	b.n	8004562 <_scanf_float+0x82>
 80048f6:	bf00      	nop
 80048f8:	08008cdf 	.word	0x08008cdf
 80048fc:	08008f8f 	.word	0x08008f8f

08004900 <std>:
 8004900:	2300      	movs	r3, #0
 8004902:	b510      	push	{r4, lr}
 8004904:	4604      	mov	r4, r0
 8004906:	e9c0 3300 	strd	r3, r3, [r0]
 800490a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800490e:	6083      	str	r3, [r0, #8]
 8004910:	8181      	strh	r1, [r0, #12]
 8004912:	6643      	str	r3, [r0, #100]	; 0x64
 8004914:	81c2      	strh	r2, [r0, #14]
 8004916:	6183      	str	r3, [r0, #24]
 8004918:	4619      	mov	r1, r3
 800491a:	2208      	movs	r2, #8
 800491c:	305c      	adds	r0, #92	; 0x5c
 800491e:	f000 f942 	bl	8004ba6 <memset>
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <std+0x58>)
 8004924:	6263      	str	r3, [r4, #36]	; 0x24
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <std+0x5c>)
 8004928:	62a3      	str	r3, [r4, #40]	; 0x28
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <std+0x60>)
 800492c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <std+0x64>)
 8004930:	6323      	str	r3, [r4, #48]	; 0x30
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <std+0x68>)
 8004934:	6224      	str	r4, [r4, #32]
 8004936:	429c      	cmp	r4, r3
 8004938:	d006      	beq.n	8004948 <std+0x48>
 800493a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800493e:	4294      	cmp	r4, r2
 8004940:	d002      	beq.n	8004948 <std+0x48>
 8004942:	33d0      	adds	r3, #208	; 0xd0
 8004944:	429c      	cmp	r4, r3
 8004946:	d105      	bne.n	8004954 <std+0x54>
 8004948:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004950:	f000 b9b8 	b.w	8004cc4 <__retarget_lock_init_recursive>
 8004954:	bd10      	pop	{r4, pc}
 8004956:	bf00      	nop
 8004958:	08004b1d 	.word	0x08004b1d
 800495c:	08004b43 	.word	0x08004b43
 8004960:	08004b7b 	.word	0x08004b7b
 8004964:	08004b9f 	.word	0x08004b9f
 8004968:	20000380 	.word	0x20000380

0800496c <stdio_exit_handler>:
 800496c:	4a02      	ldr	r2, [pc, #8]	; (8004978 <stdio_exit_handler+0xc>)
 800496e:	4903      	ldr	r1, [pc, #12]	; (800497c <stdio_exit_handler+0x10>)
 8004970:	4803      	ldr	r0, [pc, #12]	; (8004980 <stdio_exit_handler+0x14>)
 8004972:	f000 b869 	b.w	8004a48 <_fwalk_sglue>
 8004976:	bf00      	nop
 8004978:	2000000c 	.word	0x2000000c
 800497c:	08007b69 	.word	0x08007b69
 8004980:	20000018 	.word	0x20000018

08004984 <cleanup_stdio>:
 8004984:	6841      	ldr	r1, [r0, #4]
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <cleanup_stdio+0x34>)
 8004988:	4299      	cmp	r1, r3
 800498a:	b510      	push	{r4, lr}
 800498c:	4604      	mov	r4, r0
 800498e:	d001      	beq.n	8004994 <cleanup_stdio+0x10>
 8004990:	f003 f8ea 	bl	8007b68 <_fflush_r>
 8004994:	68a1      	ldr	r1, [r4, #8]
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <cleanup_stdio+0x38>)
 8004998:	4299      	cmp	r1, r3
 800499a:	d002      	beq.n	80049a2 <cleanup_stdio+0x1e>
 800499c:	4620      	mov	r0, r4
 800499e:	f003 f8e3 	bl	8007b68 <_fflush_r>
 80049a2:	68e1      	ldr	r1, [r4, #12]
 80049a4:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <cleanup_stdio+0x3c>)
 80049a6:	4299      	cmp	r1, r3
 80049a8:	d004      	beq.n	80049b4 <cleanup_stdio+0x30>
 80049aa:	4620      	mov	r0, r4
 80049ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b0:	f003 b8da 	b.w	8007b68 <_fflush_r>
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	bf00      	nop
 80049b8:	20000380 	.word	0x20000380
 80049bc:	200003e8 	.word	0x200003e8
 80049c0:	20000450 	.word	0x20000450

080049c4 <global_stdio_init.part.0>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <global_stdio_init.part.0+0x30>)
 80049c8:	4c0b      	ldr	r4, [pc, #44]	; (80049f8 <global_stdio_init.part.0+0x34>)
 80049ca:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <global_stdio_init.part.0+0x38>)
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	4620      	mov	r0, r4
 80049d0:	2200      	movs	r2, #0
 80049d2:	2104      	movs	r1, #4
 80049d4:	f7ff ff94 	bl	8004900 <std>
 80049d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80049dc:	2201      	movs	r2, #1
 80049de:	2109      	movs	r1, #9
 80049e0:	f7ff ff8e 	bl	8004900 <std>
 80049e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80049e8:	2202      	movs	r2, #2
 80049ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ee:	2112      	movs	r1, #18
 80049f0:	f7ff bf86 	b.w	8004900 <std>
 80049f4:	200004b8 	.word	0x200004b8
 80049f8:	20000380 	.word	0x20000380
 80049fc:	0800496d 	.word	0x0800496d

08004a00 <__sfp_lock_acquire>:
 8004a00:	4801      	ldr	r0, [pc, #4]	; (8004a08 <__sfp_lock_acquire+0x8>)
 8004a02:	f000 b960 	b.w	8004cc6 <__retarget_lock_acquire_recursive>
 8004a06:	bf00      	nop
 8004a08:	200004c1 	.word	0x200004c1

08004a0c <__sfp_lock_release>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	; (8004a14 <__sfp_lock_release+0x8>)
 8004a0e:	f000 b95b 	b.w	8004cc8 <__retarget_lock_release_recursive>
 8004a12:	bf00      	nop
 8004a14:	200004c1 	.word	0x200004c1

08004a18 <__sinit>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	f7ff fff0 	bl	8004a00 <__sfp_lock_acquire>
 8004a20:	6a23      	ldr	r3, [r4, #32]
 8004a22:	b11b      	cbz	r3, 8004a2c <__sinit+0x14>
 8004a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a28:	f7ff bff0 	b.w	8004a0c <__sfp_lock_release>
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <__sinit+0x28>)
 8004a2e:	6223      	str	r3, [r4, #32]
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <__sinit+0x2c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f5      	bne.n	8004a24 <__sinit+0xc>
 8004a38:	f7ff ffc4 	bl	80049c4 <global_stdio_init.part.0>
 8004a3c:	e7f2      	b.n	8004a24 <__sinit+0xc>
 8004a3e:	bf00      	nop
 8004a40:	08004985 	.word	0x08004985
 8004a44:	200004b8 	.word	0x200004b8

08004a48 <_fwalk_sglue>:
 8004a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a4c:	4607      	mov	r7, r0
 8004a4e:	4688      	mov	r8, r1
 8004a50:	4614      	mov	r4, r2
 8004a52:	2600      	movs	r6, #0
 8004a54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a58:	f1b9 0901 	subs.w	r9, r9, #1
 8004a5c:	d505      	bpl.n	8004a6a <_fwalk_sglue+0x22>
 8004a5e:	6824      	ldr	r4, [r4, #0]
 8004a60:	2c00      	cmp	r4, #0
 8004a62:	d1f7      	bne.n	8004a54 <_fwalk_sglue+0xc>
 8004a64:	4630      	mov	r0, r6
 8004a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a6a:	89ab      	ldrh	r3, [r5, #12]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d907      	bls.n	8004a80 <_fwalk_sglue+0x38>
 8004a70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a74:	3301      	adds	r3, #1
 8004a76:	d003      	beq.n	8004a80 <_fwalk_sglue+0x38>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	47c0      	blx	r8
 8004a7e:	4306      	orrs	r6, r0
 8004a80:	3568      	adds	r5, #104	; 0x68
 8004a82:	e7e9      	b.n	8004a58 <_fwalk_sglue+0x10>

08004a84 <siprintf>:
 8004a84:	b40e      	push	{r1, r2, r3}
 8004a86:	b500      	push	{lr}
 8004a88:	b09c      	sub	sp, #112	; 0x70
 8004a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8004a8c:	9002      	str	r0, [sp, #8]
 8004a8e:	9006      	str	r0, [sp, #24]
 8004a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a94:	4809      	ldr	r0, [pc, #36]	; (8004abc <siprintf+0x38>)
 8004a96:	9107      	str	r1, [sp, #28]
 8004a98:	9104      	str	r1, [sp, #16]
 8004a9a:	4909      	ldr	r1, [pc, #36]	; (8004ac0 <siprintf+0x3c>)
 8004a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa0:	9105      	str	r1, [sp, #20]
 8004aa2:	6800      	ldr	r0, [r0, #0]
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	a902      	add	r1, sp, #8
 8004aa8:	f002 fbba 	bl	8007220 <_svfiprintf_r>
 8004aac:	9b02      	ldr	r3, [sp, #8]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	b01c      	add	sp, #112	; 0x70
 8004ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab8:	b003      	add	sp, #12
 8004aba:	4770      	bx	lr
 8004abc:	20000064 	.word	0x20000064
 8004ac0:	ffff0208 	.word	0xffff0208

08004ac4 <siscanf>:
 8004ac4:	b40e      	push	{r1, r2, r3}
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	b09f      	sub	sp, #124	; 0x7c
 8004aca:	ac21      	add	r4, sp, #132	; 0x84
 8004acc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004ad0:	f854 2b04 	ldr.w	r2, [r4], #4
 8004ad4:	9201      	str	r2, [sp, #4]
 8004ad6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004ada:	9004      	str	r0, [sp, #16]
 8004adc:	9008      	str	r0, [sp, #32]
 8004ade:	f7fb fbc7 	bl	8000270 <strlen>
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <siscanf+0x50>)
 8004ae4:	9005      	str	r0, [sp, #20]
 8004ae6:	9009      	str	r0, [sp, #36]	; 0x24
 8004ae8:	930d      	str	r3, [sp, #52]	; 0x34
 8004aea:	480b      	ldr	r0, [pc, #44]	; (8004b18 <siscanf+0x54>)
 8004aec:	9a01      	ldr	r2, [sp, #4]
 8004aee:	6800      	ldr	r0, [r0, #0]
 8004af0:	9403      	str	r4, [sp, #12]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9311      	str	r3, [sp, #68]	; 0x44
 8004af6:	9316      	str	r3, [sp, #88]	; 0x58
 8004af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004afc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004b00:	a904      	add	r1, sp, #16
 8004b02:	4623      	mov	r3, r4
 8004b04:	f002 fce4 	bl	80074d0 <__ssvfiscanf_r>
 8004b08:	b01f      	add	sp, #124	; 0x7c
 8004b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b0e:	b003      	add	sp, #12
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	08004b3f 	.word	0x08004b3f
 8004b18:	20000064 	.word	0x20000064

08004b1c <__sread>:
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	460c      	mov	r4, r1
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	f000 f880 	bl	8004c28 <_read_r>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	bfab      	itete	ge
 8004b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b30:	181b      	addge	r3, r3, r0
 8004b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b36:	bfac      	ite	ge
 8004b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b3a:	81a3      	strhlt	r3, [r4, #12]
 8004b3c:	bd10      	pop	{r4, pc}

08004b3e <__seofread>:
 8004b3e:	2000      	movs	r0, #0
 8004b40:	4770      	bx	lr

08004b42 <__swrite>:
 8004b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b46:	461f      	mov	r7, r3
 8004b48:	898b      	ldrh	r3, [r1, #12]
 8004b4a:	05db      	lsls	r3, r3, #23
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	4616      	mov	r6, r2
 8004b52:	d505      	bpl.n	8004b60 <__swrite+0x1e>
 8004b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b58:	2302      	movs	r3, #2
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f000 f852 	bl	8004c04 <_lseek_r>
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	463b      	mov	r3, r7
 8004b70:	4628      	mov	r0, r5
 8004b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b76:	f000 b869 	b.w	8004c4c <_write_r>

08004b7a <__sseek>:
 8004b7a:	b510      	push	{r4, lr}
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b82:	f000 f83f 	bl	8004c04 <_lseek_r>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	bf15      	itete	ne
 8004b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b96:	81a3      	strheq	r3, [r4, #12]
 8004b98:	bf18      	it	ne
 8004b9a:	81a3      	strhne	r3, [r4, #12]
 8004b9c:	bd10      	pop	{r4, pc}

08004b9e <__sclose>:
 8004b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba2:	f000 b81f 	b.w	8004be4 <_close_r>

08004ba6 <memset>:
 8004ba6:	4402      	add	r2, r0
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d100      	bne.n	8004bb0 <memset+0xa>
 8004bae:	4770      	bx	lr
 8004bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb4:	e7f9      	b.n	8004baa <memset+0x4>

08004bb6 <strncpy>:
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	3901      	subs	r1, #1
 8004bba:	4603      	mov	r3, r0
 8004bbc:	b132      	cbz	r2, 8004bcc <strncpy+0x16>
 8004bbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004bc2:	f803 4b01 	strb.w	r4, [r3], #1
 8004bc6:	3a01      	subs	r2, #1
 8004bc8:	2c00      	cmp	r4, #0
 8004bca:	d1f7      	bne.n	8004bbc <strncpy+0x6>
 8004bcc:	441a      	add	r2, r3
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <strncpy+0x20>
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bda:	e7f9      	b.n	8004bd0 <strncpy+0x1a>

08004bdc <_localeconv_r>:
 8004bdc:	4800      	ldr	r0, [pc, #0]	; (8004be0 <_localeconv_r+0x4>)
 8004bde:	4770      	bx	lr
 8004be0:	20000158 	.word	0x20000158

08004be4 <_close_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d06      	ldr	r5, [pc, #24]	; (8004c00 <_close_r+0x1c>)
 8004be8:	2300      	movs	r3, #0
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	602b      	str	r3, [r5, #0]
 8004bf0:	f7fc fb6d 	bl	80012ce <_close>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <_close_r+0x1a>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	b103      	cbz	r3, 8004bfe <_close_r+0x1a>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	200004bc 	.word	0x200004bc

08004c04 <_lseek_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4d07      	ldr	r5, [pc, #28]	; (8004c24 <_lseek_r+0x20>)
 8004c08:	4604      	mov	r4, r0
 8004c0a:	4608      	mov	r0, r1
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	602a      	str	r2, [r5, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f7fc fb82 	bl	800131c <_lseek>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_lseek_r+0x1e>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_lseek_r+0x1e>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	200004bc 	.word	0x200004bc

08004c28 <_read_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4d07      	ldr	r5, [pc, #28]	; (8004c48 <_read_r+0x20>)
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	4608      	mov	r0, r1
 8004c30:	4611      	mov	r1, r2
 8004c32:	2200      	movs	r2, #0
 8004c34:	602a      	str	r2, [r5, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f7fc fb10 	bl	800125c <_read>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_read_r+0x1e>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_read_r+0x1e>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200004bc 	.word	0x200004bc

08004c4c <_write_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d07      	ldr	r5, [pc, #28]	; (8004c6c <_write_r+0x20>)
 8004c50:	4604      	mov	r4, r0
 8004c52:	4608      	mov	r0, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	602a      	str	r2, [r5, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fc fb1b 	bl	8001296 <_write>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_write_r+0x1e>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_write_r+0x1e>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	200004bc 	.word	0x200004bc

08004c70 <__errno>:
 8004c70:	4b01      	ldr	r3, [pc, #4]	; (8004c78 <__errno+0x8>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000064 	.word	0x20000064

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4d0d      	ldr	r5, [pc, #52]	; (8004cb4 <__libc_init_array+0x38>)
 8004c80:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c82:	1b64      	subs	r4, r4, r5
 8004c84:	10a4      	asrs	r4, r4, #2
 8004c86:	2600      	movs	r6, #0
 8004c88:	42a6      	cmp	r6, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	4d0b      	ldr	r5, [pc, #44]	; (8004cbc <__libc_init_array+0x40>)
 8004c8e:	4c0c      	ldr	r4, [pc, #48]	; (8004cc0 <__libc_init_array+0x44>)
 8004c90:	f003 ff5a 	bl	8008b48 <_init>
 8004c94:	1b64      	subs	r4, r4, r5
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	2600      	movs	r6, #0
 8004c9a:	42a6      	cmp	r6, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca4:	4798      	blx	r3
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cae:	4798      	blx	r3
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	08008ff0 	.word	0x08008ff0
 8004cb8:	08008ff0 	.word	0x08008ff0
 8004cbc:	08008ff0 	.word	0x08008ff0
 8004cc0:	08008ff4 	.word	0x08008ff4

08004cc4 <__retarget_lock_init_recursive>:
 8004cc4:	4770      	bx	lr

08004cc6 <__retarget_lock_acquire_recursive>:
 8004cc6:	4770      	bx	lr

08004cc8 <__retarget_lock_release_recursive>:
 8004cc8:	4770      	bx	lr

08004cca <memcpy>:
 8004cca:	440a      	add	r2, r1
 8004ccc:	4291      	cmp	r1, r2
 8004cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd2:	d100      	bne.n	8004cd6 <memcpy+0xc>
 8004cd4:	4770      	bx	lr
 8004cd6:	b510      	push	{r4, lr}
 8004cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce0:	4291      	cmp	r1, r2
 8004ce2:	d1f9      	bne.n	8004cd8 <memcpy+0xe>
 8004ce4:	bd10      	pop	{r4, pc}
	...

08004ce8 <nanf>:
 8004ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004cf0 <nanf+0x8>
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	7fc00000 	.word	0x7fc00000

08004cf4 <quorem>:
 8004cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	6903      	ldr	r3, [r0, #16]
 8004cfa:	690c      	ldr	r4, [r1, #16]
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	4607      	mov	r7, r0
 8004d00:	db7e      	blt.n	8004e00 <quorem+0x10c>
 8004d02:	3c01      	subs	r4, #1
 8004d04:	f101 0814 	add.w	r8, r1, #20
 8004d08:	f100 0514 	add.w	r5, r0, #20
 8004d0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d26:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d2a:	d331      	bcc.n	8004d90 <quorem+0x9c>
 8004d2c:	f04f 0e00 	mov.w	lr, #0
 8004d30:	4640      	mov	r0, r8
 8004d32:	46ac      	mov	ip, r5
 8004d34:	46f2      	mov	sl, lr
 8004d36:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d3a:	b293      	uxth	r3, r2
 8004d3c:	fb06 e303 	mla	r3, r6, r3, lr
 8004d40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d44:	0c1a      	lsrs	r2, r3, #16
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	ebaa 0303 	sub.w	r3, sl, r3
 8004d4c:	f8dc a000 	ldr.w	sl, [ip]
 8004d50:	fa13 f38a 	uxtah	r3, r3, sl
 8004d54:	fb06 220e 	mla	r2, r6, lr, r2
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	9b00      	ldr	r3, [sp, #0]
 8004d5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d60:	b292      	uxth	r2, r2
 8004d62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8004d6e:	4581      	cmp	r9, r0
 8004d70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d74:	f84c 3b04 	str.w	r3, [ip], #4
 8004d78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d7c:	d2db      	bcs.n	8004d36 <quorem+0x42>
 8004d7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d82:	b92b      	cbnz	r3, 8004d90 <quorem+0x9c>
 8004d84:	9b01      	ldr	r3, [sp, #4]
 8004d86:	3b04      	subs	r3, #4
 8004d88:	429d      	cmp	r5, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	d32c      	bcc.n	8004de8 <quorem+0xf4>
 8004d8e:	613c      	str	r4, [r7, #16]
 8004d90:	4638      	mov	r0, r7
 8004d92:	f001 f9f1 	bl	8006178 <__mcmp>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	db22      	blt.n	8004de0 <quorem+0xec>
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004da4:	f8d1 c000 	ldr.w	ip, [r1]
 8004da8:	b293      	uxth	r3, r2
 8004daa:	1ac3      	subs	r3, r0, r3
 8004dac:	0c12      	lsrs	r2, r2, #16
 8004dae:	fa13 f38c 	uxtah	r3, r3, ip
 8004db2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004db6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dc0:	45c1      	cmp	r9, r8
 8004dc2:	f841 3b04 	str.w	r3, [r1], #4
 8004dc6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004dca:	d2e9      	bcs.n	8004da0 <quorem+0xac>
 8004dcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dd4:	b922      	cbnz	r2, 8004de0 <quorem+0xec>
 8004dd6:	3b04      	subs	r3, #4
 8004dd8:	429d      	cmp	r5, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	d30a      	bcc.n	8004df4 <quorem+0x100>
 8004dde:	613c      	str	r4, [r7, #16]
 8004de0:	4630      	mov	r0, r6
 8004de2:	b003      	add	sp, #12
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	3b04      	subs	r3, #4
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d1ce      	bne.n	8004d8e <quorem+0x9a>
 8004df0:	3c01      	subs	r4, #1
 8004df2:	e7c9      	b.n	8004d88 <quorem+0x94>
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	3b04      	subs	r3, #4
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	d1f0      	bne.n	8004dde <quorem+0xea>
 8004dfc:	3c01      	subs	r4, #1
 8004dfe:	e7eb      	b.n	8004dd8 <quorem+0xe4>
 8004e00:	2000      	movs	r0, #0
 8004e02:	e7ee      	b.n	8004de2 <quorem+0xee>
 8004e04:	0000      	movs	r0, r0
	...

08004e08 <_dtoa_r>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	ed2d 8b04 	vpush	{d8-d9}
 8004e10:	69c5      	ldr	r5, [r0, #28]
 8004e12:	b093      	sub	sp, #76	; 0x4c
 8004e14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004e18:	ec57 6b10 	vmov	r6, r7, d0
 8004e1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e20:	9107      	str	r1, [sp, #28]
 8004e22:	4604      	mov	r4, r0
 8004e24:	920a      	str	r2, [sp, #40]	; 0x28
 8004e26:	930d      	str	r3, [sp, #52]	; 0x34
 8004e28:	b975      	cbnz	r5, 8004e48 <_dtoa_r+0x40>
 8004e2a:	2010      	movs	r0, #16
 8004e2c:	f000 fe2a 	bl	8005a84 <malloc>
 8004e30:	4602      	mov	r2, r0
 8004e32:	61e0      	str	r0, [r4, #28]
 8004e34:	b920      	cbnz	r0, 8004e40 <_dtoa_r+0x38>
 8004e36:	4bae      	ldr	r3, [pc, #696]	; (80050f0 <_dtoa_r+0x2e8>)
 8004e38:	21ef      	movs	r1, #239	; 0xef
 8004e3a:	48ae      	ldr	r0, [pc, #696]	; (80050f4 <_dtoa_r+0x2ec>)
 8004e3c:	f002 ff74 	bl	8007d28 <__assert_func>
 8004e40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e44:	6005      	str	r5, [r0, #0]
 8004e46:	60c5      	str	r5, [r0, #12]
 8004e48:	69e3      	ldr	r3, [r4, #28]
 8004e4a:	6819      	ldr	r1, [r3, #0]
 8004e4c:	b151      	cbz	r1, 8004e64 <_dtoa_r+0x5c>
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	604a      	str	r2, [r1, #4]
 8004e52:	2301      	movs	r3, #1
 8004e54:	4093      	lsls	r3, r2
 8004e56:	608b      	str	r3, [r1, #8]
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 ff07 	bl	8005c6c <_Bfree>
 8004e5e:	69e3      	ldr	r3, [r4, #28]
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	1e3b      	subs	r3, r7, #0
 8004e66:	bfbb      	ittet	lt
 8004e68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e6c:	9303      	strlt	r3, [sp, #12]
 8004e6e:	2300      	movge	r3, #0
 8004e70:	2201      	movlt	r2, #1
 8004e72:	bfac      	ite	ge
 8004e74:	f8c8 3000 	strge.w	r3, [r8]
 8004e78:	f8c8 2000 	strlt.w	r2, [r8]
 8004e7c:	4b9e      	ldr	r3, [pc, #632]	; (80050f8 <_dtoa_r+0x2f0>)
 8004e7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e82:	ea33 0308 	bics.w	r3, r3, r8
 8004e86:	d11b      	bne.n	8004ec0 <_dtoa_r+0xb8>
 8004e88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004e94:	4333      	orrs	r3, r6
 8004e96:	f000 8593 	beq.w	80059c0 <_dtoa_r+0xbb8>
 8004e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e9c:	b963      	cbnz	r3, 8004eb8 <_dtoa_r+0xb0>
 8004e9e:	4b97      	ldr	r3, [pc, #604]	; (80050fc <_dtoa_r+0x2f4>)
 8004ea0:	e027      	b.n	8004ef2 <_dtoa_r+0xea>
 8004ea2:	4b97      	ldr	r3, [pc, #604]	; (8005100 <_dtoa_r+0x2f8>)
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	9800      	ldr	r0, [sp, #0]
 8004eae:	b013      	add	sp, #76	; 0x4c
 8004eb0:	ecbd 8b04 	vpop	{d8-d9}
 8004eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb8:	4b90      	ldr	r3, [pc, #576]	; (80050fc <_dtoa_r+0x2f4>)
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	3303      	adds	r3, #3
 8004ebe:	e7f3      	b.n	8004ea8 <_dtoa_r+0xa0>
 8004ec0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	ec51 0b17 	vmov	r0, r1, d7
 8004eca:	eeb0 8a47 	vmov.f32	s16, s14
 8004ece:	eef0 8a67 	vmov.f32	s17, s15
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f7fb fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed8:	4681      	mov	r9, r0
 8004eda:	b160      	cbz	r0, 8004ef6 <_dtoa_r+0xee>
 8004edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ede:	2301      	movs	r3, #1
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8568 	beq.w	80059ba <_dtoa_r+0xbb2>
 8004eea:	4b86      	ldr	r3, [pc, #536]	; (8005104 <_dtoa_r+0x2fc>)
 8004eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	e7da      	b.n	8004eac <_dtoa_r+0xa4>
 8004ef6:	aa10      	add	r2, sp, #64	; 0x40
 8004ef8:	a911      	add	r1, sp, #68	; 0x44
 8004efa:	4620      	mov	r0, r4
 8004efc:	eeb0 0a48 	vmov.f32	s0, s16
 8004f00:	eef0 0a68 	vmov.f32	s1, s17
 8004f04:	f001 fa4e 	bl	80063a4 <__d2b>
 8004f08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004f0c:	4682      	mov	sl, r0
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	d07f      	beq.n	8005012 <_dtoa_r+0x20a>
 8004f12:	ee18 3a90 	vmov	r3, s17
 8004f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004f1e:	ec51 0b18 	vmov	r0, r1, d8
 8004f22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f2e:	4619      	mov	r1, r3
 8004f30:	2200      	movs	r2, #0
 8004f32:	4b75      	ldr	r3, [pc, #468]	; (8005108 <_dtoa_r+0x300>)
 8004f34:	f7fb f9a8 	bl	8000288 <__aeabi_dsub>
 8004f38:	a367      	add	r3, pc, #412	; (adr r3, 80050d8 <_dtoa_r+0x2d0>)
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	f7fb fb5b 	bl	80005f8 <__aeabi_dmul>
 8004f42:	a367      	add	r3, pc, #412	; (adr r3, 80050e0 <_dtoa_r+0x2d8>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f7fb f9a0 	bl	800028c <__adddf3>
 8004f4c:	4606      	mov	r6, r0
 8004f4e:	4628      	mov	r0, r5
 8004f50:	460f      	mov	r7, r1
 8004f52:	f7fb fae7 	bl	8000524 <__aeabi_i2d>
 8004f56:	a364      	add	r3, pc, #400	; (adr r3, 80050e8 <_dtoa_r+0x2e0>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb fb4c 	bl	80005f8 <__aeabi_dmul>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4630      	mov	r0, r6
 8004f66:	4639      	mov	r1, r7
 8004f68:	f7fb f990 	bl	800028c <__adddf3>
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	460f      	mov	r7, r1
 8004f70:	f7fb fdf2 	bl	8000b58 <__aeabi_d2iz>
 8004f74:	2200      	movs	r2, #0
 8004f76:	4683      	mov	fp, r0
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	f7fb fdad 	bl	8000adc <__aeabi_dcmplt>
 8004f82:	b148      	cbz	r0, 8004f98 <_dtoa_r+0x190>
 8004f84:	4658      	mov	r0, fp
 8004f86:	f7fb facd 	bl	8000524 <__aeabi_i2d>
 8004f8a:	4632      	mov	r2, r6
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	f7fb fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f92:	b908      	cbnz	r0, 8004f98 <_dtoa_r+0x190>
 8004f94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f98:	f1bb 0f16 	cmp.w	fp, #22
 8004f9c:	d857      	bhi.n	800504e <_dtoa_r+0x246>
 8004f9e:	4b5b      	ldr	r3, [pc, #364]	; (800510c <_dtoa_r+0x304>)
 8004fa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	ec51 0b18 	vmov	r0, r1, d8
 8004fac:	f7fb fd96 	bl	8000adc <__aeabi_dcmplt>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d04e      	beq.n	8005052 <_dtoa_r+0x24a>
 8004fb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fb8:	2300      	movs	r3, #0
 8004fba:	930c      	str	r3, [sp, #48]	; 0x30
 8004fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fbe:	1b5b      	subs	r3, r3, r5
 8004fc0:	1e5a      	subs	r2, r3, #1
 8004fc2:	bf45      	ittet	mi
 8004fc4:	f1c3 0301 	rsbmi	r3, r3, #1
 8004fc8:	9305      	strmi	r3, [sp, #20]
 8004fca:	2300      	movpl	r3, #0
 8004fcc:	2300      	movmi	r3, #0
 8004fce:	9206      	str	r2, [sp, #24]
 8004fd0:	bf54      	ite	pl
 8004fd2:	9305      	strpl	r3, [sp, #20]
 8004fd4:	9306      	strmi	r3, [sp, #24]
 8004fd6:	f1bb 0f00 	cmp.w	fp, #0
 8004fda:	db3c      	blt.n	8005056 <_dtoa_r+0x24e>
 8004fdc:	9b06      	ldr	r3, [sp, #24]
 8004fde:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004fe2:	445b      	add	r3, fp
 8004fe4:	9306      	str	r3, [sp, #24]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9308      	str	r3, [sp, #32]
 8004fea:	9b07      	ldr	r3, [sp, #28]
 8004fec:	2b09      	cmp	r3, #9
 8004fee:	d868      	bhi.n	80050c2 <_dtoa_r+0x2ba>
 8004ff0:	2b05      	cmp	r3, #5
 8004ff2:	bfc4      	itt	gt
 8004ff4:	3b04      	subgt	r3, #4
 8004ff6:	9307      	strgt	r3, [sp, #28]
 8004ff8:	9b07      	ldr	r3, [sp, #28]
 8004ffa:	f1a3 0302 	sub.w	r3, r3, #2
 8004ffe:	bfcc      	ite	gt
 8005000:	2500      	movgt	r5, #0
 8005002:	2501      	movle	r5, #1
 8005004:	2b03      	cmp	r3, #3
 8005006:	f200 8085 	bhi.w	8005114 <_dtoa_r+0x30c>
 800500a:	e8df f003 	tbb	[pc, r3]
 800500e:	3b2e      	.short	0x3b2e
 8005010:	5839      	.short	0x5839
 8005012:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005016:	441d      	add	r5, r3
 8005018:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800501c:	2b20      	cmp	r3, #32
 800501e:	bfc1      	itttt	gt
 8005020:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005024:	fa08 f803 	lslgt.w	r8, r8, r3
 8005028:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800502c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005030:	bfd6      	itet	le
 8005032:	f1c3 0320 	rsble	r3, r3, #32
 8005036:	ea48 0003 	orrgt.w	r0, r8, r3
 800503a:	fa06 f003 	lslle.w	r0, r6, r3
 800503e:	f7fb fa61 	bl	8000504 <__aeabi_ui2d>
 8005042:	2201      	movs	r2, #1
 8005044:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005048:	3d01      	subs	r5, #1
 800504a:	920e      	str	r2, [sp, #56]	; 0x38
 800504c:	e76f      	b.n	8004f2e <_dtoa_r+0x126>
 800504e:	2301      	movs	r3, #1
 8005050:	e7b3      	b.n	8004fba <_dtoa_r+0x1b2>
 8005052:	900c      	str	r0, [sp, #48]	; 0x30
 8005054:	e7b2      	b.n	8004fbc <_dtoa_r+0x1b4>
 8005056:	9b05      	ldr	r3, [sp, #20]
 8005058:	eba3 030b 	sub.w	r3, r3, fp
 800505c:	9305      	str	r3, [sp, #20]
 800505e:	f1cb 0300 	rsb	r3, fp, #0
 8005062:	9308      	str	r3, [sp, #32]
 8005064:	2300      	movs	r3, #0
 8005066:	930b      	str	r3, [sp, #44]	; 0x2c
 8005068:	e7bf      	b.n	8004fea <_dtoa_r+0x1e2>
 800506a:	2300      	movs	r3, #0
 800506c:	9309      	str	r3, [sp, #36]	; 0x24
 800506e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	dc52      	bgt.n	800511a <_dtoa_r+0x312>
 8005074:	2301      	movs	r3, #1
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	9304      	str	r3, [sp, #16]
 800507a:	461a      	mov	r2, r3
 800507c:	920a      	str	r2, [sp, #40]	; 0x28
 800507e:	e00b      	b.n	8005098 <_dtoa_r+0x290>
 8005080:	2301      	movs	r3, #1
 8005082:	e7f3      	b.n	800506c <_dtoa_r+0x264>
 8005084:	2300      	movs	r3, #0
 8005086:	9309      	str	r3, [sp, #36]	; 0x24
 8005088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508a:	445b      	add	r3, fp
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	2b01      	cmp	r3, #1
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	bfb8      	it	lt
 8005096:	2301      	movlt	r3, #1
 8005098:	69e0      	ldr	r0, [r4, #28]
 800509a:	2100      	movs	r1, #0
 800509c:	2204      	movs	r2, #4
 800509e:	f102 0614 	add.w	r6, r2, #20
 80050a2:	429e      	cmp	r6, r3
 80050a4:	d93d      	bls.n	8005122 <_dtoa_r+0x31a>
 80050a6:	6041      	str	r1, [r0, #4]
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 fd9f 	bl	8005bec <_Balloc>
 80050ae:	9000      	str	r0, [sp, #0]
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d139      	bne.n	8005128 <_dtoa_r+0x320>
 80050b4:	4b16      	ldr	r3, [pc, #88]	; (8005110 <_dtoa_r+0x308>)
 80050b6:	4602      	mov	r2, r0
 80050b8:	f240 11af 	movw	r1, #431	; 0x1af
 80050bc:	e6bd      	b.n	8004e3a <_dtoa_r+0x32>
 80050be:	2301      	movs	r3, #1
 80050c0:	e7e1      	b.n	8005086 <_dtoa_r+0x27e>
 80050c2:	2501      	movs	r5, #1
 80050c4:	2300      	movs	r3, #0
 80050c6:	9307      	str	r3, [sp, #28]
 80050c8:	9509      	str	r5, [sp, #36]	; 0x24
 80050ca:	f04f 33ff 	mov.w	r3, #4294967295
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	9304      	str	r3, [sp, #16]
 80050d2:	2200      	movs	r2, #0
 80050d4:	2312      	movs	r3, #18
 80050d6:	e7d1      	b.n	800507c <_dtoa_r+0x274>
 80050d8:	636f4361 	.word	0x636f4361
 80050dc:	3fd287a7 	.word	0x3fd287a7
 80050e0:	8b60c8b3 	.word	0x8b60c8b3
 80050e4:	3fc68a28 	.word	0x3fc68a28
 80050e8:	509f79fb 	.word	0x509f79fb
 80050ec:	3fd34413 	.word	0x3fd34413
 80050f0:	08008cf1 	.word	0x08008cf1
 80050f4:	08008d08 	.word	0x08008d08
 80050f8:	7ff00000 	.word	0x7ff00000
 80050fc:	08008ced 	.word	0x08008ced
 8005100:	08008ce4 	.word	0x08008ce4
 8005104:	08008f48 	.word	0x08008f48
 8005108:	3ff80000 	.word	0x3ff80000
 800510c:	08008df8 	.word	0x08008df8
 8005110:	08008d60 	.word	0x08008d60
 8005114:	2301      	movs	r3, #1
 8005116:	9309      	str	r3, [sp, #36]	; 0x24
 8005118:	e7d7      	b.n	80050ca <_dtoa_r+0x2c2>
 800511a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	9304      	str	r3, [sp, #16]
 8005120:	e7ba      	b.n	8005098 <_dtoa_r+0x290>
 8005122:	3101      	adds	r1, #1
 8005124:	0052      	lsls	r2, r2, #1
 8005126:	e7ba      	b.n	800509e <_dtoa_r+0x296>
 8005128:	69e3      	ldr	r3, [r4, #28]
 800512a:	9a00      	ldr	r2, [sp, #0]
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	9b04      	ldr	r3, [sp, #16]
 8005130:	2b0e      	cmp	r3, #14
 8005132:	f200 80a8 	bhi.w	8005286 <_dtoa_r+0x47e>
 8005136:	2d00      	cmp	r5, #0
 8005138:	f000 80a5 	beq.w	8005286 <_dtoa_r+0x47e>
 800513c:	f1bb 0f00 	cmp.w	fp, #0
 8005140:	dd38      	ble.n	80051b4 <_dtoa_r+0x3ac>
 8005142:	4bc0      	ldr	r3, [pc, #768]	; (8005444 <_dtoa_r+0x63c>)
 8005144:	f00b 020f 	and.w	r2, fp, #15
 8005148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800514c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005150:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005154:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005158:	d019      	beq.n	800518e <_dtoa_r+0x386>
 800515a:	4bbb      	ldr	r3, [pc, #748]	; (8005448 <_dtoa_r+0x640>)
 800515c:	ec51 0b18 	vmov	r0, r1, d8
 8005160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005164:	f7fb fb72 	bl	800084c <__aeabi_ddiv>
 8005168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800516c:	f008 080f 	and.w	r8, r8, #15
 8005170:	2503      	movs	r5, #3
 8005172:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005448 <_dtoa_r+0x640>
 8005176:	f1b8 0f00 	cmp.w	r8, #0
 800517a:	d10a      	bne.n	8005192 <_dtoa_r+0x38a>
 800517c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005180:	4632      	mov	r2, r6
 8005182:	463b      	mov	r3, r7
 8005184:	f7fb fb62 	bl	800084c <__aeabi_ddiv>
 8005188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800518c:	e02b      	b.n	80051e6 <_dtoa_r+0x3de>
 800518e:	2502      	movs	r5, #2
 8005190:	e7ef      	b.n	8005172 <_dtoa_r+0x36a>
 8005192:	f018 0f01 	tst.w	r8, #1
 8005196:	d008      	beq.n	80051aa <_dtoa_r+0x3a2>
 8005198:	4630      	mov	r0, r6
 800519a:	4639      	mov	r1, r7
 800519c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80051a0:	f7fb fa2a 	bl	80005f8 <__aeabi_dmul>
 80051a4:	3501      	adds	r5, #1
 80051a6:	4606      	mov	r6, r0
 80051a8:	460f      	mov	r7, r1
 80051aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80051ae:	f109 0908 	add.w	r9, r9, #8
 80051b2:	e7e0      	b.n	8005176 <_dtoa_r+0x36e>
 80051b4:	f000 809f 	beq.w	80052f6 <_dtoa_r+0x4ee>
 80051b8:	f1cb 0600 	rsb	r6, fp, #0
 80051bc:	4ba1      	ldr	r3, [pc, #644]	; (8005444 <_dtoa_r+0x63c>)
 80051be:	4fa2      	ldr	r7, [pc, #648]	; (8005448 <_dtoa_r+0x640>)
 80051c0:	f006 020f 	and.w	r2, r6, #15
 80051c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	ec51 0b18 	vmov	r0, r1, d8
 80051d0:	f7fb fa12 	bl	80005f8 <__aeabi_dmul>
 80051d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051d8:	1136      	asrs	r6, r6, #4
 80051da:	2300      	movs	r3, #0
 80051dc:	2502      	movs	r5, #2
 80051de:	2e00      	cmp	r6, #0
 80051e0:	d17e      	bne.n	80052e0 <_dtoa_r+0x4d8>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1d0      	bne.n	8005188 <_dtoa_r+0x380>
 80051e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8084 	beq.w	80052fa <_dtoa_r+0x4f2>
 80051f2:	4b96      	ldr	r3, [pc, #600]	; (800544c <_dtoa_r+0x644>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	4640      	mov	r0, r8
 80051f8:	4649      	mov	r1, r9
 80051fa:	f7fb fc6f 	bl	8000adc <__aeabi_dcmplt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d07b      	beq.n	80052fa <_dtoa_r+0x4f2>
 8005202:	9b04      	ldr	r3, [sp, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d078      	beq.n	80052fa <_dtoa_r+0x4f2>
 8005208:	9b01      	ldr	r3, [sp, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	dd39      	ble.n	8005282 <_dtoa_r+0x47a>
 800520e:	4b90      	ldr	r3, [pc, #576]	; (8005450 <_dtoa_r+0x648>)
 8005210:	2200      	movs	r2, #0
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb f9ef 	bl	80005f8 <__aeabi_dmul>
 800521a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800521e:	9e01      	ldr	r6, [sp, #4]
 8005220:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005224:	3501      	adds	r5, #1
 8005226:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800522a:	4628      	mov	r0, r5
 800522c:	f7fb f97a 	bl	8000524 <__aeabi_i2d>
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	f7fb f9e0 	bl	80005f8 <__aeabi_dmul>
 8005238:	4b86      	ldr	r3, [pc, #536]	; (8005454 <_dtoa_r+0x64c>)
 800523a:	2200      	movs	r2, #0
 800523c:	f7fb f826 	bl	800028c <__adddf3>
 8005240:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	2e00      	cmp	r6, #0
 800524c:	d158      	bne.n	8005300 <_dtoa_r+0x4f8>
 800524e:	4b82      	ldr	r3, [pc, #520]	; (8005458 <_dtoa_r+0x650>)
 8005250:	2200      	movs	r2, #0
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f7fb f817 	bl	8000288 <__aeabi_dsub>
 800525a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800525e:	4680      	mov	r8, r0
 8005260:	4689      	mov	r9, r1
 8005262:	f7fb fc59 	bl	8000b18 <__aeabi_dcmpgt>
 8005266:	2800      	cmp	r0, #0
 8005268:	f040 8296 	bne.w	8005798 <_dtoa_r+0x990>
 800526c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005270:	4640      	mov	r0, r8
 8005272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005276:	4649      	mov	r1, r9
 8005278:	f7fb fc30 	bl	8000adc <__aeabi_dcmplt>
 800527c:	2800      	cmp	r0, #0
 800527e:	f040 8289 	bne.w	8005794 <_dtoa_r+0x98c>
 8005282:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005288:	2b00      	cmp	r3, #0
 800528a:	f2c0 814e 	blt.w	800552a <_dtoa_r+0x722>
 800528e:	f1bb 0f0e 	cmp.w	fp, #14
 8005292:	f300 814a 	bgt.w	800552a <_dtoa_r+0x722>
 8005296:	4b6b      	ldr	r3, [pc, #428]	; (8005444 <_dtoa_r+0x63c>)
 8005298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800529c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f280 80dc 	bge.w	8005460 <_dtoa_r+0x658>
 80052a8:	9b04      	ldr	r3, [sp, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f300 80d8 	bgt.w	8005460 <_dtoa_r+0x658>
 80052b0:	f040 826f 	bne.w	8005792 <_dtoa_r+0x98a>
 80052b4:	4b68      	ldr	r3, [pc, #416]	; (8005458 <_dtoa_r+0x650>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	4640      	mov	r0, r8
 80052ba:	4649      	mov	r1, r9
 80052bc:	f7fb f99c 	bl	80005f8 <__aeabi_dmul>
 80052c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052c4:	f7fb fc1e 	bl	8000b04 <__aeabi_dcmpge>
 80052c8:	9e04      	ldr	r6, [sp, #16]
 80052ca:	4637      	mov	r7, r6
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f040 8245 	bne.w	800575c <_dtoa_r+0x954>
 80052d2:	9d00      	ldr	r5, [sp, #0]
 80052d4:	2331      	movs	r3, #49	; 0x31
 80052d6:	f805 3b01 	strb.w	r3, [r5], #1
 80052da:	f10b 0b01 	add.w	fp, fp, #1
 80052de:	e241      	b.n	8005764 <_dtoa_r+0x95c>
 80052e0:	07f2      	lsls	r2, r6, #31
 80052e2:	d505      	bpl.n	80052f0 <_dtoa_r+0x4e8>
 80052e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e8:	f7fb f986 	bl	80005f8 <__aeabi_dmul>
 80052ec:	3501      	adds	r5, #1
 80052ee:	2301      	movs	r3, #1
 80052f0:	1076      	asrs	r6, r6, #1
 80052f2:	3708      	adds	r7, #8
 80052f4:	e773      	b.n	80051de <_dtoa_r+0x3d6>
 80052f6:	2502      	movs	r5, #2
 80052f8:	e775      	b.n	80051e6 <_dtoa_r+0x3de>
 80052fa:	9e04      	ldr	r6, [sp, #16]
 80052fc:	465f      	mov	r7, fp
 80052fe:	e792      	b.n	8005226 <_dtoa_r+0x41e>
 8005300:	9900      	ldr	r1, [sp, #0]
 8005302:	4b50      	ldr	r3, [pc, #320]	; (8005444 <_dtoa_r+0x63c>)
 8005304:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005308:	4431      	add	r1, r6
 800530a:	9102      	str	r1, [sp, #8]
 800530c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800530e:	eeb0 9a47 	vmov.f32	s18, s14
 8005312:	eef0 9a67 	vmov.f32	s19, s15
 8005316:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800531a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800531e:	2900      	cmp	r1, #0
 8005320:	d044      	beq.n	80053ac <_dtoa_r+0x5a4>
 8005322:	494e      	ldr	r1, [pc, #312]	; (800545c <_dtoa_r+0x654>)
 8005324:	2000      	movs	r0, #0
 8005326:	f7fb fa91 	bl	800084c <__aeabi_ddiv>
 800532a:	ec53 2b19 	vmov	r2, r3, d9
 800532e:	f7fa ffab 	bl	8000288 <__aeabi_dsub>
 8005332:	9d00      	ldr	r5, [sp, #0]
 8005334:	ec41 0b19 	vmov	d9, r0, r1
 8005338:	4649      	mov	r1, r9
 800533a:	4640      	mov	r0, r8
 800533c:	f7fb fc0c 	bl	8000b58 <__aeabi_d2iz>
 8005340:	4606      	mov	r6, r0
 8005342:	f7fb f8ef 	bl	8000524 <__aeabi_i2d>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4640      	mov	r0, r8
 800534c:	4649      	mov	r1, r9
 800534e:	f7fa ff9b 	bl	8000288 <__aeabi_dsub>
 8005352:	3630      	adds	r6, #48	; 0x30
 8005354:	f805 6b01 	strb.w	r6, [r5], #1
 8005358:	ec53 2b19 	vmov	r2, r3, d9
 800535c:	4680      	mov	r8, r0
 800535e:	4689      	mov	r9, r1
 8005360:	f7fb fbbc 	bl	8000adc <__aeabi_dcmplt>
 8005364:	2800      	cmp	r0, #0
 8005366:	d164      	bne.n	8005432 <_dtoa_r+0x62a>
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	4937      	ldr	r1, [pc, #220]	; (800544c <_dtoa_r+0x644>)
 800536e:	2000      	movs	r0, #0
 8005370:	f7fa ff8a 	bl	8000288 <__aeabi_dsub>
 8005374:	ec53 2b19 	vmov	r2, r3, d9
 8005378:	f7fb fbb0 	bl	8000adc <__aeabi_dcmplt>
 800537c:	2800      	cmp	r0, #0
 800537e:	f040 80b6 	bne.w	80054ee <_dtoa_r+0x6e6>
 8005382:	9b02      	ldr	r3, [sp, #8]
 8005384:	429d      	cmp	r5, r3
 8005386:	f43f af7c 	beq.w	8005282 <_dtoa_r+0x47a>
 800538a:	4b31      	ldr	r3, [pc, #196]	; (8005450 <_dtoa_r+0x648>)
 800538c:	ec51 0b19 	vmov	r0, r1, d9
 8005390:	2200      	movs	r2, #0
 8005392:	f7fb f931 	bl	80005f8 <__aeabi_dmul>
 8005396:	4b2e      	ldr	r3, [pc, #184]	; (8005450 <_dtoa_r+0x648>)
 8005398:	ec41 0b19 	vmov	d9, r0, r1
 800539c:	2200      	movs	r2, #0
 800539e:	4640      	mov	r0, r8
 80053a0:	4649      	mov	r1, r9
 80053a2:	f7fb f929 	bl	80005f8 <__aeabi_dmul>
 80053a6:	4680      	mov	r8, r0
 80053a8:	4689      	mov	r9, r1
 80053aa:	e7c5      	b.n	8005338 <_dtoa_r+0x530>
 80053ac:	ec51 0b17 	vmov	r0, r1, d7
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	9b02      	ldr	r3, [sp, #8]
 80053b6:	9d00      	ldr	r5, [sp, #0]
 80053b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80053ba:	ec41 0b19 	vmov	d9, r0, r1
 80053be:	4649      	mov	r1, r9
 80053c0:	4640      	mov	r0, r8
 80053c2:	f7fb fbc9 	bl	8000b58 <__aeabi_d2iz>
 80053c6:	4606      	mov	r6, r0
 80053c8:	f7fb f8ac 	bl	8000524 <__aeabi_i2d>
 80053cc:	3630      	adds	r6, #48	; 0x30
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4640      	mov	r0, r8
 80053d4:	4649      	mov	r1, r9
 80053d6:	f7fa ff57 	bl	8000288 <__aeabi_dsub>
 80053da:	f805 6b01 	strb.w	r6, [r5], #1
 80053de:	9b02      	ldr	r3, [sp, #8]
 80053e0:	429d      	cmp	r5, r3
 80053e2:	4680      	mov	r8, r0
 80053e4:	4689      	mov	r9, r1
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	d124      	bne.n	8005436 <_dtoa_r+0x62e>
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <_dtoa_r+0x654>)
 80053ee:	ec51 0b19 	vmov	r0, r1, d9
 80053f2:	f7fa ff4b 	bl	800028c <__adddf3>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4640      	mov	r0, r8
 80053fc:	4649      	mov	r1, r9
 80053fe:	f7fb fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 8005402:	2800      	cmp	r0, #0
 8005404:	d173      	bne.n	80054ee <_dtoa_r+0x6e6>
 8005406:	ec53 2b19 	vmov	r2, r3, d9
 800540a:	4914      	ldr	r1, [pc, #80]	; (800545c <_dtoa_r+0x654>)
 800540c:	2000      	movs	r0, #0
 800540e:	f7fa ff3b 	bl	8000288 <__aeabi_dsub>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4640      	mov	r0, r8
 8005418:	4649      	mov	r1, r9
 800541a:	f7fb fb5f 	bl	8000adc <__aeabi_dcmplt>
 800541e:	2800      	cmp	r0, #0
 8005420:	f43f af2f 	beq.w	8005282 <_dtoa_r+0x47a>
 8005424:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005426:	1e6b      	subs	r3, r5, #1
 8005428:	930f      	str	r3, [sp, #60]	; 0x3c
 800542a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800542e:	2b30      	cmp	r3, #48	; 0x30
 8005430:	d0f8      	beq.n	8005424 <_dtoa_r+0x61c>
 8005432:	46bb      	mov	fp, r7
 8005434:	e04a      	b.n	80054cc <_dtoa_r+0x6c4>
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <_dtoa_r+0x648>)
 8005438:	f7fb f8de 	bl	80005f8 <__aeabi_dmul>
 800543c:	4680      	mov	r8, r0
 800543e:	4689      	mov	r9, r1
 8005440:	e7bd      	b.n	80053be <_dtoa_r+0x5b6>
 8005442:	bf00      	nop
 8005444:	08008df8 	.word	0x08008df8
 8005448:	08008dd0 	.word	0x08008dd0
 800544c:	3ff00000 	.word	0x3ff00000
 8005450:	40240000 	.word	0x40240000
 8005454:	401c0000 	.word	0x401c0000
 8005458:	40140000 	.word	0x40140000
 800545c:	3fe00000 	.word	0x3fe00000
 8005460:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005464:	9d00      	ldr	r5, [sp, #0]
 8005466:	4642      	mov	r2, r8
 8005468:	464b      	mov	r3, r9
 800546a:	4630      	mov	r0, r6
 800546c:	4639      	mov	r1, r7
 800546e:	f7fb f9ed 	bl	800084c <__aeabi_ddiv>
 8005472:	f7fb fb71 	bl	8000b58 <__aeabi_d2iz>
 8005476:	9001      	str	r0, [sp, #4]
 8005478:	f7fb f854 	bl	8000524 <__aeabi_i2d>
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	f7fb f8ba 	bl	80005f8 <__aeabi_dmul>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4630      	mov	r0, r6
 800548a:	4639      	mov	r1, r7
 800548c:	f7fa fefc 	bl	8000288 <__aeabi_dsub>
 8005490:	9e01      	ldr	r6, [sp, #4]
 8005492:	9f04      	ldr	r7, [sp, #16]
 8005494:	3630      	adds	r6, #48	; 0x30
 8005496:	f805 6b01 	strb.w	r6, [r5], #1
 800549a:	9e00      	ldr	r6, [sp, #0]
 800549c:	1bae      	subs	r6, r5, r6
 800549e:	42b7      	cmp	r7, r6
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	d134      	bne.n	8005510 <_dtoa_r+0x708>
 80054a6:	f7fa fef1 	bl	800028c <__adddf3>
 80054aa:	4642      	mov	r2, r8
 80054ac:	464b      	mov	r3, r9
 80054ae:	4606      	mov	r6, r0
 80054b0:	460f      	mov	r7, r1
 80054b2:	f7fb fb31 	bl	8000b18 <__aeabi_dcmpgt>
 80054b6:	b9c8      	cbnz	r0, 80054ec <_dtoa_r+0x6e4>
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	4630      	mov	r0, r6
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fb fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c4:	b110      	cbz	r0, 80054cc <_dtoa_r+0x6c4>
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	07db      	lsls	r3, r3, #31
 80054ca:	d40f      	bmi.n	80054ec <_dtoa_r+0x6e4>
 80054cc:	4651      	mov	r1, sl
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 fbcc 	bl	8005c6c <_Bfree>
 80054d4:	2300      	movs	r3, #0
 80054d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054d8:	702b      	strb	r3, [r5, #0]
 80054da:	f10b 0301 	add.w	r3, fp, #1
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f43f ace2 	beq.w	8004eac <_dtoa_r+0xa4>
 80054e8:	601d      	str	r5, [r3, #0]
 80054ea:	e4df      	b.n	8004eac <_dtoa_r+0xa4>
 80054ec:	465f      	mov	r7, fp
 80054ee:	462b      	mov	r3, r5
 80054f0:	461d      	mov	r5, r3
 80054f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054f6:	2a39      	cmp	r2, #57	; 0x39
 80054f8:	d106      	bne.n	8005508 <_dtoa_r+0x700>
 80054fa:	9a00      	ldr	r2, [sp, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d1f7      	bne.n	80054f0 <_dtoa_r+0x6e8>
 8005500:	9900      	ldr	r1, [sp, #0]
 8005502:	2230      	movs	r2, #48	; 0x30
 8005504:	3701      	adds	r7, #1
 8005506:	700a      	strb	r2, [r1, #0]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	3201      	adds	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e790      	b.n	8005432 <_dtoa_r+0x62a>
 8005510:	4ba3      	ldr	r3, [pc, #652]	; (80057a0 <_dtoa_r+0x998>)
 8005512:	2200      	movs	r2, #0
 8005514:	f7fb f870 	bl	80005f8 <__aeabi_dmul>
 8005518:	2200      	movs	r2, #0
 800551a:	2300      	movs	r3, #0
 800551c:	4606      	mov	r6, r0
 800551e:	460f      	mov	r7, r1
 8005520:	f7fb fad2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005524:	2800      	cmp	r0, #0
 8005526:	d09e      	beq.n	8005466 <_dtoa_r+0x65e>
 8005528:	e7d0      	b.n	80054cc <_dtoa_r+0x6c4>
 800552a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800552c:	2a00      	cmp	r2, #0
 800552e:	f000 80ca 	beq.w	80056c6 <_dtoa_r+0x8be>
 8005532:	9a07      	ldr	r2, [sp, #28]
 8005534:	2a01      	cmp	r2, #1
 8005536:	f300 80ad 	bgt.w	8005694 <_dtoa_r+0x88c>
 800553a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800553c:	2a00      	cmp	r2, #0
 800553e:	f000 80a5 	beq.w	800568c <_dtoa_r+0x884>
 8005542:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005546:	9e08      	ldr	r6, [sp, #32]
 8005548:	9d05      	ldr	r5, [sp, #20]
 800554a:	9a05      	ldr	r2, [sp, #20]
 800554c:	441a      	add	r2, r3
 800554e:	9205      	str	r2, [sp, #20]
 8005550:	9a06      	ldr	r2, [sp, #24]
 8005552:	2101      	movs	r1, #1
 8005554:	441a      	add	r2, r3
 8005556:	4620      	mov	r0, r4
 8005558:	9206      	str	r2, [sp, #24]
 800555a:	f000 fc87 	bl	8005e6c <__i2b>
 800555e:	4607      	mov	r7, r0
 8005560:	b165      	cbz	r5, 800557c <_dtoa_r+0x774>
 8005562:	9b06      	ldr	r3, [sp, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	dd09      	ble.n	800557c <_dtoa_r+0x774>
 8005568:	42ab      	cmp	r3, r5
 800556a:	9a05      	ldr	r2, [sp, #20]
 800556c:	bfa8      	it	ge
 800556e:	462b      	movge	r3, r5
 8005570:	1ad2      	subs	r2, r2, r3
 8005572:	9205      	str	r2, [sp, #20]
 8005574:	9a06      	ldr	r2, [sp, #24]
 8005576:	1aed      	subs	r5, r5, r3
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	9306      	str	r3, [sp, #24]
 800557c:	9b08      	ldr	r3, [sp, #32]
 800557e:	b1f3      	cbz	r3, 80055be <_dtoa_r+0x7b6>
 8005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80a3 	beq.w	80056ce <_dtoa_r+0x8c6>
 8005588:	2e00      	cmp	r6, #0
 800558a:	dd10      	ble.n	80055ae <_dtoa_r+0x7a6>
 800558c:	4639      	mov	r1, r7
 800558e:	4632      	mov	r2, r6
 8005590:	4620      	mov	r0, r4
 8005592:	f000 fd2b 	bl	8005fec <__pow5mult>
 8005596:	4652      	mov	r2, sl
 8005598:	4601      	mov	r1, r0
 800559a:	4607      	mov	r7, r0
 800559c:	4620      	mov	r0, r4
 800559e:	f000 fc7b 	bl	8005e98 <__multiply>
 80055a2:	4651      	mov	r1, sl
 80055a4:	4680      	mov	r8, r0
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 fb60 	bl	8005c6c <_Bfree>
 80055ac:	46c2      	mov	sl, r8
 80055ae:	9b08      	ldr	r3, [sp, #32]
 80055b0:	1b9a      	subs	r2, r3, r6
 80055b2:	d004      	beq.n	80055be <_dtoa_r+0x7b6>
 80055b4:	4651      	mov	r1, sl
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 fd18 	bl	8005fec <__pow5mult>
 80055bc:	4682      	mov	sl, r0
 80055be:	2101      	movs	r1, #1
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fc53 	bl	8005e6c <__i2b>
 80055c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	4606      	mov	r6, r0
 80055cc:	f340 8081 	ble.w	80056d2 <_dtoa_r+0x8ca>
 80055d0:	461a      	mov	r2, r3
 80055d2:	4601      	mov	r1, r0
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 fd09 	bl	8005fec <__pow5mult>
 80055da:	9b07      	ldr	r3, [sp, #28]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	4606      	mov	r6, r0
 80055e0:	dd7a      	ble.n	80056d8 <_dtoa_r+0x8d0>
 80055e2:	f04f 0800 	mov.w	r8, #0
 80055e6:	6933      	ldr	r3, [r6, #16]
 80055e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055ec:	6918      	ldr	r0, [r3, #16]
 80055ee:	f000 fbef 	bl	8005dd0 <__hi0bits>
 80055f2:	f1c0 0020 	rsb	r0, r0, #32
 80055f6:	9b06      	ldr	r3, [sp, #24]
 80055f8:	4418      	add	r0, r3
 80055fa:	f010 001f 	ands.w	r0, r0, #31
 80055fe:	f000 8094 	beq.w	800572a <_dtoa_r+0x922>
 8005602:	f1c0 0320 	rsb	r3, r0, #32
 8005606:	2b04      	cmp	r3, #4
 8005608:	f340 8085 	ble.w	8005716 <_dtoa_r+0x90e>
 800560c:	9b05      	ldr	r3, [sp, #20]
 800560e:	f1c0 001c 	rsb	r0, r0, #28
 8005612:	4403      	add	r3, r0
 8005614:	9305      	str	r3, [sp, #20]
 8005616:	9b06      	ldr	r3, [sp, #24]
 8005618:	4403      	add	r3, r0
 800561a:	4405      	add	r5, r0
 800561c:	9306      	str	r3, [sp, #24]
 800561e:	9b05      	ldr	r3, [sp, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	dd05      	ble.n	8005630 <_dtoa_r+0x828>
 8005624:	4651      	mov	r1, sl
 8005626:	461a      	mov	r2, r3
 8005628:	4620      	mov	r0, r4
 800562a:	f000 fd39 	bl	80060a0 <__lshift>
 800562e:	4682      	mov	sl, r0
 8005630:	9b06      	ldr	r3, [sp, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	dd05      	ble.n	8005642 <_dtoa_r+0x83a>
 8005636:	4631      	mov	r1, r6
 8005638:	461a      	mov	r2, r3
 800563a:	4620      	mov	r0, r4
 800563c:	f000 fd30 	bl	80060a0 <__lshift>
 8005640:	4606      	mov	r6, r0
 8005642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005644:	2b00      	cmp	r3, #0
 8005646:	d072      	beq.n	800572e <_dtoa_r+0x926>
 8005648:	4631      	mov	r1, r6
 800564a:	4650      	mov	r0, sl
 800564c:	f000 fd94 	bl	8006178 <__mcmp>
 8005650:	2800      	cmp	r0, #0
 8005652:	da6c      	bge.n	800572e <_dtoa_r+0x926>
 8005654:	2300      	movs	r3, #0
 8005656:	4651      	mov	r1, sl
 8005658:	220a      	movs	r2, #10
 800565a:	4620      	mov	r0, r4
 800565c:	f000 fb28 	bl	8005cb0 <__multadd>
 8005660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005662:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005666:	4682      	mov	sl, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 81b0 	beq.w	80059ce <_dtoa_r+0xbc6>
 800566e:	2300      	movs	r3, #0
 8005670:	4639      	mov	r1, r7
 8005672:	220a      	movs	r2, #10
 8005674:	4620      	mov	r0, r4
 8005676:	f000 fb1b 	bl	8005cb0 <__multadd>
 800567a:	9b01      	ldr	r3, [sp, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	4607      	mov	r7, r0
 8005680:	f300 8096 	bgt.w	80057b0 <_dtoa_r+0x9a8>
 8005684:	9b07      	ldr	r3, [sp, #28]
 8005686:	2b02      	cmp	r3, #2
 8005688:	dc59      	bgt.n	800573e <_dtoa_r+0x936>
 800568a:	e091      	b.n	80057b0 <_dtoa_r+0x9a8>
 800568c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800568e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005692:	e758      	b.n	8005546 <_dtoa_r+0x73e>
 8005694:	9b04      	ldr	r3, [sp, #16]
 8005696:	1e5e      	subs	r6, r3, #1
 8005698:	9b08      	ldr	r3, [sp, #32]
 800569a:	42b3      	cmp	r3, r6
 800569c:	bfbf      	itttt	lt
 800569e:	9b08      	ldrlt	r3, [sp, #32]
 80056a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80056a2:	9608      	strlt	r6, [sp, #32]
 80056a4:	1af3      	sublt	r3, r6, r3
 80056a6:	bfb4      	ite	lt
 80056a8:	18d2      	addlt	r2, r2, r3
 80056aa:	1b9e      	subge	r6, r3, r6
 80056ac:	9b04      	ldr	r3, [sp, #16]
 80056ae:	bfbc      	itt	lt
 80056b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80056b2:	2600      	movlt	r6, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfb7      	itett	lt
 80056b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80056bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80056c0:	1a9d      	sublt	r5, r3, r2
 80056c2:	2300      	movlt	r3, #0
 80056c4:	e741      	b.n	800554a <_dtoa_r+0x742>
 80056c6:	9e08      	ldr	r6, [sp, #32]
 80056c8:	9d05      	ldr	r5, [sp, #20]
 80056ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056cc:	e748      	b.n	8005560 <_dtoa_r+0x758>
 80056ce:	9a08      	ldr	r2, [sp, #32]
 80056d0:	e770      	b.n	80055b4 <_dtoa_r+0x7ac>
 80056d2:	9b07      	ldr	r3, [sp, #28]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	dc19      	bgt.n	800570c <_dtoa_r+0x904>
 80056d8:	9b02      	ldr	r3, [sp, #8]
 80056da:	b9bb      	cbnz	r3, 800570c <_dtoa_r+0x904>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e2:	b99b      	cbnz	r3, 800570c <_dtoa_r+0x904>
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ea:	0d1b      	lsrs	r3, r3, #20
 80056ec:	051b      	lsls	r3, r3, #20
 80056ee:	b183      	cbz	r3, 8005712 <_dtoa_r+0x90a>
 80056f0:	9b05      	ldr	r3, [sp, #20]
 80056f2:	3301      	adds	r3, #1
 80056f4:	9305      	str	r3, [sp, #20]
 80056f6:	9b06      	ldr	r3, [sp, #24]
 80056f8:	3301      	adds	r3, #1
 80056fa:	9306      	str	r3, [sp, #24]
 80056fc:	f04f 0801 	mov.w	r8, #1
 8005700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005702:	2b00      	cmp	r3, #0
 8005704:	f47f af6f 	bne.w	80055e6 <_dtoa_r+0x7de>
 8005708:	2001      	movs	r0, #1
 800570a:	e774      	b.n	80055f6 <_dtoa_r+0x7ee>
 800570c:	f04f 0800 	mov.w	r8, #0
 8005710:	e7f6      	b.n	8005700 <_dtoa_r+0x8f8>
 8005712:	4698      	mov	r8, r3
 8005714:	e7f4      	b.n	8005700 <_dtoa_r+0x8f8>
 8005716:	d082      	beq.n	800561e <_dtoa_r+0x816>
 8005718:	9a05      	ldr	r2, [sp, #20]
 800571a:	331c      	adds	r3, #28
 800571c:	441a      	add	r2, r3
 800571e:	9205      	str	r2, [sp, #20]
 8005720:	9a06      	ldr	r2, [sp, #24]
 8005722:	441a      	add	r2, r3
 8005724:	441d      	add	r5, r3
 8005726:	9206      	str	r2, [sp, #24]
 8005728:	e779      	b.n	800561e <_dtoa_r+0x816>
 800572a:	4603      	mov	r3, r0
 800572c:	e7f4      	b.n	8005718 <_dtoa_r+0x910>
 800572e:	9b04      	ldr	r3, [sp, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dc37      	bgt.n	80057a4 <_dtoa_r+0x99c>
 8005734:	9b07      	ldr	r3, [sp, #28]
 8005736:	2b02      	cmp	r3, #2
 8005738:	dd34      	ble.n	80057a4 <_dtoa_r+0x99c>
 800573a:	9b04      	ldr	r3, [sp, #16]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	9b01      	ldr	r3, [sp, #4]
 8005740:	b963      	cbnz	r3, 800575c <_dtoa_r+0x954>
 8005742:	4631      	mov	r1, r6
 8005744:	2205      	movs	r2, #5
 8005746:	4620      	mov	r0, r4
 8005748:	f000 fab2 	bl	8005cb0 <__multadd>
 800574c:	4601      	mov	r1, r0
 800574e:	4606      	mov	r6, r0
 8005750:	4650      	mov	r0, sl
 8005752:	f000 fd11 	bl	8006178 <__mcmp>
 8005756:	2800      	cmp	r0, #0
 8005758:	f73f adbb 	bgt.w	80052d2 <_dtoa_r+0x4ca>
 800575c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800575e:	9d00      	ldr	r5, [sp, #0]
 8005760:	ea6f 0b03 	mvn.w	fp, r3
 8005764:	f04f 0800 	mov.w	r8, #0
 8005768:	4631      	mov	r1, r6
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fa7e 	bl	8005c6c <_Bfree>
 8005770:	2f00      	cmp	r7, #0
 8005772:	f43f aeab 	beq.w	80054cc <_dtoa_r+0x6c4>
 8005776:	f1b8 0f00 	cmp.w	r8, #0
 800577a:	d005      	beq.n	8005788 <_dtoa_r+0x980>
 800577c:	45b8      	cmp	r8, r7
 800577e:	d003      	beq.n	8005788 <_dtoa_r+0x980>
 8005780:	4641      	mov	r1, r8
 8005782:	4620      	mov	r0, r4
 8005784:	f000 fa72 	bl	8005c6c <_Bfree>
 8005788:	4639      	mov	r1, r7
 800578a:	4620      	mov	r0, r4
 800578c:	f000 fa6e 	bl	8005c6c <_Bfree>
 8005790:	e69c      	b.n	80054cc <_dtoa_r+0x6c4>
 8005792:	2600      	movs	r6, #0
 8005794:	4637      	mov	r7, r6
 8005796:	e7e1      	b.n	800575c <_dtoa_r+0x954>
 8005798:	46bb      	mov	fp, r7
 800579a:	4637      	mov	r7, r6
 800579c:	e599      	b.n	80052d2 <_dtoa_r+0x4ca>
 800579e:	bf00      	nop
 80057a0:	40240000 	.word	0x40240000
 80057a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80c8 	beq.w	800593c <_dtoa_r+0xb34>
 80057ac:	9b04      	ldr	r3, [sp, #16]
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	dd05      	ble.n	80057c0 <_dtoa_r+0x9b8>
 80057b4:	4639      	mov	r1, r7
 80057b6:	462a      	mov	r2, r5
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fc71 	bl	80060a0 <__lshift>
 80057be:	4607      	mov	r7, r0
 80057c0:	f1b8 0f00 	cmp.w	r8, #0
 80057c4:	d05b      	beq.n	800587e <_dtoa_r+0xa76>
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fa0f 	bl	8005bec <_Balloc>
 80057ce:	4605      	mov	r5, r0
 80057d0:	b928      	cbnz	r0, 80057de <_dtoa_r+0x9d6>
 80057d2:	4b83      	ldr	r3, [pc, #524]	; (80059e0 <_dtoa_r+0xbd8>)
 80057d4:	4602      	mov	r2, r0
 80057d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80057da:	f7ff bb2e 	b.w	8004e3a <_dtoa_r+0x32>
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	3202      	adds	r2, #2
 80057e2:	0092      	lsls	r2, r2, #2
 80057e4:	f107 010c 	add.w	r1, r7, #12
 80057e8:	300c      	adds	r0, #12
 80057ea:	f7ff fa6e 	bl	8004cca <memcpy>
 80057ee:	2201      	movs	r2, #1
 80057f0:	4629      	mov	r1, r5
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 fc54 	bl	80060a0 <__lshift>
 80057f8:	9b00      	ldr	r3, [sp, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005802:	4413      	add	r3, r2
 8005804:	9308      	str	r3, [sp, #32]
 8005806:	9b02      	ldr	r3, [sp, #8]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	46b8      	mov	r8, r7
 800580e:	9306      	str	r3, [sp, #24]
 8005810:	4607      	mov	r7, r0
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	4631      	mov	r1, r6
 8005816:	3b01      	subs	r3, #1
 8005818:	4650      	mov	r0, sl
 800581a:	9301      	str	r3, [sp, #4]
 800581c:	f7ff fa6a 	bl	8004cf4 <quorem>
 8005820:	4641      	mov	r1, r8
 8005822:	9002      	str	r0, [sp, #8]
 8005824:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005828:	4650      	mov	r0, sl
 800582a:	f000 fca5 	bl	8006178 <__mcmp>
 800582e:	463a      	mov	r2, r7
 8005830:	9005      	str	r0, [sp, #20]
 8005832:	4631      	mov	r1, r6
 8005834:	4620      	mov	r0, r4
 8005836:	f000 fcbb 	bl	80061b0 <__mdiff>
 800583a:	68c2      	ldr	r2, [r0, #12]
 800583c:	4605      	mov	r5, r0
 800583e:	bb02      	cbnz	r2, 8005882 <_dtoa_r+0xa7a>
 8005840:	4601      	mov	r1, r0
 8005842:	4650      	mov	r0, sl
 8005844:	f000 fc98 	bl	8006178 <__mcmp>
 8005848:	4602      	mov	r2, r0
 800584a:	4629      	mov	r1, r5
 800584c:	4620      	mov	r0, r4
 800584e:	9209      	str	r2, [sp, #36]	; 0x24
 8005850:	f000 fa0c 	bl	8005c6c <_Bfree>
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005858:	9d04      	ldr	r5, [sp, #16]
 800585a:	ea43 0102 	orr.w	r1, r3, r2
 800585e:	9b06      	ldr	r3, [sp, #24]
 8005860:	4319      	orrs	r1, r3
 8005862:	d110      	bne.n	8005886 <_dtoa_r+0xa7e>
 8005864:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005868:	d029      	beq.n	80058be <_dtoa_r+0xab6>
 800586a:	9b05      	ldr	r3, [sp, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	dd02      	ble.n	8005876 <_dtoa_r+0xa6e>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	f883 9000 	strb.w	r9, [r3]
 800587c:	e774      	b.n	8005768 <_dtoa_r+0x960>
 800587e:	4638      	mov	r0, r7
 8005880:	e7ba      	b.n	80057f8 <_dtoa_r+0x9f0>
 8005882:	2201      	movs	r2, #1
 8005884:	e7e1      	b.n	800584a <_dtoa_r+0xa42>
 8005886:	9b05      	ldr	r3, [sp, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	db04      	blt.n	8005896 <_dtoa_r+0xa8e>
 800588c:	9907      	ldr	r1, [sp, #28]
 800588e:	430b      	orrs	r3, r1
 8005890:	9906      	ldr	r1, [sp, #24]
 8005892:	430b      	orrs	r3, r1
 8005894:	d120      	bne.n	80058d8 <_dtoa_r+0xad0>
 8005896:	2a00      	cmp	r2, #0
 8005898:	dded      	ble.n	8005876 <_dtoa_r+0xa6e>
 800589a:	4651      	mov	r1, sl
 800589c:	2201      	movs	r2, #1
 800589e:	4620      	mov	r0, r4
 80058a0:	f000 fbfe 	bl	80060a0 <__lshift>
 80058a4:	4631      	mov	r1, r6
 80058a6:	4682      	mov	sl, r0
 80058a8:	f000 fc66 	bl	8006178 <__mcmp>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	dc03      	bgt.n	80058b8 <_dtoa_r+0xab0>
 80058b0:	d1e1      	bne.n	8005876 <_dtoa_r+0xa6e>
 80058b2:	f019 0f01 	tst.w	r9, #1
 80058b6:	d0de      	beq.n	8005876 <_dtoa_r+0xa6e>
 80058b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058bc:	d1d8      	bne.n	8005870 <_dtoa_r+0xa68>
 80058be:	9a01      	ldr	r2, [sp, #4]
 80058c0:	2339      	movs	r3, #57	; 0x39
 80058c2:	7013      	strb	r3, [r2, #0]
 80058c4:	462b      	mov	r3, r5
 80058c6:	461d      	mov	r5, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058ce:	2a39      	cmp	r2, #57	; 0x39
 80058d0:	d06c      	beq.n	80059ac <_dtoa_r+0xba4>
 80058d2:	3201      	adds	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e747      	b.n	8005768 <_dtoa_r+0x960>
 80058d8:	2a00      	cmp	r2, #0
 80058da:	dd07      	ble.n	80058ec <_dtoa_r+0xae4>
 80058dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058e0:	d0ed      	beq.n	80058be <_dtoa_r+0xab6>
 80058e2:	9a01      	ldr	r2, [sp, #4]
 80058e4:	f109 0301 	add.w	r3, r9, #1
 80058e8:	7013      	strb	r3, [r2, #0]
 80058ea:	e73d      	b.n	8005768 <_dtoa_r+0x960>
 80058ec:	9b04      	ldr	r3, [sp, #16]
 80058ee:	9a08      	ldr	r2, [sp, #32]
 80058f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d043      	beq.n	8005980 <_dtoa_r+0xb78>
 80058f8:	4651      	mov	r1, sl
 80058fa:	2300      	movs	r3, #0
 80058fc:	220a      	movs	r2, #10
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 f9d6 	bl	8005cb0 <__multadd>
 8005904:	45b8      	cmp	r8, r7
 8005906:	4682      	mov	sl, r0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	f04f 020a 	mov.w	r2, #10
 8005910:	4641      	mov	r1, r8
 8005912:	4620      	mov	r0, r4
 8005914:	d107      	bne.n	8005926 <_dtoa_r+0xb1e>
 8005916:	f000 f9cb 	bl	8005cb0 <__multadd>
 800591a:	4680      	mov	r8, r0
 800591c:	4607      	mov	r7, r0
 800591e:	9b04      	ldr	r3, [sp, #16]
 8005920:	3301      	adds	r3, #1
 8005922:	9304      	str	r3, [sp, #16]
 8005924:	e775      	b.n	8005812 <_dtoa_r+0xa0a>
 8005926:	f000 f9c3 	bl	8005cb0 <__multadd>
 800592a:	4639      	mov	r1, r7
 800592c:	4680      	mov	r8, r0
 800592e:	2300      	movs	r3, #0
 8005930:	220a      	movs	r2, #10
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f9bc 	bl	8005cb0 <__multadd>
 8005938:	4607      	mov	r7, r0
 800593a:	e7f0      	b.n	800591e <_dtoa_r+0xb16>
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	9d00      	ldr	r5, [sp, #0]
 8005942:	4631      	mov	r1, r6
 8005944:	4650      	mov	r0, sl
 8005946:	f7ff f9d5 	bl	8004cf4 <quorem>
 800594a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800594e:	9b00      	ldr	r3, [sp, #0]
 8005950:	f805 9b01 	strb.w	r9, [r5], #1
 8005954:	1aea      	subs	r2, r5, r3
 8005956:	9b01      	ldr	r3, [sp, #4]
 8005958:	4293      	cmp	r3, r2
 800595a:	dd07      	ble.n	800596c <_dtoa_r+0xb64>
 800595c:	4651      	mov	r1, sl
 800595e:	2300      	movs	r3, #0
 8005960:	220a      	movs	r2, #10
 8005962:	4620      	mov	r0, r4
 8005964:	f000 f9a4 	bl	8005cb0 <__multadd>
 8005968:	4682      	mov	sl, r0
 800596a:	e7ea      	b.n	8005942 <_dtoa_r+0xb3a>
 800596c:	9b01      	ldr	r3, [sp, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	bfc8      	it	gt
 8005972:	461d      	movgt	r5, r3
 8005974:	9b00      	ldr	r3, [sp, #0]
 8005976:	bfd8      	it	le
 8005978:	2501      	movle	r5, #1
 800597a:	441d      	add	r5, r3
 800597c:	f04f 0800 	mov.w	r8, #0
 8005980:	4651      	mov	r1, sl
 8005982:	2201      	movs	r2, #1
 8005984:	4620      	mov	r0, r4
 8005986:	f000 fb8b 	bl	80060a0 <__lshift>
 800598a:	4631      	mov	r1, r6
 800598c:	4682      	mov	sl, r0
 800598e:	f000 fbf3 	bl	8006178 <__mcmp>
 8005992:	2800      	cmp	r0, #0
 8005994:	dc96      	bgt.n	80058c4 <_dtoa_r+0xabc>
 8005996:	d102      	bne.n	800599e <_dtoa_r+0xb96>
 8005998:	f019 0f01 	tst.w	r9, #1
 800599c:	d192      	bne.n	80058c4 <_dtoa_r+0xabc>
 800599e:	462b      	mov	r3, r5
 80059a0:	461d      	mov	r5, r3
 80059a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059a6:	2a30      	cmp	r2, #48	; 0x30
 80059a8:	d0fa      	beq.n	80059a0 <_dtoa_r+0xb98>
 80059aa:	e6dd      	b.n	8005768 <_dtoa_r+0x960>
 80059ac:	9a00      	ldr	r2, [sp, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d189      	bne.n	80058c6 <_dtoa_r+0xabe>
 80059b2:	f10b 0b01 	add.w	fp, fp, #1
 80059b6:	2331      	movs	r3, #49	; 0x31
 80059b8:	e796      	b.n	80058e8 <_dtoa_r+0xae0>
 80059ba:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <_dtoa_r+0xbdc>)
 80059bc:	f7ff ba99 	b.w	8004ef2 <_dtoa_r+0xea>
 80059c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f47f aa6d 	bne.w	8004ea2 <_dtoa_r+0x9a>
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <_dtoa_r+0xbe0>)
 80059ca:	f7ff ba92 	b.w	8004ef2 <_dtoa_r+0xea>
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dcb5      	bgt.n	8005940 <_dtoa_r+0xb38>
 80059d4:	9b07      	ldr	r3, [sp, #28]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f73f aeb1 	bgt.w	800573e <_dtoa_r+0x936>
 80059dc:	e7b0      	b.n	8005940 <_dtoa_r+0xb38>
 80059de:	bf00      	nop
 80059e0:	08008d60 	.word	0x08008d60
 80059e4:	08008f47 	.word	0x08008f47
 80059e8:	08008ce4 	.word	0x08008ce4

080059ec <_free_r>:
 80059ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059ee:	2900      	cmp	r1, #0
 80059f0:	d044      	beq.n	8005a7c <_free_r+0x90>
 80059f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f6:	9001      	str	r0, [sp, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f1a1 0404 	sub.w	r4, r1, #4
 80059fe:	bfb8      	it	lt
 8005a00:	18e4      	addlt	r4, r4, r3
 8005a02:	f000 f8e7 	bl	8005bd4 <__malloc_lock>
 8005a06:	4a1e      	ldr	r2, [pc, #120]	; (8005a80 <_free_r+0x94>)
 8005a08:	9801      	ldr	r0, [sp, #4]
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	b933      	cbnz	r3, 8005a1c <_free_r+0x30>
 8005a0e:	6063      	str	r3, [r4, #4]
 8005a10:	6014      	str	r4, [r2, #0]
 8005a12:	b003      	add	sp, #12
 8005a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a18:	f000 b8e2 	b.w	8005be0 <__malloc_unlock>
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d908      	bls.n	8005a32 <_free_r+0x46>
 8005a20:	6825      	ldr	r5, [r4, #0]
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf01      	itttt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	1949      	addeq	r1, r1, r5
 8005a2e:	6021      	streq	r1, [r4, #0]
 8005a30:	e7ed      	b.n	8005a0e <_free_r+0x22>
 8005a32:	461a      	mov	r2, r3
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	b10b      	cbz	r3, 8005a3c <_free_r+0x50>
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d9fa      	bls.n	8005a32 <_free_r+0x46>
 8005a3c:	6811      	ldr	r1, [r2, #0]
 8005a3e:	1855      	adds	r5, r2, r1
 8005a40:	42a5      	cmp	r5, r4
 8005a42:	d10b      	bne.n	8005a5c <_free_r+0x70>
 8005a44:	6824      	ldr	r4, [r4, #0]
 8005a46:	4421      	add	r1, r4
 8005a48:	1854      	adds	r4, r2, r1
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	6011      	str	r1, [r2, #0]
 8005a4e:	d1e0      	bne.n	8005a12 <_free_r+0x26>
 8005a50:	681c      	ldr	r4, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	6053      	str	r3, [r2, #4]
 8005a56:	440c      	add	r4, r1
 8005a58:	6014      	str	r4, [r2, #0]
 8005a5a:	e7da      	b.n	8005a12 <_free_r+0x26>
 8005a5c:	d902      	bls.n	8005a64 <_free_r+0x78>
 8005a5e:	230c      	movs	r3, #12
 8005a60:	6003      	str	r3, [r0, #0]
 8005a62:	e7d6      	b.n	8005a12 <_free_r+0x26>
 8005a64:	6825      	ldr	r5, [r4, #0]
 8005a66:	1961      	adds	r1, r4, r5
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	bf04      	itt	eq
 8005a6c:	6819      	ldreq	r1, [r3, #0]
 8005a6e:	685b      	ldreq	r3, [r3, #4]
 8005a70:	6063      	str	r3, [r4, #4]
 8005a72:	bf04      	itt	eq
 8005a74:	1949      	addeq	r1, r1, r5
 8005a76:	6021      	streq	r1, [r4, #0]
 8005a78:	6054      	str	r4, [r2, #4]
 8005a7a:	e7ca      	b.n	8005a12 <_free_r+0x26>
 8005a7c:	b003      	add	sp, #12
 8005a7e:	bd30      	pop	{r4, r5, pc}
 8005a80:	200004c4 	.word	0x200004c4

08005a84 <malloc>:
 8005a84:	4b02      	ldr	r3, [pc, #8]	; (8005a90 <malloc+0xc>)
 8005a86:	4601      	mov	r1, r0
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	f000 b823 	b.w	8005ad4 <_malloc_r>
 8005a8e:	bf00      	nop
 8005a90:	20000064 	.word	0x20000064

08005a94 <sbrk_aligned>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4e0e      	ldr	r6, [pc, #56]	; (8005ad0 <sbrk_aligned+0x3c>)
 8005a98:	460c      	mov	r4, r1
 8005a9a:	6831      	ldr	r1, [r6, #0]
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	b911      	cbnz	r1, 8005aa6 <sbrk_aligned+0x12>
 8005aa0:	f002 f92a 	bl	8007cf8 <_sbrk_r>
 8005aa4:	6030      	str	r0, [r6, #0]
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f002 f925 	bl	8007cf8 <_sbrk_r>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d00a      	beq.n	8005ac8 <sbrk_aligned+0x34>
 8005ab2:	1cc4      	adds	r4, r0, #3
 8005ab4:	f024 0403 	bic.w	r4, r4, #3
 8005ab8:	42a0      	cmp	r0, r4
 8005aba:	d007      	beq.n	8005acc <sbrk_aligned+0x38>
 8005abc:	1a21      	subs	r1, r4, r0
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f002 f91a 	bl	8007cf8 <_sbrk_r>
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d101      	bne.n	8005acc <sbrk_aligned+0x38>
 8005ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8005acc:	4620      	mov	r0, r4
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	200004c8 	.word	0x200004c8

08005ad4 <_malloc_r>:
 8005ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	1ccd      	adds	r5, r1, #3
 8005ada:	f025 0503 	bic.w	r5, r5, #3
 8005ade:	3508      	adds	r5, #8
 8005ae0:	2d0c      	cmp	r5, #12
 8005ae2:	bf38      	it	cc
 8005ae4:	250c      	movcc	r5, #12
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	4607      	mov	r7, r0
 8005aea:	db01      	blt.n	8005af0 <_malloc_r+0x1c>
 8005aec:	42a9      	cmp	r1, r5
 8005aee:	d905      	bls.n	8005afc <_malloc_r+0x28>
 8005af0:	230c      	movs	r3, #12
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	2600      	movs	r6, #0
 8005af6:	4630      	mov	r0, r6
 8005af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005afc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bd0 <_malloc_r+0xfc>
 8005b00:	f000 f868 	bl	8005bd4 <__malloc_lock>
 8005b04:	f8d8 3000 	ldr.w	r3, [r8]
 8005b08:	461c      	mov	r4, r3
 8005b0a:	bb5c      	cbnz	r4, 8005b64 <_malloc_r+0x90>
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f7ff ffc0 	bl	8005a94 <sbrk_aligned>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	4604      	mov	r4, r0
 8005b18:	d155      	bne.n	8005bc6 <_malloc_r+0xf2>
 8005b1a:	f8d8 4000 	ldr.w	r4, [r8]
 8005b1e:	4626      	mov	r6, r4
 8005b20:	2e00      	cmp	r6, #0
 8005b22:	d145      	bne.n	8005bb0 <_malloc_r+0xdc>
 8005b24:	2c00      	cmp	r4, #0
 8005b26:	d048      	beq.n	8005bba <_malloc_r+0xe6>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	eb04 0903 	add.w	r9, r4, r3
 8005b32:	f002 f8e1 	bl	8007cf8 <_sbrk_r>
 8005b36:	4581      	cmp	r9, r0
 8005b38:	d13f      	bne.n	8005bba <_malloc_r+0xe6>
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	1a6d      	subs	r5, r5, r1
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4638      	mov	r0, r7
 8005b42:	f7ff ffa7 	bl	8005a94 <sbrk_aligned>
 8005b46:	3001      	adds	r0, #1
 8005b48:	d037      	beq.n	8005bba <_malloc_r+0xe6>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	442b      	add	r3, r5
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	f8d8 3000 	ldr.w	r3, [r8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d038      	beq.n	8005bca <_malloc_r+0xf6>
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	42a2      	cmp	r2, r4
 8005b5c:	d12b      	bne.n	8005bb6 <_malloc_r+0xe2>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	e00f      	b.n	8005b84 <_malloc_r+0xb0>
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	1b52      	subs	r2, r2, r5
 8005b68:	d41f      	bmi.n	8005baa <_malloc_r+0xd6>
 8005b6a:	2a0b      	cmp	r2, #11
 8005b6c:	d917      	bls.n	8005b9e <_malloc_r+0xca>
 8005b6e:	1961      	adds	r1, r4, r5
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	6025      	str	r5, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	6059      	strne	r1, [r3, #4]
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	bf08      	it	eq
 8005b7c:	f8c8 1000 	streq.w	r1, [r8]
 8005b80:	5162      	str	r2, [r4, r5]
 8005b82:	604b      	str	r3, [r1, #4]
 8005b84:	4638      	mov	r0, r7
 8005b86:	f104 060b 	add.w	r6, r4, #11
 8005b8a:	f000 f829 	bl	8005be0 <__malloc_unlock>
 8005b8e:	f026 0607 	bic.w	r6, r6, #7
 8005b92:	1d23      	adds	r3, r4, #4
 8005b94:	1af2      	subs	r2, r6, r3
 8005b96:	d0ae      	beq.n	8005af6 <_malloc_r+0x22>
 8005b98:	1b9b      	subs	r3, r3, r6
 8005b9a:	50a3      	str	r3, [r4, r2]
 8005b9c:	e7ab      	b.n	8005af6 <_malloc_r+0x22>
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	6862      	ldr	r2, [r4, #4]
 8005ba2:	d1dd      	bne.n	8005b60 <_malloc_r+0x8c>
 8005ba4:	f8c8 2000 	str.w	r2, [r8]
 8005ba8:	e7ec      	b.n	8005b84 <_malloc_r+0xb0>
 8005baa:	4623      	mov	r3, r4
 8005bac:	6864      	ldr	r4, [r4, #4]
 8005bae:	e7ac      	b.n	8005b0a <_malloc_r+0x36>
 8005bb0:	4634      	mov	r4, r6
 8005bb2:	6876      	ldr	r6, [r6, #4]
 8005bb4:	e7b4      	b.n	8005b20 <_malloc_r+0x4c>
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	e7cc      	b.n	8005b54 <_malloc_r+0x80>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	f000 f80e 	bl	8005be0 <__malloc_unlock>
 8005bc4:	e797      	b.n	8005af6 <_malloc_r+0x22>
 8005bc6:	6025      	str	r5, [r4, #0]
 8005bc8:	e7dc      	b.n	8005b84 <_malloc_r+0xb0>
 8005bca:	605b      	str	r3, [r3, #4]
 8005bcc:	deff      	udf	#255	; 0xff
 8005bce:	bf00      	nop
 8005bd0:	200004c4 	.word	0x200004c4

08005bd4 <__malloc_lock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__malloc_lock+0x8>)
 8005bd6:	f7ff b876 	b.w	8004cc6 <__retarget_lock_acquire_recursive>
 8005bda:	bf00      	nop
 8005bdc:	200004c0 	.word	0x200004c0

08005be0 <__malloc_unlock>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__malloc_unlock+0x8>)
 8005be2:	f7ff b871 	b.w	8004cc8 <__retarget_lock_release_recursive>
 8005be6:	bf00      	nop
 8005be8:	200004c0 	.word	0x200004c0

08005bec <_Balloc>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	69c6      	ldr	r6, [r0, #28]
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	b976      	cbnz	r6, 8005c14 <_Balloc+0x28>
 8005bf6:	2010      	movs	r0, #16
 8005bf8:	f7ff ff44 	bl	8005a84 <malloc>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	61e0      	str	r0, [r4, #28]
 8005c00:	b920      	cbnz	r0, 8005c0c <_Balloc+0x20>
 8005c02:	4b18      	ldr	r3, [pc, #96]	; (8005c64 <_Balloc+0x78>)
 8005c04:	4818      	ldr	r0, [pc, #96]	; (8005c68 <_Balloc+0x7c>)
 8005c06:	216b      	movs	r1, #107	; 0x6b
 8005c08:	f002 f88e 	bl	8007d28 <__assert_func>
 8005c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c10:	6006      	str	r6, [r0, #0]
 8005c12:	60c6      	str	r6, [r0, #12]
 8005c14:	69e6      	ldr	r6, [r4, #28]
 8005c16:	68f3      	ldr	r3, [r6, #12]
 8005c18:	b183      	cbz	r3, 8005c3c <_Balloc+0x50>
 8005c1a:	69e3      	ldr	r3, [r4, #28]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c22:	b9b8      	cbnz	r0, 8005c54 <_Balloc+0x68>
 8005c24:	2101      	movs	r1, #1
 8005c26:	fa01 f605 	lsl.w	r6, r1, r5
 8005c2a:	1d72      	adds	r2, r6, #5
 8005c2c:	0092      	lsls	r2, r2, #2
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f002 f898 	bl	8007d64 <_calloc_r>
 8005c34:	b160      	cbz	r0, 8005c50 <_Balloc+0x64>
 8005c36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c3a:	e00e      	b.n	8005c5a <_Balloc+0x6e>
 8005c3c:	2221      	movs	r2, #33	; 0x21
 8005c3e:	2104      	movs	r1, #4
 8005c40:	4620      	mov	r0, r4
 8005c42:	f002 f88f 	bl	8007d64 <_calloc_r>
 8005c46:	69e3      	ldr	r3, [r4, #28]
 8005c48:	60f0      	str	r0, [r6, #12]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e4      	bne.n	8005c1a <_Balloc+0x2e>
 8005c50:	2000      	movs	r0, #0
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	6802      	ldr	r2, [r0, #0]
 8005c56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c60:	e7f7      	b.n	8005c52 <_Balloc+0x66>
 8005c62:	bf00      	nop
 8005c64:	08008cf1 	.word	0x08008cf1
 8005c68:	08008d71 	.word	0x08008d71

08005c6c <_Bfree>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	69c6      	ldr	r6, [r0, #28]
 8005c70:	4605      	mov	r5, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	b976      	cbnz	r6, 8005c94 <_Bfree+0x28>
 8005c76:	2010      	movs	r0, #16
 8005c78:	f7ff ff04 	bl	8005a84 <malloc>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	61e8      	str	r0, [r5, #28]
 8005c80:	b920      	cbnz	r0, 8005c8c <_Bfree+0x20>
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <_Bfree+0x3c>)
 8005c84:	4809      	ldr	r0, [pc, #36]	; (8005cac <_Bfree+0x40>)
 8005c86:	218f      	movs	r1, #143	; 0x8f
 8005c88:	f002 f84e 	bl	8007d28 <__assert_func>
 8005c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c90:	6006      	str	r6, [r0, #0]
 8005c92:	60c6      	str	r6, [r0, #12]
 8005c94:	b13c      	cbz	r4, 8005ca6 <_Bfree+0x3a>
 8005c96:	69eb      	ldr	r3, [r5, #28]
 8005c98:	6862      	ldr	r2, [r4, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ca0:	6021      	str	r1, [r4, #0]
 8005ca2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	08008cf1 	.word	0x08008cf1
 8005cac:	08008d71 	.word	0x08008d71

08005cb0 <__multadd>:
 8005cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb4:	690d      	ldr	r5, [r1, #16]
 8005cb6:	4607      	mov	r7, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	461e      	mov	r6, r3
 8005cbc:	f101 0c14 	add.w	ip, r1, #20
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f8dc 3000 	ldr.w	r3, [ip]
 8005cc6:	b299      	uxth	r1, r3
 8005cc8:	fb02 6101 	mla	r1, r2, r1, r6
 8005ccc:	0c1e      	lsrs	r6, r3, #16
 8005cce:	0c0b      	lsrs	r3, r1, #16
 8005cd0:	fb02 3306 	mla	r3, r2, r6, r3
 8005cd4:	b289      	uxth	r1, r1
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cdc:	4285      	cmp	r5, r0
 8005cde:	f84c 1b04 	str.w	r1, [ip], #4
 8005ce2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ce6:	dcec      	bgt.n	8005cc2 <__multadd+0x12>
 8005ce8:	b30e      	cbz	r6, 8005d2e <__multadd+0x7e>
 8005cea:	68a3      	ldr	r3, [r4, #8]
 8005cec:	42ab      	cmp	r3, r5
 8005cee:	dc19      	bgt.n	8005d24 <__multadd+0x74>
 8005cf0:	6861      	ldr	r1, [r4, #4]
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	3101      	adds	r1, #1
 8005cf6:	f7ff ff79 	bl	8005bec <_Balloc>
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	b928      	cbnz	r0, 8005d0a <__multadd+0x5a>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <__multadd+0x84>)
 8005d02:	480d      	ldr	r0, [pc, #52]	; (8005d38 <__multadd+0x88>)
 8005d04:	21ba      	movs	r1, #186	; 0xba
 8005d06:	f002 f80f 	bl	8007d28 <__assert_func>
 8005d0a:	6922      	ldr	r2, [r4, #16]
 8005d0c:	3202      	adds	r2, #2
 8005d0e:	f104 010c 	add.w	r1, r4, #12
 8005d12:	0092      	lsls	r2, r2, #2
 8005d14:	300c      	adds	r0, #12
 8005d16:	f7fe ffd8 	bl	8004cca <memcpy>
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f7ff ffa5 	bl	8005c6c <_Bfree>
 8005d22:	4644      	mov	r4, r8
 8005d24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d28:	3501      	adds	r5, #1
 8005d2a:	615e      	str	r6, [r3, #20]
 8005d2c:	6125      	str	r5, [r4, #16]
 8005d2e:	4620      	mov	r0, r4
 8005d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d34:	08008d60 	.word	0x08008d60
 8005d38:	08008d71 	.word	0x08008d71

08005d3c <__s2b>:
 8005d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d40:	460c      	mov	r4, r1
 8005d42:	4615      	mov	r5, r2
 8005d44:	461f      	mov	r7, r3
 8005d46:	2209      	movs	r2, #9
 8005d48:	3308      	adds	r3, #8
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d50:	2100      	movs	r1, #0
 8005d52:	2201      	movs	r2, #1
 8005d54:	429a      	cmp	r2, r3
 8005d56:	db09      	blt.n	8005d6c <__s2b+0x30>
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7ff ff47 	bl	8005bec <_Balloc>
 8005d5e:	b940      	cbnz	r0, 8005d72 <__s2b+0x36>
 8005d60:	4602      	mov	r2, r0
 8005d62:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <__s2b+0x8c>)
 8005d64:	4819      	ldr	r0, [pc, #100]	; (8005dcc <__s2b+0x90>)
 8005d66:	21d3      	movs	r1, #211	; 0xd3
 8005d68:	f001 ffde 	bl	8007d28 <__assert_func>
 8005d6c:	0052      	lsls	r2, r2, #1
 8005d6e:	3101      	adds	r1, #1
 8005d70:	e7f0      	b.n	8005d54 <__s2b+0x18>
 8005d72:	9b08      	ldr	r3, [sp, #32]
 8005d74:	6143      	str	r3, [r0, #20]
 8005d76:	2d09      	cmp	r5, #9
 8005d78:	f04f 0301 	mov.w	r3, #1
 8005d7c:	6103      	str	r3, [r0, #16]
 8005d7e:	dd16      	ble.n	8005dae <__s2b+0x72>
 8005d80:	f104 0909 	add.w	r9, r4, #9
 8005d84:	46c8      	mov	r8, r9
 8005d86:	442c      	add	r4, r5
 8005d88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	3b30      	subs	r3, #48	; 0x30
 8005d90:	220a      	movs	r2, #10
 8005d92:	4630      	mov	r0, r6
 8005d94:	f7ff ff8c 	bl	8005cb0 <__multadd>
 8005d98:	45a0      	cmp	r8, r4
 8005d9a:	d1f5      	bne.n	8005d88 <__s2b+0x4c>
 8005d9c:	f1a5 0408 	sub.w	r4, r5, #8
 8005da0:	444c      	add	r4, r9
 8005da2:	1b2d      	subs	r5, r5, r4
 8005da4:	1963      	adds	r3, r4, r5
 8005da6:	42bb      	cmp	r3, r7
 8005da8:	db04      	blt.n	8005db4 <__s2b+0x78>
 8005daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dae:	340a      	adds	r4, #10
 8005db0:	2509      	movs	r5, #9
 8005db2:	e7f6      	b.n	8005da2 <__s2b+0x66>
 8005db4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005db8:	4601      	mov	r1, r0
 8005dba:	3b30      	subs	r3, #48	; 0x30
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f7ff ff76 	bl	8005cb0 <__multadd>
 8005dc4:	e7ee      	b.n	8005da4 <__s2b+0x68>
 8005dc6:	bf00      	nop
 8005dc8:	08008d60 	.word	0x08008d60
 8005dcc:	08008d71 	.word	0x08008d71

08005dd0 <__hi0bits>:
 8005dd0:	0c03      	lsrs	r3, r0, #16
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	b9d3      	cbnz	r3, 8005e0c <__hi0bits+0x3c>
 8005dd6:	0400      	lsls	r0, r0, #16
 8005dd8:	2310      	movs	r3, #16
 8005dda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005dde:	bf04      	itt	eq
 8005de0:	0200      	lsleq	r0, r0, #8
 8005de2:	3308      	addeq	r3, #8
 8005de4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005de8:	bf04      	itt	eq
 8005dea:	0100      	lsleq	r0, r0, #4
 8005dec:	3304      	addeq	r3, #4
 8005dee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005df2:	bf04      	itt	eq
 8005df4:	0080      	lsleq	r0, r0, #2
 8005df6:	3302      	addeq	r3, #2
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	db05      	blt.n	8005e08 <__hi0bits+0x38>
 8005dfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e00:	f103 0301 	add.w	r3, r3, #1
 8005e04:	bf08      	it	eq
 8005e06:	2320      	moveq	r3, #32
 8005e08:	4618      	mov	r0, r3
 8005e0a:	4770      	bx	lr
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e7e4      	b.n	8005dda <__hi0bits+0xa>

08005e10 <__lo0bits>:
 8005e10:	6803      	ldr	r3, [r0, #0]
 8005e12:	f013 0207 	ands.w	r2, r3, #7
 8005e16:	d00c      	beq.n	8005e32 <__lo0bits+0x22>
 8005e18:	07d9      	lsls	r1, r3, #31
 8005e1a:	d422      	bmi.n	8005e62 <__lo0bits+0x52>
 8005e1c:	079a      	lsls	r2, r3, #30
 8005e1e:	bf49      	itett	mi
 8005e20:	085b      	lsrmi	r3, r3, #1
 8005e22:	089b      	lsrpl	r3, r3, #2
 8005e24:	6003      	strmi	r3, [r0, #0]
 8005e26:	2201      	movmi	r2, #1
 8005e28:	bf5c      	itt	pl
 8005e2a:	6003      	strpl	r3, [r0, #0]
 8005e2c:	2202      	movpl	r2, #2
 8005e2e:	4610      	mov	r0, r2
 8005e30:	4770      	bx	lr
 8005e32:	b299      	uxth	r1, r3
 8005e34:	b909      	cbnz	r1, 8005e3a <__lo0bits+0x2a>
 8005e36:	0c1b      	lsrs	r3, r3, #16
 8005e38:	2210      	movs	r2, #16
 8005e3a:	b2d9      	uxtb	r1, r3
 8005e3c:	b909      	cbnz	r1, 8005e42 <__lo0bits+0x32>
 8005e3e:	3208      	adds	r2, #8
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	0719      	lsls	r1, r3, #28
 8005e44:	bf04      	itt	eq
 8005e46:	091b      	lsreq	r3, r3, #4
 8005e48:	3204      	addeq	r2, #4
 8005e4a:	0799      	lsls	r1, r3, #30
 8005e4c:	bf04      	itt	eq
 8005e4e:	089b      	lsreq	r3, r3, #2
 8005e50:	3202      	addeq	r2, #2
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d403      	bmi.n	8005e5e <__lo0bits+0x4e>
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	f102 0201 	add.w	r2, r2, #1
 8005e5c:	d003      	beq.n	8005e66 <__lo0bits+0x56>
 8005e5e:	6003      	str	r3, [r0, #0]
 8005e60:	e7e5      	b.n	8005e2e <__lo0bits+0x1e>
 8005e62:	2200      	movs	r2, #0
 8005e64:	e7e3      	b.n	8005e2e <__lo0bits+0x1e>
 8005e66:	2220      	movs	r2, #32
 8005e68:	e7e1      	b.n	8005e2e <__lo0bits+0x1e>
	...

08005e6c <__i2b>:
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	460c      	mov	r4, r1
 8005e70:	2101      	movs	r1, #1
 8005e72:	f7ff febb 	bl	8005bec <_Balloc>
 8005e76:	4602      	mov	r2, r0
 8005e78:	b928      	cbnz	r0, 8005e86 <__i2b+0x1a>
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <__i2b+0x24>)
 8005e7c:	4805      	ldr	r0, [pc, #20]	; (8005e94 <__i2b+0x28>)
 8005e7e:	f240 1145 	movw	r1, #325	; 0x145
 8005e82:	f001 ff51 	bl	8007d28 <__assert_func>
 8005e86:	2301      	movs	r3, #1
 8005e88:	6144      	str	r4, [r0, #20]
 8005e8a:	6103      	str	r3, [r0, #16]
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	bf00      	nop
 8005e90:	08008d60 	.word	0x08008d60
 8005e94:	08008d71 	.word	0x08008d71

08005e98 <__multiply>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	4691      	mov	r9, r2
 8005e9e:	690a      	ldr	r2, [r1, #16]
 8005ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	bfb8      	it	lt
 8005ea8:	460b      	movlt	r3, r1
 8005eaa:	460c      	mov	r4, r1
 8005eac:	bfbc      	itt	lt
 8005eae:	464c      	movlt	r4, r9
 8005eb0:	4699      	movlt	r9, r3
 8005eb2:	6927      	ldr	r7, [r4, #16]
 8005eb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005eb8:	68a3      	ldr	r3, [r4, #8]
 8005eba:	6861      	ldr	r1, [r4, #4]
 8005ebc:	eb07 060a 	add.w	r6, r7, sl
 8005ec0:	42b3      	cmp	r3, r6
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	bfb8      	it	lt
 8005ec6:	3101      	addlt	r1, #1
 8005ec8:	f7ff fe90 	bl	8005bec <_Balloc>
 8005ecc:	b930      	cbnz	r0, 8005edc <__multiply+0x44>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b44      	ldr	r3, [pc, #272]	; (8005fe4 <__multiply+0x14c>)
 8005ed2:	4845      	ldr	r0, [pc, #276]	; (8005fe8 <__multiply+0x150>)
 8005ed4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005ed8:	f001 ff26 	bl	8007d28 <__assert_func>
 8005edc:	f100 0514 	add.w	r5, r0, #20
 8005ee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ee4:	462b      	mov	r3, r5
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	4543      	cmp	r3, r8
 8005eea:	d321      	bcc.n	8005f30 <__multiply+0x98>
 8005eec:	f104 0314 	add.w	r3, r4, #20
 8005ef0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ef4:	f109 0314 	add.w	r3, r9, #20
 8005ef8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005efc:	9202      	str	r2, [sp, #8]
 8005efe:	1b3a      	subs	r2, r7, r4
 8005f00:	3a15      	subs	r2, #21
 8005f02:	f022 0203 	bic.w	r2, r2, #3
 8005f06:	3204      	adds	r2, #4
 8005f08:	f104 0115 	add.w	r1, r4, #21
 8005f0c:	428f      	cmp	r7, r1
 8005f0e:	bf38      	it	cc
 8005f10:	2204      	movcc	r2, #4
 8005f12:	9201      	str	r2, [sp, #4]
 8005f14:	9a02      	ldr	r2, [sp, #8]
 8005f16:	9303      	str	r3, [sp, #12]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d80c      	bhi.n	8005f36 <__multiply+0x9e>
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	dd03      	ble.n	8005f28 <__multiply+0x90>
 8005f20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d05b      	beq.n	8005fe0 <__multiply+0x148>
 8005f28:	6106      	str	r6, [r0, #16]
 8005f2a:	b005      	add	sp, #20
 8005f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f30:	f843 2b04 	str.w	r2, [r3], #4
 8005f34:	e7d8      	b.n	8005ee8 <__multiply+0x50>
 8005f36:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f3a:	f1ba 0f00 	cmp.w	sl, #0
 8005f3e:	d024      	beq.n	8005f8a <__multiply+0xf2>
 8005f40:	f104 0e14 	add.w	lr, r4, #20
 8005f44:	46a9      	mov	r9, r5
 8005f46:	f04f 0c00 	mov.w	ip, #0
 8005f4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f4e:	f8d9 1000 	ldr.w	r1, [r9]
 8005f52:	fa1f fb82 	uxth.w	fp, r2
 8005f56:	b289      	uxth	r1, r1
 8005f58:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f60:	f8d9 2000 	ldr.w	r2, [r9]
 8005f64:	4461      	add	r1, ip
 8005f66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f72:	b289      	uxth	r1, r1
 8005f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f78:	4577      	cmp	r7, lr
 8005f7a:	f849 1b04 	str.w	r1, [r9], #4
 8005f7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f82:	d8e2      	bhi.n	8005f4a <__multiply+0xb2>
 8005f84:	9a01      	ldr	r2, [sp, #4]
 8005f86:	f845 c002 	str.w	ip, [r5, r2]
 8005f8a:	9a03      	ldr	r2, [sp, #12]
 8005f8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f90:	3304      	adds	r3, #4
 8005f92:	f1b9 0f00 	cmp.w	r9, #0
 8005f96:	d021      	beq.n	8005fdc <__multiply+0x144>
 8005f98:	6829      	ldr	r1, [r5, #0]
 8005f9a:	f104 0c14 	add.w	ip, r4, #20
 8005f9e:	46ae      	mov	lr, r5
 8005fa0:	f04f 0a00 	mov.w	sl, #0
 8005fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8005fa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fac:	fb09 220b 	mla	r2, r9, fp, r2
 8005fb0:	4452      	add	r2, sl
 8005fb2:	b289      	uxth	r1, r1
 8005fb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fb8:	f84e 1b04 	str.w	r1, [lr], #4
 8005fbc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005fc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fc4:	f8be 1000 	ldrh.w	r1, [lr]
 8005fc8:	fb09 110a 	mla	r1, r9, sl, r1
 8005fcc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005fd0:	4567      	cmp	r7, ip
 8005fd2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fd6:	d8e5      	bhi.n	8005fa4 <__multiply+0x10c>
 8005fd8:	9a01      	ldr	r2, [sp, #4]
 8005fda:	50a9      	str	r1, [r5, r2]
 8005fdc:	3504      	adds	r5, #4
 8005fde:	e799      	b.n	8005f14 <__multiply+0x7c>
 8005fe0:	3e01      	subs	r6, #1
 8005fe2:	e79b      	b.n	8005f1c <__multiply+0x84>
 8005fe4:	08008d60 	.word	0x08008d60
 8005fe8:	08008d71 	.word	0x08008d71

08005fec <__pow5mult>:
 8005fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff0:	4615      	mov	r5, r2
 8005ff2:	f012 0203 	ands.w	r2, r2, #3
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	460f      	mov	r7, r1
 8005ffa:	d007      	beq.n	800600c <__pow5mult+0x20>
 8005ffc:	4c25      	ldr	r4, [pc, #148]	; (8006094 <__pow5mult+0xa8>)
 8005ffe:	3a01      	subs	r2, #1
 8006000:	2300      	movs	r3, #0
 8006002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006006:	f7ff fe53 	bl	8005cb0 <__multadd>
 800600a:	4607      	mov	r7, r0
 800600c:	10ad      	asrs	r5, r5, #2
 800600e:	d03d      	beq.n	800608c <__pow5mult+0xa0>
 8006010:	69f4      	ldr	r4, [r6, #28]
 8006012:	b97c      	cbnz	r4, 8006034 <__pow5mult+0x48>
 8006014:	2010      	movs	r0, #16
 8006016:	f7ff fd35 	bl	8005a84 <malloc>
 800601a:	4602      	mov	r2, r0
 800601c:	61f0      	str	r0, [r6, #28]
 800601e:	b928      	cbnz	r0, 800602c <__pow5mult+0x40>
 8006020:	4b1d      	ldr	r3, [pc, #116]	; (8006098 <__pow5mult+0xac>)
 8006022:	481e      	ldr	r0, [pc, #120]	; (800609c <__pow5mult+0xb0>)
 8006024:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006028:	f001 fe7e 	bl	8007d28 <__assert_func>
 800602c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006030:	6004      	str	r4, [r0, #0]
 8006032:	60c4      	str	r4, [r0, #12]
 8006034:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800603c:	b94c      	cbnz	r4, 8006052 <__pow5mult+0x66>
 800603e:	f240 2171 	movw	r1, #625	; 0x271
 8006042:	4630      	mov	r0, r6
 8006044:	f7ff ff12 	bl	8005e6c <__i2b>
 8006048:	2300      	movs	r3, #0
 800604a:	f8c8 0008 	str.w	r0, [r8, #8]
 800604e:	4604      	mov	r4, r0
 8006050:	6003      	str	r3, [r0, #0]
 8006052:	f04f 0900 	mov.w	r9, #0
 8006056:	07eb      	lsls	r3, r5, #31
 8006058:	d50a      	bpl.n	8006070 <__pow5mult+0x84>
 800605a:	4639      	mov	r1, r7
 800605c:	4622      	mov	r2, r4
 800605e:	4630      	mov	r0, r6
 8006060:	f7ff ff1a 	bl	8005e98 <__multiply>
 8006064:	4639      	mov	r1, r7
 8006066:	4680      	mov	r8, r0
 8006068:	4630      	mov	r0, r6
 800606a:	f7ff fdff 	bl	8005c6c <_Bfree>
 800606e:	4647      	mov	r7, r8
 8006070:	106d      	asrs	r5, r5, #1
 8006072:	d00b      	beq.n	800608c <__pow5mult+0xa0>
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	b938      	cbnz	r0, 8006088 <__pow5mult+0x9c>
 8006078:	4622      	mov	r2, r4
 800607a:	4621      	mov	r1, r4
 800607c:	4630      	mov	r0, r6
 800607e:	f7ff ff0b 	bl	8005e98 <__multiply>
 8006082:	6020      	str	r0, [r4, #0]
 8006084:	f8c0 9000 	str.w	r9, [r0]
 8006088:	4604      	mov	r4, r0
 800608a:	e7e4      	b.n	8006056 <__pow5mult+0x6a>
 800608c:	4638      	mov	r0, r7
 800608e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006092:	bf00      	nop
 8006094:	08008ec0 	.word	0x08008ec0
 8006098:	08008cf1 	.word	0x08008cf1
 800609c:	08008d71 	.word	0x08008d71

080060a0 <__lshift>:
 80060a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a4:	460c      	mov	r4, r1
 80060a6:	6849      	ldr	r1, [r1, #4]
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060ae:	68a3      	ldr	r3, [r4, #8]
 80060b0:	4607      	mov	r7, r0
 80060b2:	4691      	mov	r9, r2
 80060b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060b8:	f108 0601 	add.w	r6, r8, #1
 80060bc:	42b3      	cmp	r3, r6
 80060be:	db0b      	blt.n	80060d8 <__lshift+0x38>
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7ff fd93 	bl	8005bec <_Balloc>
 80060c6:	4605      	mov	r5, r0
 80060c8:	b948      	cbnz	r0, 80060de <__lshift+0x3e>
 80060ca:	4602      	mov	r2, r0
 80060cc:	4b28      	ldr	r3, [pc, #160]	; (8006170 <__lshift+0xd0>)
 80060ce:	4829      	ldr	r0, [pc, #164]	; (8006174 <__lshift+0xd4>)
 80060d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80060d4:	f001 fe28 	bl	8007d28 <__assert_func>
 80060d8:	3101      	adds	r1, #1
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	e7ee      	b.n	80060bc <__lshift+0x1c>
 80060de:	2300      	movs	r3, #0
 80060e0:	f100 0114 	add.w	r1, r0, #20
 80060e4:	f100 0210 	add.w	r2, r0, #16
 80060e8:	4618      	mov	r0, r3
 80060ea:	4553      	cmp	r3, sl
 80060ec:	db33      	blt.n	8006156 <__lshift+0xb6>
 80060ee:	6920      	ldr	r0, [r4, #16]
 80060f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060f4:	f104 0314 	add.w	r3, r4, #20
 80060f8:	f019 091f 	ands.w	r9, r9, #31
 80060fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006104:	d02b      	beq.n	800615e <__lshift+0xbe>
 8006106:	f1c9 0e20 	rsb	lr, r9, #32
 800610a:	468a      	mov	sl, r1
 800610c:	2200      	movs	r2, #0
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	fa00 f009 	lsl.w	r0, r0, r9
 8006114:	4310      	orrs	r0, r2
 8006116:	f84a 0b04 	str.w	r0, [sl], #4
 800611a:	f853 2b04 	ldr.w	r2, [r3], #4
 800611e:	459c      	cmp	ip, r3
 8006120:	fa22 f20e 	lsr.w	r2, r2, lr
 8006124:	d8f3      	bhi.n	800610e <__lshift+0x6e>
 8006126:	ebac 0304 	sub.w	r3, ip, r4
 800612a:	3b15      	subs	r3, #21
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	3304      	adds	r3, #4
 8006132:	f104 0015 	add.w	r0, r4, #21
 8006136:	4584      	cmp	ip, r0
 8006138:	bf38      	it	cc
 800613a:	2304      	movcc	r3, #4
 800613c:	50ca      	str	r2, [r1, r3]
 800613e:	b10a      	cbz	r2, 8006144 <__lshift+0xa4>
 8006140:	f108 0602 	add.w	r6, r8, #2
 8006144:	3e01      	subs	r6, #1
 8006146:	4638      	mov	r0, r7
 8006148:	612e      	str	r6, [r5, #16]
 800614a:	4621      	mov	r1, r4
 800614c:	f7ff fd8e 	bl	8005c6c <_Bfree>
 8006150:	4628      	mov	r0, r5
 8006152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006156:	f842 0f04 	str.w	r0, [r2, #4]!
 800615a:	3301      	adds	r3, #1
 800615c:	e7c5      	b.n	80060ea <__lshift+0x4a>
 800615e:	3904      	subs	r1, #4
 8006160:	f853 2b04 	ldr.w	r2, [r3], #4
 8006164:	f841 2f04 	str.w	r2, [r1, #4]!
 8006168:	459c      	cmp	ip, r3
 800616a:	d8f9      	bhi.n	8006160 <__lshift+0xc0>
 800616c:	e7ea      	b.n	8006144 <__lshift+0xa4>
 800616e:	bf00      	nop
 8006170:	08008d60 	.word	0x08008d60
 8006174:	08008d71 	.word	0x08008d71

08006178 <__mcmp>:
 8006178:	b530      	push	{r4, r5, lr}
 800617a:	6902      	ldr	r2, [r0, #16]
 800617c:	690c      	ldr	r4, [r1, #16]
 800617e:	1b12      	subs	r2, r2, r4
 8006180:	d10e      	bne.n	80061a0 <__mcmp+0x28>
 8006182:	f100 0314 	add.w	r3, r0, #20
 8006186:	3114      	adds	r1, #20
 8006188:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800618c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006190:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006194:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006198:	42a5      	cmp	r5, r4
 800619a:	d003      	beq.n	80061a4 <__mcmp+0x2c>
 800619c:	d305      	bcc.n	80061aa <__mcmp+0x32>
 800619e:	2201      	movs	r2, #1
 80061a0:	4610      	mov	r0, r2
 80061a2:	bd30      	pop	{r4, r5, pc}
 80061a4:	4283      	cmp	r3, r0
 80061a6:	d3f3      	bcc.n	8006190 <__mcmp+0x18>
 80061a8:	e7fa      	b.n	80061a0 <__mcmp+0x28>
 80061aa:	f04f 32ff 	mov.w	r2, #4294967295
 80061ae:	e7f7      	b.n	80061a0 <__mcmp+0x28>

080061b0 <__mdiff>:
 80061b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	460c      	mov	r4, r1
 80061b6:	4606      	mov	r6, r0
 80061b8:	4611      	mov	r1, r2
 80061ba:	4620      	mov	r0, r4
 80061bc:	4690      	mov	r8, r2
 80061be:	f7ff ffdb 	bl	8006178 <__mcmp>
 80061c2:	1e05      	subs	r5, r0, #0
 80061c4:	d110      	bne.n	80061e8 <__mdiff+0x38>
 80061c6:	4629      	mov	r1, r5
 80061c8:	4630      	mov	r0, r6
 80061ca:	f7ff fd0f 	bl	8005bec <_Balloc>
 80061ce:	b930      	cbnz	r0, 80061de <__mdiff+0x2e>
 80061d0:	4b3a      	ldr	r3, [pc, #232]	; (80062bc <__mdiff+0x10c>)
 80061d2:	4602      	mov	r2, r0
 80061d4:	f240 2137 	movw	r1, #567	; 0x237
 80061d8:	4839      	ldr	r0, [pc, #228]	; (80062c0 <__mdiff+0x110>)
 80061da:	f001 fda5 	bl	8007d28 <__assert_func>
 80061de:	2301      	movs	r3, #1
 80061e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e8:	bfa4      	itt	ge
 80061ea:	4643      	movge	r3, r8
 80061ec:	46a0      	movge	r8, r4
 80061ee:	4630      	mov	r0, r6
 80061f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061f4:	bfa6      	itte	ge
 80061f6:	461c      	movge	r4, r3
 80061f8:	2500      	movge	r5, #0
 80061fa:	2501      	movlt	r5, #1
 80061fc:	f7ff fcf6 	bl	8005bec <_Balloc>
 8006200:	b920      	cbnz	r0, 800620c <__mdiff+0x5c>
 8006202:	4b2e      	ldr	r3, [pc, #184]	; (80062bc <__mdiff+0x10c>)
 8006204:	4602      	mov	r2, r0
 8006206:	f240 2145 	movw	r1, #581	; 0x245
 800620a:	e7e5      	b.n	80061d8 <__mdiff+0x28>
 800620c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006210:	6926      	ldr	r6, [r4, #16]
 8006212:	60c5      	str	r5, [r0, #12]
 8006214:	f104 0914 	add.w	r9, r4, #20
 8006218:	f108 0514 	add.w	r5, r8, #20
 800621c:	f100 0e14 	add.w	lr, r0, #20
 8006220:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006228:	f108 0210 	add.w	r2, r8, #16
 800622c:	46f2      	mov	sl, lr
 800622e:	2100      	movs	r1, #0
 8006230:	f859 3b04 	ldr.w	r3, [r9], #4
 8006234:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006238:	fa11 f88b 	uxtah	r8, r1, fp
 800623c:	b299      	uxth	r1, r3
 800623e:	0c1b      	lsrs	r3, r3, #16
 8006240:	eba8 0801 	sub.w	r8, r8, r1
 8006244:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006248:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800624c:	fa1f f888 	uxth.w	r8, r8
 8006250:	1419      	asrs	r1, r3, #16
 8006252:	454e      	cmp	r6, r9
 8006254:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006258:	f84a 3b04 	str.w	r3, [sl], #4
 800625c:	d8e8      	bhi.n	8006230 <__mdiff+0x80>
 800625e:	1b33      	subs	r3, r6, r4
 8006260:	3b15      	subs	r3, #21
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	3304      	adds	r3, #4
 8006268:	3415      	adds	r4, #21
 800626a:	42a6      	cmp	r6, r4
 800626c:	bf38      	it	cc
 800626e:	2304      	movcc	r3, #4
 8006270:	441d      	add	r5, r3
 8006272:	4473      	add	r3, lr
 8006274:	469e      	mov	lr, r3
 8006276:	462e      	mov	r6, r5
 8006278:	4566      	cmp	r6, ip
 800627a:	d30e      	bcc.n	800629a <__mdiff+0xea>
 800627c:	f10c 0203 	add.w	r2, ip, #3
 8006280:	1b52      	subs	r2, r2, r5
 8006282:	f022 0203 	bic.w	r2, r2, #3
 8006286:	3d03      	subs	r5, #3
 8006288:	45ac      	cmp	ip, r5
 800628a:	bf38      	it	cc
 800628c:	2200      	movcc	r2, #0
 800628e:	4413      	add	r3, r2
 8006290:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006294:	b17a      	cbz	r2, 80062b6 <__mdiff+0x106>
 8006296:	6107      	str	r7, [r0, #16]
 8006298:	e7a4      	b.n	80061e4 <__mdiff+0x34>
 800629a:	f856 8b04 	ldr.w	r8, [r6], #4
 800629e:	fa11 f288 	uxtah	r2, r1, r8
 80062a2:	1414      	asrs	r4, r2, #16
 80062a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062a8:	b292      	uxth	r2, r2
 80062aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80062ae:	f84e 2b04 	str.w	r2, [lr], #4
 80062b2:	1421      	asrs	r1, r4, #16
 80062b4:	e7e0      	b.n	8006278 <__mdiff+0xc8>
 80062b6:	3f01      	subs	r7, #1
 80062b8:	e7ea      	b.n	8006290 <__mdiff+0xe0>
 80062ba:	bf00      	nop
 80062bc:	08008d60 	.word	0x08008d60
 80062c0:	08008d71 	.word	0x08008d71

080062c4 <__ulp>:
 80062c4:	b082      	sub	sp, #8
 80062c6:	ed8d 0b00 	vstr	d0, [sp]
 80062ca:	9a01      	ldr	r2, [sp, #4]
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <__ulp+0x48>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dc08      	bgt.n	80062ea <__ulp+0x26>
 80062d8:	425b      	negs	r3, r3
 80062da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80062de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80062e2:	da04      	bge.n	80062ee <__ulp+0x2a>
 80062e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062e8:	4113      	asrs	r3, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	e008      	b.n	8006300 <__ulp+0x3c>
 80062ee:	f1a2 0314 	sub.w	r3, r2, #20
 80062f2:	2b1e      	cmp	r3, #30
 80062f4:	bfda      	itte	le
 80062f6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80062fa:	40da      	lsrle	r2, r3
 80062fc:	2201      	movgt	r2, #1
 80062fe:	2300      	movs	r3, #0
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	ec41 0b10 	vmov	d0, r0, r1
 8006308:	b002      	add	sp, #8
 800630a:	4770      	bx	lr
 800630c:	7ff00000 	.word	0x7ff00000

08006310 <__b2d>:
 8006310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006314:	6906      	ldr	r6, [r0, #16]
 8006316:	f100 0814 	add.w	r8, r0, #20
 800631a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800631e:	1f37      	subs	r7, r6, #4
 8006320:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006324:	4610      	mov	r0, r2
 8006326:	f7ff fd53 	bl	8005dd0 <__hi0bits>
 800632a:	f1c0 0320 	rsb	r3, r0, #32
 800632e:	280a      	cmp	r0, #10
 8006330:	600b      	str	r3, [r1, #0]
 8006332:	491b      	ldr	r1, [pc, #108]	; (80063a0 <__b2d+0x90>)
 8006334:	dc15      	bgt.n	8006362 <__b2d+0x52>
 8006336:	f1c0 0c0b 	rsb	ip, r0, #11
 800633a:	fa22 f30c 	lsr.w	r3, r2, ip
 800633e:	45b8      	cmp	r8, r7
 8006340:	ea43 0501 	orr.w	r5, r3, r1
 8006344:	bf34      	ite	cc
 8006346:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800634a:	2300      	movcs	r3, #0
 800634c:	3015      	adds	r0, #21
 800634e:	fa02 f000 	lsl.w	r0, r2, r0
 8006352:	fa23 f30c 	lsr.w	r3, r3, ip
 8006356:	4303      	orrs	r3, r0
 8006358:	461c      	mov	r4, r3
 800635a:	ec45 4b10 	vmov	d0, r4, r5
 800635e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006362:	45b8      	cmp	r8, r7
 8006364:	bf3a      	itte	cc
 8006366:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800636a:	f1a6 0708 	subcc.w	r7, r6, #8
 800636e:	2300      	movcs	r3, #0
 8006370:	380b      	subs	r0, #11
 8006372:	d012      	beq.n	800639a <__b2d+0x8a>
 8006374:	f1c0 0120 	rsb	r1, r0, #32
 8006378:	fa23 f401 	lsr.w	r4, r3, r1
 800637c:	4082      	lsls	r2, r0
 800637e:	4322      	orrs	r2, r4
 8006380:	4547      	cmp	r7, r8
 8006382:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006386:	bf8c      	ite	hi
 8006388:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800638c:	2200      	movls	r2, #0
 800638e:	4083      	lsls	r3, r0
 8006390:	40ca      	lsrs	r2, r1
 8006392:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006396:	4313      	orrs	r3, r2
 8006398:	e7de      	b.n	8006358 <__b2d+0x48>
 800639a:	ea42 0501 	orr.w	r5, r2, r1
 800639e:	e7db      	b.n	8006358 <__b2d+0x48>
 80063a0:	3ff00000 	.word	0x3ff00000

080063a4 <__d2b>:
 80063a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063a8:	460f      	mov	r7, r1
 80063aa:	2101      	movs	r1, #1
 80063ac:	ec59 8b10 	vmov	r8, r9, d0
 80063b0:	4616      	mov	r6, r2
 80063b2:	f7ff fc1b 	bl	8005bec <_Balloc>
 80063b6:	4604      	mov	r4, r0
 80063b8:	b930      	cbnz	r0, 80063c8 <__d2b+0x24>
 80063ba:	4602      	mov	r2, r0
 80063bc:	4b24      	ldr	r3, [pc, #144]	; (8006450 <__d2b+0xac>)
 80063be:	4825      	ldr	r0, [pc, #148]	; (8006454 <__d2b+0xb0>)
 80063c0:	f240 310f 	movw	r1, #783	; 0x30f
 80063c4:	f001 fcb0 	bl	8007d28 <__assert_func>
 80063c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063d0:	bb2d      	cbnz	r5, 800641e <__d2b+0x7a>
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	f1b8 0300 	subs.w	r3, r8, #0
 80063d8:	d026      	beq.n	8006428 <__d2b+0x84>
 80063da:	4668      	mov	r0, sp
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	f7ff fd17 	bl	8005e10 <__lo0bits>
 80063e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063e6:	b1e8      	cbz	r0, 8006424 <__d2b+0x80>
 80063e8:	f1c0 0320 	rsb	r3, r0, #32
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	430b      	orrs	r3, r1
 80063f2:	40c2      	lsrs	r2, r0
 80063f4:	6163      	str	r3, [r4, #20]
 80063f6:	9201      	str	r2, [sp, #4]
 80063f8:	9b01      	ldr	r3, [sp, #4]
 80063fa:	61a3      	str	r3, [r4, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf14      	ite	ne
 8006400:	2202      	movne	r2, #2
 8006402:	2201      	moveq	r2, #1
 8006404:	6122      	str	r2, [r4, #16]
 8006406:	b1bd      	cbz	r5, 8006438 <__d2b+0x94>
 8006408:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800640c:	4405      	add	r5, r0
 800640e:	603d      	str	r5, [r7, #0]
 8006410:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006414:	6030      	str	r0, [r6, #0]
 8006416:	4620      	mov	r0, r4
 8006418:	b003      	add	sp, #12
 800641a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800641e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006422:	e7d6      	b.n	80063d2 <__d2b+0x2e>
 8006424:	6161      	str	r1, [r4, #20]
 8006426:	e7e7      	b.n	80063f8 <__d2b+0x54>
 8006428:	a801      	add	r0, sp, #4
 800642a:	f7ff fcf1 	bl	8005e10 <__lo0bits>
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	6163      	str	r3, [r4, #20]
 8006432:	3020      	adds	r0, #32
 8006434:	2201      	movs	r2, #1
 8006436:	e7e5      	b.n	8006404 <__d2b+0x60>
 8006438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800643c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006440:	6038      	str	r0, [r7, #0]
 8006442:	6918      	ldr	r0, [r3, #16]
 8006444:	f7ff fcc4 	bl	8005dd0 <__hi0bits>
 8006448:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800644c:	e7e2      	b.n	8006414 <__d2b+0x70>
 800644e:	bf00      	nop
 8006450:	08008d60 	.word	0x08008d60
 8006454:	08008d71 	.word	0x08008d71

08006458 <__ratio>:
 8006458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	4688      	mov	r8, r1
 800645e:	4669      	mov	r1, sp
 8006460:	4681      	mov	r9, r0
 8006462:	f7ff ff55 	bl	8006310 <__b2d>
 8006466:	a901      	add	r1, sp, #4
 8006468:	4640      	mov	r0, r8
 800646a:	ec55 4b10 	vmov	r4, r5, d0
 800646e:	f7ff ff4f 	bl	8006310 <__b2d>
 8006472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006476:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800647a:	eba3 0c02 	sub.w	ip, r3, r2
 800647e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006488:	ec51 0b10 	vmov	r0, r1, d0
 800648c:	2b00      	cmp	r3, #0
 800648e:	bfd6      	itet	le
 8006490:	460a      	movle	r2, r1
 8006492:	462a      	movgt	r2, r5
 8006494:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006498:	468b      	mov	fp, r1
 800649a:	462f      	mov	r7, r5
 800649c:	bfd4      	ite	le
 800649e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80064a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80064a6:	4620      	mov	r0, r4
 80064a8:	ee10 2a10 	vmov	r2, s0
 80064ac:	465b      	mov	r3, fp
 80064ae:	4639      	mov	r1, r7
 80064b0:	f7fa f9cc 	bl	800084c <__aeabi_ddiv>
 80064b4:	ec41 0b10 	vmov	d0, r0, r1
 80064b8:	b003      	add	sp, #12
 80064ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064be <__copybits>:
 80064be:	3901      	subs	r1, #1
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	1149      	asrs	r1, r1, #5
 80064c4:	6914      	ldr	r4, [r2, #16]
 80064c6:	3101      	adds	r1, #1
 80064c8:	f102 0314 	add.w	r3, r2, #20
 80064cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064d4:	1f05      	subs	r5, r0, #4
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	d30c      	bcc.n	80064f4 <__copybits+0x36>
 80064da:	1aa3      	subs	r3, r4, r2
 80064dc:	3b11      	subs	r3, #17
 80064de:	f023 0303 	bic.w	r3, r3, #3
 80064e2:	3211      	adds	r2, #17
 80064e4:	42a2      	cmp	r2, r4
 80064e6:	bf88      	it	hi
 80064e8:	2300      	movhi	r3, #0
 80064ea:	4418      	add	r0, r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	4288      	cmp	r0, r1
 80064f0:	d305      	bcc.n	80064fe <__copybits+0x40>
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80064f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80064fc:	e7eb      	b.n	80064d6 <__copybits+0x18>
 80064fe:	f840 3b04 	str.w	r3, [r0], #4
 8006502:	e7f4      	b.n	80064ee <__copybits+0x30>

08006504 <__any_on>:
 8006504:	f100 0214 	add.w	r2, r0, #20
 8006508:	6900      	ldr	r0, [r0, #16]
 800650a:	114b      	asrs	r3, r1, #5
 800650c:	4298      	cmp	r0, r3
 800650e:	b510      	push	{r4, lr}
 8006510:	db11      	blt.n	8006536 <__any_on+0x32>
 8006512:	dd0a      	ble.n	800652a <__any_on+0x26>
 8006514:	f011 011f 	ands.w	r1, r1, #31
 8006518:	d007      	beq.n	800652a <__any_on+0x26>
 800651a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800651e:	fa24 f001 	lsr.w	r0, r4, r1
 8006522:	fa00 f101 	lsl.w	r1, r0, r1
 8006526:	428c      	cmp	r4, r1
 8006528:	d10b      	bne.n	8006542 <__any_on+0x3e>
 800652a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800652e:	4293      	cmp	r3, r2
 8006530:	d803      	bhi.n	800653a <__any_on+0x36>
 8006532:	2000      	movs	r0, #0
 8006534:	bd10      	pop	{r4, pc}
 8006536:	4603      	mov	r3, r0
 8006538:	e7f7      	b.n	800652a <__any_on+0x26>
 800653a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800653e:	2900      	cmp	r1, #0
 8006540:	d0f5      	beq.n	800652e <__any_on+0x2a>
 8006542:	2001      	movs	r0, #1
 8006544:	e7f6      	b.n	8006534 <__any_on+0x30>

08006546 <sulp>:
 8006546:	b570      	push	{r4, r5, r6, lr}
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	ec45 4b10 	vmov	d0, r4, r5
 8006550:	4616      	mov	r6, r2
 8006552:	f7ff feb7 	bl	80062c4 <__ulp>
 8006556:	ec51 0b10 	vmov	r0, r1, d0
 800655a:	b17e      	cbz	r6, 800657c <sulp+0x36>
 800655c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006560:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd09      	ble.n	800657c <sulp+0x36>
 8006568:	051b      	lsls	r3, r3, #20
 800656a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800656e:	2400      	movs	r4, #0
 8006570:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	f7fa f83e 	bl	80005f8 <__aeabi_dmul>
 800657c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006580 <_strtod_l>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	ed2d 8b02 	vpush	{d8}
 8006588:	b09b      	sub	sp, #108	; 0x6c
 800658a:	4604      	mov	r4, r0
 800658c:	9213      	str	r2, [sp, #76]	; 0x4c
 800658e:	2200      	movs	r2, #0
 8006590:	9216      	str	r2, [sp, #88]	; 0x58
 8006592:	460d      	mov	r5, r1
 8006594:	f04f 0800 	mov.w	r8, #0
 8006598:	f04f 0900 	mov.w	r9, #0
 800659c:	460a      	mov	r2, r1
 800659e:	9215      	str	r2, [sp, #84]	; 0x54
 80065a0:	7811      	ldrb	r1, [r2, #0]
 80065a2:	292b      	cmp	r1, #43	; 0x2b
 80065a4:	d04c      	beq.n	8006640 <_strtod_l+0xc0>
 80065a6:	d83a      	bhi.n	800661e <_strtod_l+0x9e>
 80065a8:	290d      	cmp	r1, #13
 80065aa:	d834      	bhi.n	8006616 <_strtod_l+0x96>
 80065ac:	2908      	cmp	r1, #8
 80065ae:	d834      	bhi.n	800661a <_strtod_l+0x9a>
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d03d      	beq.n	8006630 <_strtod_l+0xb0>
 80065b4:	2200      	movs	r2, #0
 80065b6:	920a      	str	r2, [sp, #40]	; 0x28
 80065b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80065ba:	7832      	ldrb	r2, [r6, #0]
 80065bc:	2a30      	cmp	r2, #48	; 0x30
 80065be:	f040 80b4 	bne.w	800672a <_strtod_l+0x1aa>
 80065c2:	7872      	ldrb	r2, [r6, #1]
 80065c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80065c8:	2a58      	cmp	r2, #88	; 0x58
 80065ca:	d170      	bne.n	80066ae <_strtod_l+0x12e>
 80065cc:	9302      	str	r3, [sp, #8]
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	ab16      	add	r3, sp, #88	; 0x58
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	4a8e      	ldr	r2, [pc, #568]	; (8006810 <_strtod_l+0x290>)
 80065d8:	ab17      	add	r3, sp, #92	; 0x5c
 80065da:	a915      	add	r1, sp, #84	; 0x54
 80065dc:	4620      	mov	r0, r4
 80065de:	f001 fc3f 	bl	8007e60 <__gethex>
 80065e2:	f010 070f 	ands.w	r7, r0, #15
 80065e6:	4605      	mov	r5, r0
 80065e8:	d005      	beq.n	80065f6 <_strtod_l+0x76>
 80065ea:	2f06      	cmp	r7, #6
 80065ec:	d12a      	bne.n	8006644 <_strtod_l+0xc4>
 80065ee:	3601      	adds	r6, #1
 80065f0:	2300      	movs	r3, #0
 80065f2:	9615      	str	r6, [sp, #84]	; 0x54
 80065f4:	930a      	str	r3, [sp, #40]	; 0x28
 80065f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 857f 	bne.w	80070fc <_strtod_l+0xb7c>
 80065fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006600:	b1db      	cbz	r3, 800663a <_strtod_l+0xba>
 8006602:	4642      	mov	r2, r8
 8006604:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006608:	ec43 2b10 	vmov	d0, r2, r3
 800660c:	b01b      	add	sp, #108	; 0x6c
 800660e:	ecbd 8b02 	vpop	{d8}
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006616:	2920      	cmp	r1, #32
 8006618:	d1cc      	bne.n	80065b4 <_strtod_l+0x34>
 800661a:	3201      	adds	r2, #1
 800661c:	e7bf      	b.n	800659e <_strtod_l+0x1e>
 800661e:	292d      	cmp	r1, #45	; 0x2d
 8006620:	d1c8      	bne.n	80065b4 <_strtod_l+0x34>
 8006622:	2101      	movs	r1, #1
 8006624:	910a      	str	r1, [sp, #40]	; 0x28
 8006626:	1c51      	adds	r1, r2, #1
 8006628:	9115      	str	r1, [sp, #84]	; 0x54
 800662a:	7852      	ldrb	r2, [r2, #1]
 800662c:	2a00      	cmp	r2, #0
 800662e:	d1c3      	bne.n	80065b8 <_strtod_l+0x38>
 8006630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006632:	9515      	str	r5, [sp, #84]	; 0x54
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 855f 	bne.w	80070f8 <_strtod_l+0xb78>
 800663a:	4642      	mov	r2, r8
 800663c:	464b      	mov	r3, r9
 800663e:	e7e3      	b.n	8006608 <_strtod_l+0x88>
 8006640:	2100      	movs	r1, #0
 8006642:	e7ef      	b.n	8006624 <_strtod_l+0xa4>
 8006644:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006646:	b13a      	cbz	r2, 8006658 <_strtod_l+0xd8>
 8006648:	2135      	movs	r1, #53	; 0x35
 800664a:	a818      	add	r0, sp, #96	; 0x60
 800664c:	f7ff ff37 	bl	80064be <__copybits>
 8006650:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006652:	4620      	mov	r0, r4
 8006654:	f7ff fb0a 	bl	8005c6c <_Bfree>
 8006658:	3f01      	subs	r7, #1
 800665a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800665c:	2f04      	cmp	r7, #4
 800665e:	d806      	bhi.n	800666e <_strtod_l+0xee>
 8006660:	e8df f007 	tbb	[pc, r7]
 8006664:	201d0314 	.word	0x201d0314
 8006668:	14          	.byte	0x14
 8006669:	00          	.byte	0x00
 800666a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800666e:	05e9      	lsls	r1, r5, #23
 8006670:	bf48      	it	mi
 8006672:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800667a:	0d1b      	lsrs	r3, r3, #20
 800667c:	051b      	lsls	r3, r3, #20
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1b9      	bne.n	80065f6 <_strtod_l+0x76>
 8006682:	f7fe faf5 	bl	8004c70 <__errno>
 8006686:	2322      	movs	r3, #34	; 0x22
 8006688:	6003      	str	r3, [r0, #0]
 800668a:	e7b4      	b.n	80065f6 <_strtod_l+0x76>
 800668c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006690:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006694:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006698:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800669c:	e7e7      	b.n	800666e <_strtod_l+0xee>
 800669e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006818 <_strtod_l+0x298>
 80066a2:	e7e4      	b.n	800666e <_strtod_l+0xee>
 80066a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80066a8:	f04f 38ff 	mov.w	r8, #4294967295
 80066ac:	e7df      	b.n	800666e <_strtod_l+0xee>
 80066ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	9215      	str	r2, [sp, #84]	; 0x54
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b30      	cmp	r3, #48	; 0x30
 80066b8:	d0f9      	beq.n	80066ae <_strtod_l+0x12e>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d09b      	beq.n	80065f6 <_strtod_l+0x76>
 80066be:	2301      	movs	r3, #1
 80066c0:	f04f 0a00 	mov.w	sl, #0
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80066ce:	46d3      	mov	fp, sl
 80066d0:	220a      	movs	r2, #10
 80066d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80066d4:	7806      	ldrb	r6, [r0, #0]
 80066d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80066da:	b2d9      	uxtb	r1, r3
 80066dc:	2909      	cmp	r1, #9
 80066de:	d926      	bls.n	800672e <_strtod_l+0x1ae>
 80066e0:	494c      	ldr	r1, [pc, #304]	; (8006814 <_strtod_l+0x294>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	f001 faf5 	bl	8007cd2 <strncmp>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d030      	beq.n	800674e <_strtod_l+0x1ce>
 80066ec:	2000      	movs	r0, #0
 80066ee:	4632      	mov	r2, r6
 80066f0:	9005      	str	r0, [sp, #20]
 80066f2:	465e      	mov	r6, fp
 80066f4:	4603      	mov	r3, r0
 80066f6:	2a65      	cmp	r2, #101	; 0x65
 80066f8:	d001      	beq.n	80066fe <_strtod_l+0x17e>
 80066fa:	2a45      	cmp	r2, #69	; 0x45
 80066fc:	d113      	bne.n	8006726 <_strtod_l+0x1a6>
 80066fe:	b91e      	cbnz	r6, 8006708 <_strtod_l+0x188>
 8006700:	9a04      	ldr	r2, [sp, #16]
 8006702:	4302      	orrs	r2, r0
 8006704:	d094      	beq.n	8006630 <_strtod_l+0xb0>
 8006706:	2600      	movs	r6, #0
 8006708:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800670a:	1c6a      	adds	r2, r5, #1
 800670c:	9215      	str	r2, [sp, #84]	; 0x54
 800670e:	786a      	ldrb	r2, [r5, #1]
 8006710:	2a2b      	cmp	r2, #43	; 0x2b
 8006712:	d074      	beq.n	80067fe <_strtod_l+0x27e>
 8006714:	2a2d      	cmp	r2, #45	; 0x2d
 8006716:	d078      	beq.n	800680a <_strtod_l+0x28a>
 8006718:	f04f 0c00 	mov.w	ip, #0
 800671c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006720:	2909      	cmp	r1, #9
 8006722:	d97f      	bls.n	8006824 <_strtod_l+0x2a4>
 8006724:	9515      	str	r5, [sp, #84]	; 0x54
 8006726:	2700      	movs	r7, #0
 8006728:	e09e      	b.n	8006868 <_strtod_l+0x2e8>
 800672a:	2300      	movs	r3, #0
 800672c:	e7c8      	b.n	80066c0 <_strtod_l+0x140>
 800672e:	f1bb 0f08 	cmp.w	fp, #8
 8006732:	bfd8      	it	le
 8006734:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006736:	f100 0001 	add.w	r0, r0, #1
 800673a:	bfda      	itte	le
 800673c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006740:	9309      	strle	r3, [sp, #36]	; 0x24
 8006742:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006746:	f10b 0b01 	add.w	fp, fp, #1
 800674a:	9015      	str	r0, [sp, #84]	; 0x54
 800674c:	e7c1      	b.n	80066d2 <_strtod_l+0x152>
 800674e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	9215      	str	r2, [sp, #84]	; 0x54
 8006754:	785a      	ldrb	r2, [r3, #1]
 8006756:	f1bb 0f00 	cmp.w	fp, #0
 800675a:	d037      	beq.n	80067cc <_strtod_l+0x24c>
 800675c:	9005      	str	r0, [sp, #20]
 800675e:	465e      	mov	r6, fp
 8006760:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006764:	2b09      	cmp	r3, #9
 8006766:	d912      	bls.n	800678e <_strtod_l+0x20e>
 8006768:	2301      	movs	r3, #1
 800676a:	e7c4      	b.n	80066f6 <_strtod_l+0x176>
 800676c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	9215      	str	r2, [sp, #84]	; 0x54
 8006772:	785a      	ldrb	r2, [r3, #1]
 8006774:	3001      	adds	r0, #1
 8006776:	2a30      	cmp	r2, #48	; 0x30
 8006778:	d0f8      	beq.n	800676c <_strtod_l+0x1ec>
 800677a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800677e:	2b08      	cmp	r3, #8
 8006780:	f200 84c1 	bhi.w	8007106 <_strtod_l+0xb86>
 8006784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006786:	9005      	str	r0, [sp, #20]
 8006788:	2000      	movs	r0, #0
 800678a:	930b      	str	r3, [sp, #44]	; 0x2c
 800678c:	4606      	mov	r6, r0
 800678e:	3a30      	subs	r2, #48	; 0x30
 8006790:	f100 0301 	add.w	r3, r0, #1
 8006794:	d014      	beq.n	80067c0 <_strtod_l+0x240>
 8006796:	9905      	ldr	r1, [sp, #20]
 8006798:	4419      	add	r1, r3
 800679a:	9105      	str	r1, [sp, #20]
 800679c:	4633      	mov	r3, r6
 800679e:	eb00 0c06 	add.w	ip, r0, r6
 80067a2:	210a      	movs	r1, #10
 80067a4:	4563      	cmp	r3, ip
 80067a6:	d113      	bne.n	80067d0 <_strtod_l+0x250>
 80067a8:	1833      	adds	r3, r6, r0
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	f106 0601 	add.w	r6, r6, #1
 80067b0:	4406      	add	r6, r0
 80067b2:	dc1a      	bgt.n	80067ea <_strtod_l+0x26a>
 80067b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b6:	230a      	movs	r3, #10
 80067b8:	fb03 2301 	mla	r3, r3, r1, r2
 80067bc:	9309      	str	r3, [sp, #36]	; 0x24
 80067be:	2300      	movs	r3, #0
 80067c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067c2:	1c51      	adds	r1, r2, #1
 80067c4:	9115      	str	r1, [sp, #84]	; 0x54
 80067c6:	7852      	ldrb	r2, [r2, #1]
 80067c8:	4618      	mov	r0, r3
 80067ca:	e7c9      	b.n	8006760 <_strtod_l+0x1e0>
 80067cc:	4658      	mov	r0, fp
 80067ce:	e7d2      	b.n	8006776 <_strtod_l+0x1f6>
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	f103 0301 	add.w	r3, r3, #1
 80067d6:	dc03      	bgt.n	80067e0 <_strtod_l+0x260>
 80067d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067da:	434f      	muls	r7, r1
 80067dc:	9709      	str	r7, [sp, #36]	; 0x24
 80067de:	e7e1      	b.n	80067a4 <_strtod_l+0x224>
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	bfd8      	it	le
 80067e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80067e8:	e7dc      	b.n	80067a4 <_strtod_l+0x224>
 80067ea:	2e10      	cmp	r6, #16
 80067ec:	bfdc      	itt	le
 80067ee:	230a      	movle	r3, #10
 80067f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80067f4:	e7e3      	b.n	80067be <_strtod_l+0x23e>
 80067f6:	2300      	movs	r3, #0
 80067f8:	9305      	str	r3, [sp, #20]
 80067fa:	2301      	movs	r3, #1
 80067fc:	e780      	b.n	8006700 <_strtod_l+0x180>
 80067fe:	f04f 0c00 	mov.w	ip, #0
 8006802:	1caa      	adds	r2, r5, #2
 8006804:	9215      	str	r2, [sp, #84]	; 0x54
 8006806:	78aa      	ldrb	r2, [r5, #2]
 8006808:	e788      	b.n	800671c <_strtod_l+0x19c>
 800680a:	f04f 0c01 	mov.w	ip, #1
 800680e:	e7f8      	b.n	8006802 <_strtod_l+0x282>
 8006810:	08008ed0 	.word	0x08008ed0
 8006814:	08008ecc 	.word	0x08008ecc
 8006818:	7ff00000 	.word	0x7ff00000
 800681c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800681e:	1c51      	adds	r1, r2, #1
 8006820:	9115      	str	r1, [sp, #84]	; 0x54
 8006822:	7852      	ldrb	r2, [r2, #1]
 8006824:	2a30      	cmp	r2, #48	; 0x30
 8006826:	d0f9      	beq.n	800681c <_strtod_l+0x29c>
 8006828:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800682c:	2908      	cmp	r1, #8
 800682e:	f63f af7a 	bhi.w	8006726 <_strtod_l+0x1a6>
 8006832:	3a30      	subs	r2, #48	; 0x30
 8006834:	9208      	str	r2, [sp, #32]
 8006836:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006838:	920c      	str	r2, [sp, #48]	; 0x30
 800683a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800683c:	1c57      	adds	r7, r2, #1
 800683e:	9715      	str	r7, [sp, #84]	; 0x54
 8006840:	7852      	ldrb	r2, [r2, #1]
 8006842:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006846:	f1be 0f09 	cmp.w	lr, #9
 800684a:	d938      	bls.n	80068be <_strtod_l+0x33e>
 800684c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800684e:	1a7f      	subs	r7, r7, r1
 8006850:	2f08      	cmp	r7, #8
 8006852:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006856:	dc03      	bgt.n	8006860 <_strtod_l+0x2e0>
 8006858:	9908      	ldr	r1, [sp, #32]
 800685a:	428f      	cmp	r7, r1
 800685c:	bfa8      	it	ge
 800685e:	460f      	movge	r7, r1
 8006860:	f1bc 0f00 	cmp.w	ip, #0
 8006864:	d000      	beq.n	8006868 <_strtod_l+0x2e8>
 8006866:	427f      	negs	r7, r7
 8006868:	2e00      	cmp	r6, #0
 800686a:	d14f      	bne.n	800690c <_strtod_l+0x38c>
 800686c:	9904      	ldr	r1, [sp, #16]
 800686e:	4301      	orrs	r1, r0
 8006870:	f47f aec1 	bne.w	80065f6 <_strtod_l+0x76>
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f aedb 	bne.w	8006630 <_strtod_l+0xb0>
 800687a:	2a69      	cmp	r2, #105	; 0x69
 800687c:	d029      	beq.n	80068d2 <_strtod_l+0x352>
 800687e:	dc26      	bgt.n	80068ce <_strtod_l+0x34e>
 8006880:	2a49      	cmp	r2, #73	; 0x49
 8006882:	d026      	beq.n	80068d2 <_strtod_l+0x352>
 8006884:	2a4e      	cmp	r2, #78	; 0x4e
 8006886:	f47f aed3 	bne.w	8006630 <_strtod_l+0xb0>
 800688a:	499b      	ldr	r1, [pc, #620]	; (8006af8 <_strtod_l+0x578>)
 800688c:	a815      	add	r0, sp, #84	; 0x54
 800688e:	f001 fd27 	bl	80082e0 <__match>
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f aecc 	beq.w	8006630 <_strtod_l+0xb0>
 8006898:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b28      	cmp	r3, #40	; 0x28
 800689e:	d12f      	bne.n	8006900 <_strtod_l+0x380>
 80068a0:	4996      	ldr	r1, [pc, #600]	; (8006afc <_strtod_l+0x57c>)
 80068a2:	aa18      	add	r2, sp, #96	; 0x60
 80068a4:	a815      	add	r0, sp, #84	; 0x54
 80068a6:	f001 fd2f 	bl	8008308 <__hexnan>
 80068aa:	2805      	cmp	r0, #5
 80068ac:	d128      	bne.n	8006900 <_strtod_l+0x380>
 80068ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80068b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80068bc:	e69b      	b.n	80065f6 <_strtod_l+0x76>
 80068be:	9f08      	ldr	r7, [sp, #32]
 80068c0:	210a      	movs	r1, #10
 80068c2:	fb01 2107 	mla	r1, r1, r7, r2
 80068c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80068ca:	9208      	str	r2, [sp, #32]
 80068cc:	e7b5      	b.n	800683a <_strtod_l+0x2ba>
 80068ce:	2a6e      	cmp	r2, #110	; 0x6e
 80068d0:	e7d9      	b.n	8006886 <_strtod_l+0x306>
 80068d2:	498b      	ldr	r1, [pc, #556]	; (8006b00 <_strtod_l+0x580>)
 80068d4:	a815      	add	r0, sp, #84	; 0x54
 80068d6:	f001 fd03 	bl	80082e0 <__match>
 80068da:	2800      	cmp	r0, #0
 80068dc:	f43f aea8 	beq.w	8006630 <_strtod_l+0xb0>
 80068e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068e2:	4988      	ldr	r1, [pc, #544]	; (8006b04 <_strtod_l+0x584>)
 80068e4:	3b01      	subs	r3, #1
 80068e6:	a815      	add	r0, sp, #84	; 0x54
 80068e8:	9315      	str	r3, [sp, #84]	; 0x54
 80068ea:	f001 fcf9 	bl	80082e0 <__match>
 80068ee:	b910      	cbnz	r0, 80068f6 <_strtod_l+0x376>
 80068f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068f2:	3301      	adds	r3, #1
 80068f4:	9315      	str	r3, [sp, #84]	; 0x54
 80068f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006b14 <_strtod_l+0x594>
 80068fa:	f04f 0800 	mov.w	r8, #0
 80068fe:	e67a      	b.n	80065f6 <_strtod_l+0x76>
 8006900:	4881      	ldr	r0, [pc, #516]	; (8006b08 <_strtod_l+0x588>)
 8006902:	f001 fa09 	bl	8007d18 <nan>
 8006906:	ec59 8b10 	vmov	r8, r9, d0
 800690a:	e674      	b.n	80065f6 <_strtod_l+0x76>
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006910:	1afb      	subs	r3, r7, r3
 8006912:	f1bb 0f00 	cmp.w	fp, #0
 8006916:	bf08      	it	eq
 8006918:	46b3      	moveq	fp, r6
 800691a:	2e10      	cmp	r6, #16
 800691c:	9308      	str	r3, [sp, #32]
 800691e:	4635      	mov	r5, r6
 8006920:	bfa8      	it	ge
 8006922:	2510      	movge	r5, #16
 8006924:	f7f9 fdee 	bl	8000504 <__aeabi_ui2d>
 8006928:	2e09      	cmp	r6, #9
 800692a:	4680      	mov	r8, r0
 800692c:	4689      	mov	r9, r1
 800692e:	dd13      	ble.n	8006958 <_strtod_l+0x3d8>
 8006930:	4b76      	ldr	r3, [pc, #472]	; (8006b0c <_strtod_l+0x58c>)
 8006932:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006936:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800693a:	f7f9 fe5d 	bl	80005f8 <__aeabi_dmul>
 800693e:	4680      	mov	r8, r0
 8006940:	4650      	mov	r0, sl
 8006942:	4689      	mov	r9, r1
 8006944:	f7f9 fdde 	bl	8000504 <__aeabi_ui2d>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4640      	mov	r0, r8
 800694e:	4649      	mov	r1, r9
 8006950:	f7f9 fc9c 	bl	800028c <__adddf3>
 8006954:	4680      	mov	r8, r0
 8006956:	4689      	mov	r9, r1
 8006958:	2e0f      	cmp	r6, #15
 800695a:	dc38      	bgt.n	80069ce <_strtod_l+0x44e>
 800695c:	9b08      	ldr	r3, [sp, #32]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f43f ae49 	beq.w	80065f6 <_strtod_l+0x76>
 8006964:	dd24      	ble.n	80069b0 <_strtod_l+0x430>
 8006966:	2b16      	cmp	r3, #22
 8006968:	dc0b      	bgt.n	8006982 <_strtod_l+0x402>
 800696a:	4968      	ldr	r1, [pc, #416]	; (8006b0c <_strtod_l+0x58c>)
 800696c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	f7f9 fe3e 	bl	80005f8 <__aeabi_dmul>
 800697c:	4680      	mov	r8, r0
 800697e:	4689      	mov	r9, r1
 8006980:	e639      	b.n	80065f6 <_strtod_l+0x76>
 8006982:	9a08      	ldr	r2, [sp, #32]
 8006984:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006988:	4293      	cmp	r3, r2
 800698a:	db20      	blt.n	80069ce <_strtod_l+0x44e>
 800698c:	4c5f      	ldr	r4, [pc, #380]	; (8006b0c <_strtod_l+0x58c>)
 800698e:	f1c6 060f 	rsb	r6, r6, #15
 8006992:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006996:	4642      	mov	r2, r8
 8006998:	464b      	mov	r3, r9
 800699a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800699e:	f7f9 fe2b 	bl	80005f8 <__aeabi_dmul>
 80069a2:	9b08      	ldr	r3, [sp, #32]
 80069a4:	1b9e      	subs	r6, r3, r6
 80069a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80069aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069ae:	e7e3      	b.n	8006978 <_strtod_l+0x3f8>
 80069b0:	9b08      	ldr	r3, [sp, #32]
 80069b2:	3316      	adds	r3, #22
 80069b4:	db0b      	blt.n	80069ce <_strtod_l+0x44e>
 80069b6:	9b05      	ldr	r3, [sp, #20]
 80069b8:	1bdf      	subs	r7, r3, r7
 80069ba:	4b54      	ldr	r3, [pc, #336]	; (8006b0c <_strtod_l+0x58c>)
 80069bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80069c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c4:	4640      	mov	r0, r8
 80069c6:	4649      	mov	r1, r9
 80069c8:	f7f9 ff40 	bl	800084c <__aeabi_ddiv>
 80069cc:	e7d6      	b.n	800697c <_strtod_l+0x3fc>
 80069ce:	9b08      	ldr	r3, [sp, #32]
 80069d0:	1b75      	subs	r5, r6, r5
 80069d2:	441d      	add	r5, r3
 80069d4:	2d00      	cmp	r5, #0
 80069d6:	dd70      	ble.n	8006aba <_strtod_l+0x53a>
 80069d8:	f015 030f 	ands.w	r3, r5, #15
 80069dc:	d00a      	beq.n	80069f4 <_strtod_l+0x474>
 80069de:	494b      	ldr	r1, [pc, #300]	; (8006b0c <_strtod_l+0x58c>)
 80069e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ec:	f7f9 fe04 	bl	80005f8 <__aeabi_dmul>
 80069f0:	4680      	mov	r8, r0
 80069f2:	4689      	mov	r9, r1
 80069f4:	f035 050f 	bics.w	r5, r5, #15
 80069f8:	d04d      	beq.n	8006a96 <_strtod_l+0x516>
 80069fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80069fe:	dd22      	ble.n	8006a46 <_strtod_l+0x4c6>
 8006a00:	2500      	movs	r5, #0
 8006a02:	46ab      	mov	fp, r5
 8006a04:	9509      	str	r5, [sp, #36]	; 0x24
 8006a06:	9505      	str	r5, [sp, #20]
 8006a08:	2322      	movs	r3, #34	; 0x22
 8006a0a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006b14 <_strtod_l+0x594>
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	f04f 0800 	mov.w	r8, #0
 8006a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f aded 	beq.w	80065f6 <_strtod_l+0x76>
 8006a1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff f924 	bl	8005c6c <_Bfree>
 8006a24:	9905      	ldr	r1, [sp, #20]
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7ff f920 	bl	8005c6c <_Bfree>
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7ff f91c 	bl	8005c6c <_Bfree>
 8006a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a36:	4620      	mov	r0, r4
 8006a38:	f7ff f918 	bl	8005c6c <_Bfree>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff f914 	bl	8005c6c <_Bfree>
 8006a44:	e5d7      	b.n	80065f6 <_strtod_l+0x76>
 8006a46:	4b32      	ldr	r3, [pc, #200]	; (8006b10 <_strtod_l+0x590>)
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	112d      	asrs	r5, r5, #4
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	469a      	mov	sl, r3
 8006a54:	2d01      	cmp	r5, #1
 8006a56:	dc21      	bgt.n	8006a9c <_strtod_l+0x51c>
 8006a58:	b10b      	cbz	r3, 8006a5e <_strtod_l+0x4de>
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	4689      	mov	r9, r1
 8006a5e:	492c      	ldr	r1, [pc, #176]	; (8006b10 <_strtod_l+0x590>)
 8006a60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a64:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a68:	4642      	mov	r2, r8
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a70:	f7f9 fdc2 	bl	80005f8 <__aeabi_dmul>
 8006a74:	4b27      	ldr	r3, [pc, #156]	; (8006b14 <_strtod_l+0x594>)
 8006a76:	460a      	mov	r2, r1
 8006a78:	400b      	ands	r3, r1
 8006a7a:	4927      	ldr	r1, [pc, #156]	; (8006b18 <_strtod_l+0x598>)
 8006a7c:	428b      	cmp	r3, r1
 8006a7e:	4680      	mov	r8, r0
 8006a80:	d8be      	bhi.n	8006a00 <_strtod_l+0x480>
 8006a82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a86:	428b      	cmp	r3, r1
 8006a88:	bf86      	itte	hi
 8006a8a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006b1c <_strtod_l+0x59c>
 8006a8e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006a92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006a96:	2300      	movs	r3, #0
 8006a98:	9304      	str	r3, [sp, #16]
 8006a9a:	e07b      	b.n	8006b94 <_strtod_l+0x614>
 8006a9c:	07ea      	lsls	r2, r5, #31
 8006a9e:	d505      	bpl.n	8006aac <_strtod_l+0x52c>
 8006aa0:	9b04      	ldr	r3, [sp, #16]
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f7f9 fda7 	bl	80005f8 <__aeabi_dmul>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9a04      	ldr	r2, [sp, #16]
 8006aae:	3208      	adds	r2, #8
 8006ab0:	f10a 0a01 	add.w	sl, sl, #1
 8006ab4:	106d      	asrs	r5, r5, #1
 8006ab6:	9204      	str	r2, [sp, #16]
 8006ab8:	e7cc      	b.n	8006a54 <_strtod_l+0x4d4>
 8006aba:	d0ec      	beq.n	8006a96 <_strtod_l+0x516>
 8006abc:	426d      	negs	r5, r5
 8006abe:	f015 020f 	ands.w	r2, r5, #15
 8006ac2:	d00a      	beq.n	8006ada <_strtod_l+0x55a>
 8006ac4:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <_strtod_l+0x58c>)
 8006ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f7f9 febb 	bl	800084c <__aeabi_ddiv>
 8006ad6:	4680      	mov	r8, r0
 8006ad8:	4689      	mov	r9, r1
 8006ada:	112d      	asrs	r5, r5, #4
 8006adc:	d0db      	beq.n	8006a96 <_strtod_l+0x516>
 8006ade:	2d1f      	cmp	r5, #31
 8006ae0:	dd1e      	ble.n	8006b20 <_strtod_l+0x5a0>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	46ab      	mov	fp, r5
 8006ae6:	9509      	str	r5, [sp, #36]	; 0x24
 8006ae8:	9505      	str	r5, [sp, #20]
 8006aea:	2322      	movs	r3, #34	; 0x22
 8006aec:	f04f 0800 	mov.w	r8, #0
 8006af0:	f04f 0900 	mov.w	r9, #0
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	e78d      	b.n	8006a14 <_strtod_l+0x494>
 8006af8:	08008cba 	.word	0x08008cba
 8006afc:	08008ee4 	.word	0x08008ee4
 8006b00:	08008cb2 	.word	0x08008cb2
 8006b04:	08008ce7 	.word	0x08008ce7
 8006b08:	08008f8f 	.word	0x08008f8f
 8006b0c:	08008df8 	.word	0x08008df8
 8006b10:	08008dd0 	.word	0x08008dd0
 8006b14:	7ff00000 	.word	0x7ff00000
 8006b18:	7ca00000 	.word	0x7ca00000
 8006b1c:	7fefffff 	.word	0x7fefffff
 8006b20:	f015 0310 	ands.w	r3, r5, #16
 8006b24:	bf18      	it	ne
 8006b26:	236a      	movne	r3, #106	; 0x6a
 8006b28:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006ecc <_strtod_l+0x94c>
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	4640      	mov	r0, r8
 8006b30:	4649      	mov	r1, r9
 8006b32:	2300      	movs	r3, #0
 8006b34:	07ea      	lsls	r2, r5, #31
 8006b36:	d504      	bpl.n	8006b42 <_strtod_l+0x5c2>
 8006b38:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	2301      	movs	r3, #1
 8006b42:	106d      	asrs	r5, r5, #1
 8006b44:	f10a 0a08 	add.w	sl, sl, #8
 8006b48:	d1f4      	bne.n	8006b34 <_strtod_l+0x5b4>
 8006b4a:	b10b      	cbz	r3, 8006b50 <_strtod_l+0x5d0>
 8006b4c:	4680      	mov	r8, r0
 8006b4e:	4689      	mov	r9, r1
 8006b50:	9b04      	ldr	r3, [sp, #16]
 8006b52:	b1bb      	cbz	r3, 8006b84 <_strtod_l+0x604>
 8006b54:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006b58:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	4649      	mov	r1, r9
 8006b60:	dd10      	ble.n	8006b84 <_strtod_l+0x604>
 8006b62:	2b1f      	cmp	r3, #31
 8006b64:	f340 811e 	ble.w	8006da4 <_strtod_l+0x824>
 8006b68:	2b34      	cmp	r3, #52	; 0x34
 8006b6a:	bfde      	ittt	le
 8006b6c:	f04f 33ff 	movle.w	r3, #4294967295
 8006b70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b74:	4093      	lslle	r3, r2
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	bfcc      	ite	gt
 8006b7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b80:	ea03 0901 	andle.w	r9, r3, r1
 8006b84:	2200      	movs	r2, #0
 8006b86:	2300      	movs	r3, #0
 8006b88:	4640      	mov	r0, r8
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	f7f9 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d1a6      	bne.n	8006ae2 <_strtod_l+0x562>
 8006b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b9a:	4633      	mov	r3, r6
 8006b9c:	465a      	mov	r2, fp
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f7ff f8cc 	bl	8005d3c <__s2b>
 8006ba4:	9009      	str	r0, [sp, #36]	; 0x24
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f af2a 	beq.w	8006a00 <_strtod_l+0x480>
 8006bac:	9a08      	ldr	r2, [sp, #32]
 8006bae:	9b05      	ldr	r3, [sp, #20]
 8006bb0:	2a00      	cmp	r2, #0
 8006bb2:	eba3 0307 	sub.w	r3, r3, r7
 8006bb6:	bfa8      	it	ge
 8006bb8:	2300      	movge	r3, #0
 8006bba:	930c      	str	r3, [sp, #48]	; 0x30
 8006bbc:	2500      	movs	r5, #0
 8006bbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006bc2:	9312      	str	r3, [sp, #72]	; 0x48
 8006bc4:	46ab      	mov	fp, r5
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	4620      	mov	r0, r4
 8006bca:	6859      	ldr	r1, [r3, #4]
 8006bcc:	f7ff f80e 	bl	8005bec <_Balloc>
 8006bd0:	9005      	str	r0, [sp, #20]
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f43f af18 	beq.w	8006a08 <_strtod_l+0x488>
 8006bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	3202      	adds	r2, #2
 8006bde:	f103 010c 	add.w	r1, r3, #12
 8006be2:	0092      	lsls	r2, r2, #2
 8006be4:	300c      	adds	r0, #12
 8006be6:	f7fe f870 	bl	8004cca <memcpy>
 8006bea:	ec49 8b10 	vmov	d0, r8, r9
 8006bee:	aa18      	add	r2, sp, #96	; 0x60
 8006bf0:	a917      	add	r1, sp, #92	; 0x5c
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7ff fbd6 	bl	80063a4 <__d2b>
 8006bf8:	ec49 8b18 	vmov	d8, r8, r9
 8006bfc:	9016      	str	r0, [sp, #88]	; 0x58
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f43f af02 	beq.w	8006a08 <_strtod_l+0x488>
 8006c04:	2101      	movs	r1, #1
 8006c06:	4620      	mov	r0, r4
 8006c08:	f7ff f930 	bl	8005e6c <__i2b>
 8006c0c:	4683      	mov	fp, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f43f aefa 	beq.w	8006a08 <_strtod_l+0x488>
 8006c14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006c16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	bfab      	itete	ge
 8006c1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006c1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006c20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006c22:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006c26:	bfac      	ite	ge
 8006c28:	eb06 0a03 	addge.w	sl, r6, r3
 8006c2c:	1b9f      	sublt	r7, r3, r6
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	1af6      	subs	r6, r6, r3
 8006c32:	4416      	add	r6, r2
 8006c34:	4ba0      	ldr	r3, [pc, #640]	; (8006eb8 <_strtod_l+0x938>)
 8006c36:	3e01      	subs	r6, #1
 8006c38:	429e      	cmp	r6, r3
 8006c3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c3e:	f280 80c4 	bge.w	8006dca <_strtod_l+0x84a>
 8006c42:	1b9b      	subs	r3, r3, r6
 8006c44:	2b1f      	cmp	r3, #31
 8006c46:	eba2 0203 	sub.w	r2, r2, r3
 8006c4a:	f04f 0101 	mov.w	r1, #1
 8006c4e:	f300 80b0 	bgt.w	8006db2 <_strtod_l+0x832>
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	930e      	str	r3, [sp, #56]	; 0x38
 8006c58:	2300      	movs	r3, #0
 8006c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8006c5c:	eb0a 0602 	add.w	r6, sl, r2
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	45b2      	cmp	sl, r6
 8006c64:	4417      	add	r7, r2
 8006c66:	441f      	add	r7, r3
 8006c68:	4653      	mov	r3, sl
 8006c6a:	bfa8      	it	ge
 8006c6c:	4633      	movge	r3, r6
 8006c6e:	42bb      	cmp	r3, r7
 8006c70:	bfa8      	it	ge
 8006c72:	463b      	movge	r3, r7
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfc2      	ittt	gt
 8006c78:	1af6      	subgt	r6, r6, r3
 8006c7a:	1aff      	subgt	r7, r7, r3
 8006c7c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dd17      	ble.n	8006cb6 <_strtod_l+0x736>
 8006c86:	4659      	mov	r1, fp
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f7ff f9ae 	bl	8005fec <__pow5mult>
 8006c90:	4683      	mov	fp, r0
 8006c92:	2800      	cmp	r0, #0
 8006c94:	f43f aeb8 	beq.w	8006a08 <_strtod_l+0x488>
 8006c98:	4601      	mov	r1, r0
 8006c9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f7ff f8fb 	bl	8005e98 <__multiply>
 8006ca2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f43f aeaf 	beq.w	8006a08 <_strtod_l+0x488>
 8006caa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006cac:	4620      	mov	r0, r4
 8006cae:	f7fe ffdd 	bl	8005c6c <_Bfree>
 8006cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb4:	9316      	str	r3, [sp, #88]	; 0x58
 8006cb6:	2e00      	cmp	r6, #0
 8006cb8:	f300 808c 	bgt.w	8006dd4 <_strtod_l+0x854>
 8006cbc:	9b08      	ldr	r3, [sp, #32]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd08      	ble.n	8006cd4 <_strtod_l+0x754>
 8006cc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cc4:	9905      	ldr	r1, [sp, #20]
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7ff f990 	bl	8005fec <__pow5mult>
 8006ccc:	9005      	str	r0, [sp, #20]
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f ae9a 	beq.w	8006a08 <_strtod_l+0x488>
 8006cd4:	2f00      	cmp	r7, #0
 8006cd6:	dd08      	ble.n	8006cea <_strtod_l+0x76a>
 8006cd8:	9905      	ldr	r1, [sp, #20]
 8006cda:	463a      	mov	r2, r7
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff f9df 	bl	80060a0 <__lshift>
 8006ce2:	9005      	str	r0, [sp, #20]
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f43f ae8f 	beq.w	8006a08 <_strtod_l+0x488>
 8006cea:	f1ba 0f00 	cmp.w	sl, #0
 8006cee:	dd08      	ble.n	8006d02 <_strtod_l+0x782>
 8006cf0:	4659      	mov	r1, fp
 8006cf2:	4652      	mov	r2, sl
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f7ff f9d3 	bl	80060a0 <__lshift>
 8006cfa:	4683      	mov	fp, r0
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f43f ae83 	beq.w	8006a08 <_strtod_l+0x488>
 8006d02:	9a05      	ldr	r2, [sp, #20]
 8006d04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d06:	4620      	mov	r0, r4
 8006d08:	f7ff fa52 	bl	80061b0 <__mdiff>
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f43f ae7a 	beq.w	8006a08 <_strtod_l+0x488>
 8006d14:	68c3      	ldr	r3, [r0, #12]
 8006d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60c3      	str	r3, [r0, #12]
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	f7ff fa2b 	bl	8006178 <__mcmp>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	da60      	bge.n	8006de8 <_strtod_l+0x868>
 8006d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d28:	ea53 0308 	orrs.w	r3, r3, r8
 8006d2c:	f040 8084 	bne.w	8006e38 <_strtod_l+0x8b8>
 8006d30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d17f      	bne.n	8006e38 <_strtod_l+0x8b8>
 8006d38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d3c:	0d1b      	lsrs	r3, r3, #20
 8006d3e:	051b      	lsls	r3, r3, #20
 8006d40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d44:	d978      	bls.n	8006e38 <_strtod_l+0x8b8>
 8006d46:	696b      	ldr	r3, [r5, #20]
 8006d48:	b913      	cbnz	r3, 8006d50 <_strtod_l+0x7d0>
 8006d4a:	692b      	ldr	r3, [r5, #16]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	dd73      	ble.n	8006e38 <_strtod_l+0x8b8>
 8006d50:	4629      	mov	r1, r5
 8006d52:	2201      	movs	r2, #1
 8006d54:	4620      	mov	r0, r4
 8006d56:	f7ff f9a3 	bl	80060a0 <__lshift>
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	f7ff fa0b 	bl	8006178 <__mcmp>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	dd68      	ble.n	8006e38 <_strtod_l+0x8b8>
 8006d66:	9904      	ldr	r1, [sp, #16]
 8006d68:	4a54      	ldr	r2, [pc, #336]	; (8006ebc <_strtod_l+0x93c>)
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	f000 8084 	beq.w	8006e7a <_strtod_l+0x8fa>
 8006d72:	ea02 0109 	and.w	r1, r2, r9
 8006d76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d7a:	dc7e      	bgt.n	8006e7a <_strtod_l+0x8fa>
 8006d7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d80:	f77f aeb3 	ble.w	8006aea <_strtod_l+0x56a>
 8006d84:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <_strtod_l+0x940>)
 8006d86:	4640      	mov	r0, r8
 8006d88:	4649      	mov	r1, r9
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f7f9 fc34 	bl	80005f8 <__aeabi_dmul>
 8006d90:	4b4a      	ldr	r3, [pc, #296]	; (8006ebc <_strtod_l+0x93c>)
 8006d92:	400b      	ands	r3, r1
 8006d94:	4680      	mov	r8, r0
 8006d96:	4689      	mov	r9, r1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f47f ae3f 	bne.w	8006a1c <_strtod_l+0x49c>
 8006d9e:	2322      	movs	r3, #34	; 0x22
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	e63b      	b.n	8006a1c <_strtod_l+0x49c>
 8006da4:	f04f 32ff 	mov.w	r2, #4294967295
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	ea03 0808 	and.w	r8, r3, r8
 8006db0:	e6e8      	b.n	8006b84 <_strtod_l+0x604>
 8006db2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006db6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006dba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006dbe:	36e2      	adds	r6, #226	; 0xe2
 8006dc0:	fa01 f306 	lsl.w	r3, r1, r6
 8006dc4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006dc8:	e748      	b.n	8006c5c <_strtod_l+0x6dc>
 8006dca:	2100      	movs	r1, #0
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006dd2:	e743      	b.n	8006c5c <_strtod_l+0x6dc>
 8006dd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7ff f961 	bl	80060a0 <__lshift>
 8006dde:	9016      	str	r0, [sp, #88]	; 0x58
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f47f af6b 	bne.w	8006cbc <_strtod_l+0x73c>
 8006de6:	e60f      	b.n	8006a08 <_strtod_l+0x488>
 8006de8:	46ca      	mov	sl, r9
 8006dea:	d171      	bne.n	8006ed0 <_strtod_l+0x950>
 8006dec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006df2:	b352      	cbz	r2, 8006e4a <_strtod_l+0x8ca>
 8006df4:	4a33      	ldr	r2, [pc, #204]	; (8006ec4 <_strtod_l+0x944>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d12a      	bne.n	8006e50 <_strtod_l+0x8d0>
 8006dfa:	9b04      	ldr	r3, [sp, #16]
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	b1fb      	cbz	r3, 8006e40 <_strtod_l+0x8c0>
 8006e00:	4b2e      	ldr	r3, [pc, #184]	; (8006ebc <_strtod_l+0x93c>)
 8006e02:	ea09 0303 	and.w	r3, r9, r3
 8006e06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0e:	d81a      	bhi.n	8006e46 <_strtod_l+0x8c6>
 8006e10:	0d1b      	lsrs	r3, r3, #20
 8006e12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d118      	bne.n	8006e50 <_strtod_l+0x8d0>
 8006e1e:	4b2a      	ldr	r3, [pc, #168]	; (8006ec8 <_strtod_l+0x948>)
 8006e20:	459a      	cmp	sl, r3
 8006e22:	d102      	bne.n	8006e2a <_strtod_l+0x8aa>
 8006e24:	3101      	adds	r1, #1
 8006e26:	f43f adef 	beq.w	8006a08 <_strtod_l+0x488>
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <_strtod_l+0x93c>)
 8006e2c:	ea0a 0303 	and.w	r3, sl, r3
 8006e30:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006e34:	f04f 0800 	mov.w	r8, #0
 8006e38:	9b04      	ldr	r3, [sp, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1a2      	bne.n	8006d84 <_strtod_l+0x804>
 8006e3e:	e5ed      	b.n	8006a1c <_strtod_l+0x49c>
 8006e40:	f04f 33ff 	mov.w	r3, #4294967295
 8006e44:	e7e9      	b.n	8006e1a <_strtod_l+0x89a>
 8006e46:	4613      	mov	r3, r2
 8006e48:	e7e7      	b.n	8006e1a <_strtod_l+0x89a>
 8006e4a:	ea53 0308 	orrs.w	r3, r3, r8
 8006e4e:	d08a      	beq.n	8006d66 <_strtod_l+0x7e6>
 8006e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e52:	b1e3      	cbz	r3, 8006e8e <_strtod_l+0x90e>
 8006e54:	ea13 0f0a 	tst.w	r3, sl
 8006e58:	d0ee      	beq.n	8006e38 <_strtod_l+0x8b8>
 8006e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e5c:	9a04      	ldr	r2, [sp, #16]
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4649      	mov	r1, r9
 8006e62:	b1c3      	cbz	r3, 8006e96 <_strtod_l+0x916>
 8006e64:	f7ff fb6f 	bl	8006546 <sulp>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	ec51 0b18 	vmov	r0, r1, d8
 8006e70:	f7f9 fa0c 	bl	800028c <__adddf3>
 8006e74:	4680      	mov	r8, r0
 8006e76:	4689      	mov	r9, r1
 8006e78:	e7de      	b.n	8006e38 <_strtod_l+0x8b8>
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e80:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006e84:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006e88:	f04f 38ff 	mov.w	r8, #4294967295
 8006e8c:	e7d4      	b.n	8006e38 <_strtod_l+0x8b8>
 8006e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e90:	ea13 0f08 	tst.w	r3, r8
 8006e94:	e7e0      	b.n	8006e58 <_strtod_l+0x8d8>
 8006e96:	f7ff fb56 	bl	8006546 <sulp>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	ec51 0b18 	vmov	r0, r1, d8
 8006ea2:	f7f9 f9f1 	bl	8000288 <__aeabi_dsub>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4680      	mov	r8, r0
 8006eac:	4689      	mov	r9, r1
 8006eae:	f7f9 fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d0c0      	beq.n	8006e38 <_strtod_l+0x8b8>
 8006eb6:	e618      	b.n	8006aea <_strtod_l+0x56a>
 8006eb8:	fffffc02 	.word	0xfffffc02
 8006ebc:	7ff00000 	.word	0x7ff00000
 8006ec0:	39500000 	.word	0x39500000
 8006ec4:	000fffff 	.word	0x000fffff
 8006ec8:	7fefffff 	.word	0x7fefffff
 8006ecc:	08008ef8 	.word	0x08008ef8
 8006ed0:	4659      	mov	r1, fp
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7ff fac0 	bl	8006458 <__ratio>
 8006ed8:	ec57 6b10 	vmov	r6, r7, d0
 8006edc:	ee10 0a10 	vmov	r0, s0
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	f7f9 fe02 	bl	8000af0 <__aeabi_dcmple>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d071      	beq.n	8006fd4 <_strtod_l+0xa54>
 8006ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d17c      	bne.n	8006ff0 <_strtod_l+0xa70>
 8006ef6:	f1b8 0f00 	cmp.w	r8, #0
 8006efa:	d15a      	bne.n	8006fb2 <_strtod_l+0xa32>
 8006efc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d15d      	bne.n	8006fc0 <_strtod_l+0xa40>
 8006f04:	4b90      	ldr	r3, [pc, #576]	; (8007148 <_strtod_l+0xbc8>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	f7f9 fde6 	bl	8000adc <__aeabi_dcmplt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d15c      	bne.n	8006fce <_strtod_l+0xa4e>
 8006f14:	4630      	mov	r0, r6
 8006f16:	4639      	mov	r1, r7
 8006f18:	4b8c      	ldr	r3, [pc, #560]	; (800714c <_strtod_l+0xbcc>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f7f9 fb6c 	bl	80005f8 <__aeabi_dmul>
 8006f20:	4606      	mov	r6, r0
 8006f22:	460f      	mov	r7, r1
 8006f24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f28:	9606      	str	r6, [sp, #24]
 8006f2a:	9307      	str	r3, [sp, #28]
 8006f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006f34:	4b86      	ldr	r3, [pc, #536]	; (8007150 <_strtod_l+0xbd0>)
 8006f36:	ea0a 0303 	and.w	r3, sl, r3
 8006f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f3e:	4b85      	ldr	r3, [pc, #532]	; (8007154 <_strtod_l+0xbd4>)
 8006f40:	429a      	cmp	r2, r3
 8006f42:	f040 8090 	bne.w	8007066 <_strtod_l+0xae6>
 8006f46:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006f4a:	ec49 8b10 	vmov	d0, r8, r9
 8006f4e:	f7ff f9b9 	bl	80062c4 <__ulp>
 8006f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f56:	ec51 0b10 	vmov	r0, r1, d0
 8006f5a:	f7f9 fb4d 	bl	80005f8 <__aeabi_dmul>
 8006f5e:	4642      	mov	r2, r8
 8006f60:	464b      	mov	r3, r9
 8006f62:	f7f9 f993 	bl	800028c <__adddf3>
 8006f66:	460b      	mov	r3, r1
 8006f68:	4979      	ldr	r1, [pc, #484]	; (8007150 <_strtod_l+0xbd0>)
 8006f6a:	4a7b      	ldr	r2, [pc, #492]	; (8007158 <_strtod_l+0xbd8>)
 8006f6c:	4019      	ands	r1, r3
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	4680      	mov	r8, r0
 8006f72:	d944      	bls.n	8006ffe <_strtod_l+0xa7e>
 8006f74:	ee18 2a90 	vmov	r2, s17
 8006f78:	4b78      	ldr	r3, [pc, #480]	; (800715c <_strtod_l+0xbdc>)
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d104      	bne.n	8006f88 <_strtod_l+0xa08>
 8006f7e:	ee18 3a10 	vmov	r3, s16
 8006f82:	3301      	adds	r3, #1
 8006f84:	f43f ad40 	beq.w	8006a08 <_strtod_l+0x488>
 8006f88:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800715c <_strtod_l+0xbdc>
 8006f8c:	f04f 38ff 	mov.w	r8, #4294967295
 8006f90:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7fe fe6a 	bl	8005c6c <_Bfree>
 8006f98:	9905      	ldr	r1, [sp, #20]
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f7fe fe66 	bl	8005c6c <_Bfree>
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f7fe fe62 	bl	8005c6c <_Bfree>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	4620      	mov	r0, r4
 8006fac:	f7fe fe5e 	bl	8005c6c <_Bfree>
 8006fb0:	e609      	b.n	8006bc6 <_strtod_l+0x646>
 8006fb2:	f1b8 0f01 	cmp.w	r8, #1
 8006fb6:	d103      	bne.n	8006fc0 <_strtod_l+0xa40>
 8006fb8:	f1b9 0f00 	cmp.w	r9, #0
 8006fbc:	f43f ad95 	beq.w	8006aea <_strtod_l+0x56a>
 8006fc0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007118 <_strtod_l+0xb98>
 8006fc4:	4f60      	ldr	r7, [pc, #384]	; (8007148 <_strtod_l+0xbc8>)
 8006fc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fca:	2600      	movs	r6, #0
 8006fcc:	e7ae      	b.n	8006f2c <_strtod_l+0x9ac>
 8006fce:	4f5f      	ldr	r7, [pc, #380]	; (800714c <_strtod_l+0xbcc>)
 8006fd0:	2600      	movs	r6, #0
 8006fd2:	e7a7      	b.n	8006f24 <_strtod_l+0x9a4>
 8006fd4:	4b5d      	ldr	r3, [pc, #372]	; (800714c <_strtod_l+0xbcc>)
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f7f9 fb0c 	bl	80005f8 <__aeabi_dmul>
 8006fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460f      	mov	r7, r1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d09c      	beq.n	8006f24 <_strtod_l+0x9a4>
 8006fea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006fee:	e79d      	b.n	8006f2c <_strtod_l+0x9ac>
 8006ff0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007120 <_strtod_l+0xba0>
 8006ff4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ff8:	ec57 6b17 	vmov	r6, r7, d7
 8006ffc:	e796      	b.n	8006f2c <_strtod_l+0x9ac>
 8006ffe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007002:	9b04      	ldr	r3, [sp, #16]
 8007004:	46ca      	mov	sl, r9
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1c2      	bne.n	8006f90 <_strtod_l+0xa10>
 800700a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800700e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007010:	0d1b      	lsrs	r3, r3, #20
 8007012:	051b      	lsls	r3, r3, #20
 8007014:	429a      	cmp	r2, r3
 8007016:	d1bb      	bne.n	8006f90 <_strtod_l+0xa10>
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 fe34 	bl	8000c88 <__aeabi_d2lz>
 8007020:	f7f9 fabc 	bl	800059c <__aeabi_l2d>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 f92c 	bl	8000288 <__aeabi_dsub>
 8007030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007032:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007036:	ea43 0308 	orr.w	r3, r3, r8
 800703a:	4313      	orrs	r3, r2
 800703c:	4606      	mov	r6, r0
 800703e:	460f      	mov	r7, r1
 8007040:	d054      	beq.n	80070ec <_strtod_l+0xb6c>
 8007042:	a339      	add	r3, pc, #228	; (adr r3, 8007128 <_strtod_l+0xba8>)
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	f7f9 fd48 	bl	8000adc <__aeabi_dcmplt>
 800704c:	2800      	cmp	r0, #0
 800704e:	f47f ace5 	bne.w	8006a1c <_strtod_l+0x49c>
 8007052:	a337      	add	r3, pc, #220	; (adr r3, 8007130 <_strtod_l+0xbb0>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 fd5c 	bl	8000b18 <__aeabi_dcmpgt>
 8007060:	2800      	cmp	r0, #0
 8007062:	d095      	beq.n	8006f90 <_strtod_l+0xa10>
 8007064:	e4da      	b.n	8006a1c <_strtod_l+0x49c>
 8007066:	9b04      	ldr	r3, [sp, #16]
 8007068:	b333      	cbz	r3, 80070b8 <_strtod_l+0xb38>
 800706a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800706c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007070:	d822      	bhi.n	80070b8 <_strtod_l+0xb38>
 8007072:	a331      	add	r3, pc, #196	; (adr r3, 8007138 <_strtod_l+0xbb8>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fd38 	bl	8000af0 <__aeabi_dcmple>
 8007080:	b1a0      	cbz	r0, 80070ac <_strtod_l+0xb2c>
 8007082:	4639      	mov	r1, r7
 8007084:	4630      	mov	r0, r6
 8007086:	f7f9 fd8f 	bl	8000ba8 <__aeabi_d2uiz>
 800708a:	2801      	cmp	r0, #1
 800708c:	bf38      	it	cc
 800708e:	2001      	movcc	r0, #1
 8007090:	f7f9 fa38 	bl	8000504 <__aeabi_ui2d>
 8007094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007096:	4606      	mov	r6, r0
 8007098:	460f      	mov	r7, r1
 800709a:	bb23      	cbnz	r3, 80070e6 <_strtod_l+0xb66>
 800709c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070a0:	9010      	str	r0, [sp, #64]	; 0x40
 80070a2:	9311      	str	r3, [sp, #68]	; 0x44
 80070a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80070ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80070bc:	eeb0 0a48 	vmov.f32	s0, s16
 80070c0:	eef0 0a68 	vmov.f32	s1, s17
 80070c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80070c8:	f7ff f8fc 	bl	80062c4 <__ulp>
 80070cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80070d0:	ec53 2b10 	vmov	r2, r3, d0
 80070d4:	f7f9 fa90 	bl	80005f8 <__aeabi_dmul>
 80070d8:	ec53 2b18 	vmov	r2, r3, d8
 80070dc:	f7f9 f8d6 	bl	800028c <__adddf3>
 80070e0:	4680      	mov	r8, r0
 80070e2:	4689      	mov	r9, r1
 80070e4:	e78d      	b.n	8007002 <_strtod_l+0xa82>
 80070e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80070ea:	e7db      	b.n	80070a4 <_strtod_l+0xb24>
 80070ec:	a314      	add	r3, pc, #80	; (adr r3, 8007140 <_strtod_l+0xbc0>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 fcf3 	bl	8000adc <__aeabi_dcmplt>
 80070f6:	e7b3      	b.n	8007060 <_strtod_l+0xae0>
 80070f8:	2300      	movs	r3, #0
 80070fa:	930a      	str	r3, [sp, #40]	; 0x28
 80070fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	f7ff ba7c 	b.w	80065fe <_strtod_l+0x7e>
 8007106:	2a65      	cmp	r2, #101	; 0x65
 8007108:	f43f ab75 	beq.w	80067f6 <_strtod_l+0x276>
 800710c:	2a45      	cmp	r2, #69	; 0x45
 800710e:	f43f ab72 	beq.w	80067f6 <_strtod_l+0x276>
 8007112:	2301      	movs	r3, #1
 8007114:	f7ff bbaa 	b.w	800686c <_strtod_l+0x2ec>
 8007118:	00000000 	.word	0x00000000
 800711c:	bff00000 	.word	0xbff00000
 8007120:	00000000 	.word	0x00000000
 8007124:	3ff00000 	.word	0x3ff00000
 8007128:	94a03595 	.word	0x94a03595
 800712c:	3fdfffff 	.word	0x3fdfffff
 8007130:	35afe535 	.word	0x35afe535
 8007134:	3fe00000 	.word	0x3fe00000
 8007138:	ffc00000 	.word	0xffc00000
 800713c:	41dfffff 	.word	0x41dfffff
 8007140:	94a03595 	.word	0x94a03595
 8007144:	3fcfffff 	.word	0x3fcfffff
 8007148:	3ff00000 	.word	0x3ff00000
 800714c:	3fe00000 	.word	0x3fe00000
 8007150:	7ff00000 	.word	0x7ff00000
 8007154:	7fe00000 	.word	0x7fe00000
 8007158:	7c9fffff 	.word	0x7c9fffff
 800715c:	7fefffff 	.word	0x7fefffff

08007160 <_strtod_r>:
 8007160:	4b01      	ldr	r3, [pc, #4]	; (8007168 <_strtod_r+0x8>)
 8007162:	f7ff ba0d 	b.w	8006580 <_strtod_l>
 8007166:	bf00      	nop
 8007168:	20000068 	.word	0x20000068

0800716c <__ssputs_r>:
 800716c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	688e      	ldr	r6, [r1, #8]
 8007172:	461f      	mov	r7, r3
 8007174:	42be      	cmp	r6, r7
 8007176:	680b      	ldr	r3, [r1, #0]
 8007178:	4682      	mov	sl, r0
 800717a:	460c      	mov	r4, r1
 800717c:	4690      	mov	r8, r2
 800717e:	d82c      	bhi.n	80071da <__ssputs_r+0x6e>
 8007180:	898a      	ldrh	r2, [r1, #12]
 8007182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007186:	d026      	beq.n	80071d6 <__ssputs_r+0x6a>
 8007188:	6965      	ldr	r5, [r4, #20]
 800718a:	6909      	ldr	r1, [r1, #16]
 800718c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007190:	eba3 0901 	sub.w	r9, r3, r1
 8007194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007198:	1c7b      	adds	r3, r7, #1
 800719a:	444b      	add	r3, r9
 800719c:	106d      	asrs	r5, r5, #1
 800719e:	429d      	cmp	r5, r3
 80071a0:	bf38      	it	cc
 80071a2:	461d      	movcc	r5, r3
 80071a4:	0553      	lsls	r3, r2, #21
 80071a6:	d527      	bpl.n	80071f8 <__ssputs_r+0x8c>
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7fe fc93 	bl	8005ad4 <_malloc_r>
 80071ae:	4606      	mov	r6, r0
 80071b0:	b360      	cbz	r0, 800720c <__ssputs_r+0xa0>
 80071b2:	6921      	ldr	r1, [r4, #16]
 80071b4:	464a      	mov	r2, r9
 80071b6:	f7fd fd88 	bl	8004cca <memcpy>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	6126      	str	r6, [r4, #16]
 80071c8:	6165      	str	r5, [r4, #20]
 80071ca:	444e      	add	r6, r9
 80071cc:	eba5 0509 	sub.w	r5, r5, r9
 80071d0:	6026      	str	r6, [r4, #0]
 80071d2:	60a5      	str	r5, [r4, #8]
 80071d4:	463e      	mov	r6, r7
 80071d6:	42be      	cmp	r6, r7
 80071d8:	d900      	bls.n	80071dc <__ssputs_r+0x70>
 80071da:	463e      	mov	r6, r7
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	4632      	mov	r2, r6
 80071e0:	4641      	mov	r1, r8
 80071e2:	f000 fd5c 	bl	8007c9e <memmove>
 80071e6:	68a3      	ldr	r3, [r4, #8]
 80071e8:	1b9b      	subs	r3, r3, r6
 80071ea:	60a3      	str	r3, [r4, #8]
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	4433      	add	r3, r6
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	2000      	movs	r0, #0
 80071f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f8:	462a      	mov	r2, r5
 80071fa:	f001 f932 	bl	8008462 <_realloc_r>
 80071fe:	4606      	mov	r6, r0
 8007200:	2800      	cmp	r0, #0
 8007202:	d1e0      	bne.n	80071c6 <__ssputs_r+0x5a>
 8007204:	6921      	ldr	r1, [r4, #16]
 8007206:	4650      	mov	r0, sl
 8007208:	f7fe fbf0 	bl	80059ec <_free_r>
 800720c:	230c      	movs	r3, #12
 800720e:	f8ca 3000 	str.w	r3, [sl]
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	f04f 30ff 	mov.w	r0, #4294967295
 800721e:	e7e9      	b.n	80071f4 <__ssputs_r+0x88>

08007220 <_svfiprintf_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	4698      	mov	r8, r3
 8007226:	898b      	ldrh	r3, [r1, #12]
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	b09d      	sub	sp, #116	; 0x74
 800722c:	4607      	mov	r7, r0
 800722e:	460d      	mov	r5, r1
 8007230:	4614      	mov	r4, r2
 8007232:	d50e      	bpl.n	8007252 <_svfiprintf_r+0x32>
 8007234:	690b      	ldr	r3, [r1, #16]
 8007236:	b963      	cbnz	r3, 8007252 <_svfiprintf_r+0x32>
 8007238:	2140      	movs	r1, #64	; 0x40
 800723a:	f7fe fc4b 	bl	8005ad4 <_malloc_r>
 800723e:	6028      	str	r0, [r5, #0]
 8007240:	6128      	str	r0, [r5, #16]
 8007242:	b920      	cbnz	r0, 800724e <_svfiprintf_r+0x2e>
 8007244:	230c      	movs	r3, #12
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	e0d0      	b.n	80073f0 <_svfiprintf_r+0x1d0>
 800724e:	2340      	movs	r3, #64	; 0x40
 8007250:	616b      	str	r3, [r5, #20]
 8007252:	2300      	movs	r3, #0
 8007254:	9309      	str	r3, [sp, #36]	; 0x24
 8007256:	2320      	movs	r3, #32
 8007258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800725c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007260:	2330      	movs	r3, #48	; 0x30
 8007262:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007408 <_svfiprintf_r+0x1e8>
 8007266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800726a:	f04f 0901 	mov.w	r9, #1
 800726e:	4623      	mov	r3, r4
 8007270:	469a      	mov	sl, r3
 8007272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007276:	b10a      	cbz	r2, 800727c <_svfiprintf_r+0x5c>
 8007278:	2a25      	cmp	r2, #37	; 0x25
 800727a:	d1f9      	bne.n	8007270 <_svfiprintf_r+0x50>
 800727c:	ebba 0b04 	subs.w	fp, sl, r4
 8007280:	d00b      	beq.n	800729a <_svfiprintf_r+0x7a>
 8007282:	465b      	mov	r3, fp
 8007284:	4622      	mov	r2, r4
 8007286:	4629      	mov	r1, r5
 8007288:	4638      	mov	r0, r7
 800728a:	f7ff ff6f 	bl	800716c <__ssputs_r>
 800728e:	3001      	adds	r0, #1
 8007290:	f000 80a9 	beq.w	80073e6 <_svfiprintf_r+0x1c6>
 8007294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007296:	445a      	add	r2, fp
 8007298:	9209      	str	r2, [sp, #36]	; 0x24
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80a1 	beq.w	80073e6 <_svfiprintf_r+0x1c6>
 80072a4:	2300      	movs	r3, #0
 80072a6:	f04f 32ff 	mov.w	r2, #4294967295
 80072aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ae:	f10a 0a01 	add.w	sl, sl, #1
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	9307      	str	r3, [sp, #28]
 80072b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ba:	931a      	str	r3, [sp, #104]	; 0x68
 80072bc:	4654      	mov	r4, sl
 80072be:	2205      	movs	r2, #5
 80072c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c4:	4850      	ldr	r0, [pc, #320]	; (8007408 <_svfiprintf_r+0x1e8>)
 80072c6:	f7f8 ff83 	bl	80001d0 <memchr>
 80072ca:	9a04      	ldr	r2, [sp, #16]
 80072cc:	b9d8      	cbnz	r0, 8007306 <_svfiprintf_r+0xe6>
 80072ce:	06d0      	lsls	r0, r2, #27
 80072d0:	bf44      	itt	mi
 80072d2:	2320      	movmi	r3, #32
 80072d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d8:	0711      	lsls	r1, r2, #28
 80072da:	bf44      	itt	mi
 80072dc:	232b      	movmi	r3, #43	; 0x2b
 80072de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e2:	f89a 3000 	ldrb.w	r3, [sl]
 80072e6:	2b2a      	cmp	r3, #42	; 0x2a
 80072e8:	d015      	beq.n	8007316 <_svfiprintf_r+0xf6>
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	4654      	mov	r4, sl
 80072ee:	2000      	movs	r0, #0
 80072f0:	f04f 0c0a 	mov.w	ip, #10
 80072f4:	4621      	mov	r1, r4
 80072f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fa:	3b30      	subs	r3, #48	; 0x30
 80072fc:	2b09      	cmp	r3, #9
 80072fe:	d94d      	bls.n	800739c <_svfiprintf_r+0x17c>
 8007300:	b1b0      	cbz	r0, 8007330 <_svfiprintf_r+0x110>
 8007302:	9207      	str	r2, [sp, #28]
 8007304:	e014      	b.n	8007330 <_svfiprintf_r+0x110>
 8007306:	eba0 0308 	sub.w	r3, r0, r8
 800730a:	fa09 f303 	lsl.w	r3, r9, r3
 800730e:	4313      	orrs	r3, r2
 8007310:	9304      	str	r3, [sp, #16]
 8007312:	46a2      	mov	sl, r4
 8007314:	e7d2      	b.n	80072bc <_svfiprintf_r+0x9c>
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	1d19      	adds	r1, r3, #4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	9103      	str	r1, [sp, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfbb      	ittet	lt
 8007322:	425b      	neglt	r3, r3
 8007324:	f042 0202 	orrlt.w	r2, r2, #2
 8007328:	9307      	strge	r3, [sp, #28]
 800732a:	9307      	strlt	r3, [sp, #28]
 800732c:	bfb8      	it	lt
 800732e:	9204      	strlt	r2, [sp, #16]
 8007330:	7823      	ldrb	r3, [r4, #0]
 8007332:	2b2e      	cmp	r3, #46	; 0x2e
 8007334:	d10c      	bne.n	8007350 <_svfiprintf_r+0x130>
 8007336:	7863      	ldrb	r3, [r4, #1]
 8007338:	2b2a      	cmp	r3, #42	; 0x2a
 800733a:	d134      	bne.n	80073a6 <_svfiprintf_r+0x186>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	1d1a      	adds	r2, r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	9203      	str	r2, [sp, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfb8      	it	lt
 8007348:	f04f 33ff 	movlt.w	r3, #4294967295
 800734c:	3402      	adds	r4, #2
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007418 <_svfiprintf_r+0x1f8>
 8007354:	7821      	ldrb	r1, [r4, #0]
 8007356:	2203      	movs	r2, #3
 8007358:	4650      	mov	r0, sl
 800735a:	f7f8 ff39 	bl	80001d0 <memchr>
 800735e:	b138      	cbz	r0, 8007370 <_svfiprintf_r+0x150>
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	eba0 000a 	sub.w	r0, r0, sl
 8007366:	2240      	movs	r2, #64	; 0x40
 8007368:	4082      	lsls	r2, r0
 800736a:	4313      	orrs	r3, r2
 800736c:	3401      	adds	r4, #1
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007374:	4825      	ldr	r0, [pc, #148]	; (800740c <_svfiprintf_r+0x1ec>)
 8007376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800737a:	2206      	movs	r2, #6
 800737c:	f7f8 ff28 	bl	80001d0 <memchr>
 8007380:	2800      	cmp	r0, #0
 8007382:	d038      	beq.n	80073f6 <_svfiprintf_r+0x1d6>
 8007384:	4b22      	ldr	r3, [pc, #136]	; (8007410 <_svfiprintf_r+0x1f0>)
 8007386:	bb1b      	cbnz	r3, 80073d0 <_svfiprintf_r+0x1b0>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	3307      	adds	r3, #7
 800738c:	f023 0307 	bic.w	r3, r3, #7
 8007390:	3308      	adds	r3, #8
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007396:	4433      	add	r3, r6
 8007398:	9309      	str	r3, [sp, #36]	; 0x24
 800739a:	e768      	b.n	800726e <_svfiprintf_r+0x4e>
 800739c:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a0:	460c      	mov	r4, r1
 80073a2:	2001      	movs	r0, #1
 80073a4:	e7a6      	b.n	80072f4 <_svfiprintf_r+0xd4>
 80073a6:	2300      	movs	r3, #0
 80073a8:	3401      	adds	r4, #1
 80073aa:	9305      	str	r3, [sp, #20]
 80073ac:	4619      	mov	r1, r3
 80073ae:	f04f 0c0a 	mov.w	ip, #10
 80073b2:	4620      	mov	r0, r4
 80073b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073b8:	3a30      	subs	r2, #48	; 0x30
 80073ba:	2a09      	cmp	r2, #9
 80073bc:	d903      	bls.n	80073c6 <_svfiprintf_r+0x1a6>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0c6      	beq.n	8007350 <_svfiprintf_r+0x130>
 80073c2:	9105      	str	r1, [sp, #20]
 80073c4:	e7c4      	b.n	8007350 <_svfiprintf_r+0x130>
 80073c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ca:	4604      	mov	r4, r0
 80073cc:	2301      	movs	r3, #1
 80073ce:	e7f0      	b.n	80073b2 <_svfiprintf_r+0x192>
 80073d0:	ab03      	add	r3, sp, #12
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	462a      	mov	r2, r5
 80073d6:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <_svfiprintf_r+0x1f4>)
 80073d8:	a904      	add	r1, sp, #16
 80073da:	4638      	mov	r0, r7
 80073dc:	f7fc fcba 	bl	8003d54 <_printf_float>
 80073e0:	1c42      	adds	r2, r0, #1
 80073e2:	4606      	mov	r6, r0
 80073e4:	d1d6      	bne.n	8007394 <_svfiprintf_r+0x174>
 80073e6:	89ab      	ldrh	r3, [r5, #12]
 80073e8:	065b      	lsls	r3, r3, #25
 80073ea:	f53f af2d 	bmi.w	8007248 <_svfiprintf_r+0x28>
 80073ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f0:	b01d      	add	sp, #116	; 0x74
 80073f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f6:	ab03      	add	r3, sp, #12
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	462a      	mov	r2, r5
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <_svfiprintf_r+0x1f4>)
 80073fe:	a904      	add	r1, sp, #16
 8007400:	4638      	mov	r0, r7
 8007402:	f7fc ff4b 	bl	800429c <_printf_i>
 8007406:	e7eb      	b.n	80073e0 <_svfiprintf_r+0x1c0>
 8007408:	08008f20 	.word	0x08008f20
 800740c:	08008f2a 	.word	0x08008f2a
 8007410:	08003d55 	.word	0x08003d55
 8007414:	0800716d 	.word	0x0800716d
 8007418:	08008f26 	.word	0x08008f26

0800741c <_sungetc_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	1c4b      	adds	r3, r1, #1
 8007420:	4614      	mov	r4, r2
 8007422:	d103      	bne.n	800742c <_sungetc_r+0x10>
 8007424:	f04f 35ff 	mov.w	r5, #4294967295
 8007428:	4628      	mov	r0, r5
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	8993      	ldrh	r3, [r2, #12]
 800742e:	f023 0320 	bic.w	r3, r3, #32
 8007432:	8193      	strh	r3, [r2, #12]
 8007434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007436:	6852      	ldr	r2, [r2, #4]
 8007438:	b2cd      	uxtb	r5, r1
 800743a:	b18b      	cbz	r3, 8007460 <_sungetc_r+0x44>
 800743c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800743e:	4293      	cmp	r3, r2
 8007440:	dd08      	ble.n	8007454 <_sungetc_r+0x38>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	1e5a      	subs	r2, r3, #1
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	f803 5c01 	strb.w	r5, [r3, #-1]
 800744c:	6863      	ldr	r3, [r4, #4]
 800744e:	3301      	adds	r3, #1
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	e7e9      	b.n	8007428 <_sungetc_r+0xc>
 8007454:	4621      	mov	r1, r4
 8007456:	f000 fbe8 	bl	8007c2a <__submore>
 800745a:	2800      	cmp	r0, #0
 800745c:	d0f1      	beq.n	8007442 <_sungetc_r+0x26>
 800745e:	e7e1      	b.n	8007424 <_sungetc_r+0x8>
 8007460:	6921      	ldr	r1, [r4, #16]
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	b151      	cbz	r1, 800747c <_sungetc_r+0x60>
 8007466:	4299      	cmp	r1, r3
 8007468:	d208      	bcs.n	800747c <_sungetc_r+0x60>
 800746a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800746e:	42a9      	cmp	r1, r5
 8007470:	d104      	bne.n	800747c <_sungetc_r+0x60>
 8007472:	3b01      	subs	r3, #1
 8007474:	3201      	adds	r2, #1
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	6062      	str	r2, [r4, #4]
 800747a:	e7d5      	b.n	8007428 <_sungetc_r+0xc>
 800747c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007484:	6363      	str	r3, [r4, #52]	; 0x34
 8007486:	2303      	movs	r3, #3
 8007488:	63a3      	str	r3, [r4, #56]	; 0x38
 800748a:	4623      	mov	r3, r4
 800748c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	2301      	movs	r3, #1
 8007494:	e7dc      	b.n	8007450 <_sungetc_r+0x34>

08007496 <__ssrefill_r>:
 8007496:	b510      	push	{r4, lr}
 8007498:	460c      	mov	r4, r1
 800749a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800749c:	b169      	cbz	r1, 80074ba <__ssrefill_r+0x24>
 800749e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a2:	4299      	cmp	r1, r3
 80074a4:	d001      	beq.n	80074aa <__ssrefill_r+0x14>
 80074a6:	f7fe faa1 	bl	80059ec <_free_r>
 80074aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ac:	6063      	str	r3, [r4, #4]
 80074ae:	2000      	movs	r0, #0
 80074b0:	6360      	str	r0, [r4, #52]	; 0x34
 80074b2:	b113      	cbz	r3, 80074ba <__ssrefill_r+0x24>
 80074b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	bd10      	pop	{r4, pc}
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	2300      	movs	r3, #0
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f043 0320 	orr.w	r3, r3, #32
 80074c8:	81a3      	strh	r3, [r4, #12]
 80074ca:	f04f 30ff 	mov.w	r0, #4294967295
 80074ce:	e7f3      	b.n	80074b8 <__ssrefill_r+0x22>

080074d0 <__ssvfiscanf_r>:
 80074d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d4:	460c      	mov	r4, r1
 80074d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80074da:	2100      	movs	r1, #0
 80074dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80074e0:	49a6      	ldr	r1, [pc, #664]	; (800777c <__ssvfiscanf_r+0x2ac>)
 80074e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80074e4:	f10d 0804 	add.w	r8, sp, #4
 80074e8:	49a5      	ldr	r1, [pc, #660]	; (8007780 <__ssvfiscanf_r+0x2b0>)
 80074ea:	4fa6      	ldr	r7, [pc, #664]	; (8007784 <__ssvfiscanf_r+0x2b4>)
 80074ec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007788 <__ssvfiscanf_r+0x2b8>
 80074f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80074f4:	4606      	mov	r6, r0
 80074f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	7813      	ldrb	r3, [r2, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 815a 	beq.w	80077b6 <__ssvfiscanf_r+0x2e6>
 8007502:	5cf9      	ldrb	r1, [r7, r3]
 8007504:	f011 0108 	ands.w	r1, r1, #8
 8007508:	f102 0501 	add.w	r5, r2, #1
 800750c:	d019      	beq.n	8007542 <__ssvfiscanf_r+0x72>
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	dd0f      	ble.n	8007534 <__ssvfiscanf_r+0x64>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	5cba      	ldrb	r2, [r7, r2]
 800751a:	0712      	lsls	r2, r2, #28
 800751c:	d401      	bmi.n	8007522 <__ssvfiscanf_r+0x52>
 800751e:	462a      	mov	r2, r5
 8007520:	e7eb      	b.n	80074fa <__ssvfiscanf_r+0x2a>
 8007522:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007524:	3201      	adds	r2, #1
 8007526:	9245      	str	r2, [sp, #276]	; 0x114
 8007528:	6862      	ldr	r2, [r4, #4]
 800752a:	3301      	adds	r3, #1
 800752c:	3a01      	subs	r2, #1
 800752e:	6062      	str	r2, [r4, #4]
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	e7ec      	b.n	800750e <__ssvfiscanf_r+0x3e>
 8007534:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007536:	4621      	mov	r1, r4
 8007538:	4630      	mov	r0, r6
 800753a:	4798      	blx	r3
 800753c:	2800      	cmp	r0, #0
 800753e:	d0e9      	beq.n	8007514 <__ssvfiscanf_r+0x44>
 8007540:	e7ed      	b.n	800751e <__ssvfiscanf_r+0x4e>
 8007542:	2b25      	cmp	r3, #37	; 0x25
 8007544:	d012      	beq.n	800756c <__ssvfiscanf_r+0x9c>
 8007546:	469a      	mov	sl, r3
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f340 8091 	ble.w	8007672 <__ssvfiscanf_r+0x1a2>
 8007550:	6822      	ldr	r2, [r4, #0]
 8007552:	7813      	ldrb	r3, [r2, #0]
 8007554:	4553      	cmp	r3, sl
 8007556:	f040 812e 	bne.w	80077b6 <__ssvfiscanf_r+0x2e6>
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	3b01      	subs	r3, #1
 800755e:	6063      	str	r3, [r4, #4]
 8007560:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007562:	3201      	adds	r2, #1
 8007564:	3301      	adds	r3, #1
 8007566:	6022      	str	r2, [r4, #0]
 8007568:	9345      	str	r3, [sp, #276]	; 0x114
 800756a:	e7d8      	b.n	800751e <__ssvfiscanf_r+0x4e>
 800756c:	9141      	str	r1, [sp, #260]	; 0x104
 800756e:	9143      	str	r1, [sp, #268]	; 0x10c
 8007570:	7853      	ldrb	r3, [r2, #1]
 8007572:	2b2a      	cmp	r3, #42	; 0x2a
 8007574:	bf02      	ittt	eq
 8007576:	2310      	moveq	r3, #16
 8007578:	1c95      	addeq	r5, r2, #2
 800757a:	9341      	streq	r3, [sp, #260]	; 0x104
 800757c:	220a      	movs	r2, #10
 800757e:	46aa      	mov	sl, r5
 8007580:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007584:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007588:	2b09      	cmp	r3, #9
 800758a:	d91c      	bls.n	80075c6 <__ssvfiscanf_r+0xf6>
 800758c:	487e      	ldr	r0, [pc, #504]	; (8007788 <__ssvfiscanf_r+0x2b8>)
 800758e:	2203      	movs	r2, #3
 8007590:	f7f8 fe1e 	bl	80001d0 <memchr>
 8007594:	b138      	cbz	r0, 80075a6 <__ssvfiscanf_r+0xd6>
 8007596:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007598:	eba0 0009 	sub.w	r0, r0, r9
 800759c:	2301      	movs	r3, #1
 800759e:	4083      	lsls	r3, r0
 80075a0:	4313      	orrs	r3, r2
 80075a2:	9341      	str	r3, [sp, #260]	; 0x104
 80075a4:	4655      	mov	r5, sl
 80075a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075aa:	2b78      	cmp	r3, #120	; 0x78
 80075ac:	d806      	bhi.n	80075bc <__ssvfiscanf_r+0xec>
 80075ae:	2b57      	cmp	r3, #87	; 0x57
 80075b0:	d810      	bhi.n	80075d4 <__ssvfiscanf_r+0x104>
 80075b2:	2b25      	cmp	r3, #37	; 0x25
 80075b4:	d0c7      	beq.n	8007546 <__ssvfiscanf_r+0x76>
 80075b6:	d857      	bhi.n	8007668 <__ssvfiscanf_r+0x198>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d065      	beq.n	8007688 <__ssvfiscanf_r+0x1b8>
 80075bc:	2303      	movs	r3, #3
 80075be:	9347      	str	r3, [sp, #284]	; 0x11c
 80075c0:	230a      	movs	r3, #10
 80075c2:	9342      	str	r3, [sp, #264]	; 0x108
 80075c4:	e076      	b.n	80076b4 <__ssvfiscanf_r+0x1e4>
 80075c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80075c8:	fb02 1103 	mla	r1, r2, r3, r1
 80075cc:	3930      	subs	r1, #48	; 0x30
 80075ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80075d0:	4655      	mov	r5, sl
 80075d2:	e7d4      	b.n	800757e <__ssvfiscanf_r+0xae>
 80075d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80075d8:	2a20      	cmp	r2, #32
 80075da:	d8ef      	bhi.n	80075bc <__ssvfiscanf_r+0xec>
 80075dc:	a101      	add	r1, pc, #4	; (adr r1, 80075e4 <__ssvfiscanf_r+0x114>)
 80075de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	08007697 	.word	0x08007697
 80075e8:	080075bd 	.word	0x080075bd
 80075ec:	080075bd 	.word	0x080075bd
 80075f0:	080076f5 	.word	0x080076f5
 80075f4:	080075bd 	.word	0x080075bd
 80075f8:	080075bd 	.word	0x080075bd
 80075fc:	080075bd 	.word	0x080075bd
 8007600:	080075bd 	.word	0x080075bd
 8007604:	080075bd 	.word	0x080075bd
 8007608:	080075bd 	.word	0x080075bd
 800760c:	080075bd 	.word	0x080075bd
 8007610:	0800770b 	.word	0x0800770b
 8007614:	080076f1 	.word	0x080076f1
 8007618:	0800766f 	.word	0x0800766f
 800761c:	0800766f 	.word	0x0800766f
 8007620:	0800766f 	.word	0x0800766f
 8007624:	080075bd 	.word	0x080075bd
 8007628:	080076ad 	.word	0x080076ad
 800762c:	080075bd 	.word	0x080075bd
 8007630:	080075bd 	.word	0x080075bd
 8007634:	080075bd 	.word	0x080075bd
 8007638:	080075bd 	.word	0x080075bd
 800763c:	0800771b 	.word	0x0800771b
 8007640:	080076e9 	.word	0x080076e9
 8007644:	0800768f 	.word	0x0800768f
 8007648:	080075bd 	.word	0x080075bd
 800764c:	080075bd 	.word	0x080075bd
 8007650:	08007717 	.word	0x08007717
 8007654:	080075bd 	.word	0x080075bd
 8007658:	080076f1 	.word	0x080076f1
 800765c:	080075bd 	.word	0x080075bd
 8007660:	080075bd 	.word	0x080075bd
 8007664:	08007697 	.word	0x08007697
 8007668:	3b45      	subs	r3, #69	; 0x45
 800766a:	2b02      	cmp	r3, #2
 800766c:	d8a6      	bhi.n	80075bc <__ssvfiscanf_r+0xec>
 800766e:	2305      	movs	r3, #5
 8007670:	e01f      	b.n	80076b2 <__ssvfiscanf_r+0x1e2>
 8007672:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007674:	4621      	mov	r1, r4
 8007676:	4630      	mov	r0, r6
 8007678:	4798      	blx	r3
 800767a:	2800      	cmp	r0, #0
 800767c:	f43f af68 	beq.w	8007550 <__ssvfiscanf_r+0x80>
 8007680:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007682:	2800      	cmp	r0, #0
 8007684:	f040 808d 	bne.w	80077a2 <__ssvfiscanf_r+0x2d2>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	e08f      	b.n	80077ae <__ssvfiscanf_r+0x2de>
 800768e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007690:	f042 0220 	orr.w	r2, r2, #32
 8007694:	9241      	str	r2, [sp, #260]	; 0x104
 8007696:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769c:	9241      	str	r2, [sp, #260]	; 0x104
 800769e:	2210      	movs	r2, #16
 80076a0:	2b6f      	cmp	r3, #111	; 0x6f
 80076a2:	9242      	str	r2, [sp, #264]	; 0x108
 80076a4:	bf34      	ite	cc
 80076a6:	2303      	movcc	r3, #3
 80076a8:	2304      	movcs	r3, #4
 80076aa:	e002      	b.n	80076b2 <__ssvfiscanf_r+0x1e2>
 80076ac:	2300      	movs	r3, #0
 80076ae:	9342      	str	r3, [sp, #264]	; 0x108
 80076b0:	2303      	movs	r3, #3
 80076b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dd3d      	ble.n	8007736 <__ssvfiscanf_r+0x266>
 80076ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076bc:	0659      	lsls	r1, r3, #25
 80076be:	d404      	bmi.n	80076ca <__ssvfiscanf_r+0x1fa>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	5cba      	ldrb	r2, [r7, r2]
 80076c6:	0712      	lsls	r2, r2, #28
 80076c8:	d43c      	bmi.n	8007744 <__ssvfiscanf_r+0x274>
 80076ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	dc4b      	bgt.n	8007768 <__ssvfiscanf_r+0x298>
 80076d0:	466b      	mov	r3, sp
 80076d2:	4622      	mov	r2, r4
 80076d4:	a941      	add	r1, sp, #260	; 0x104
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f872 	bl	80077c0 <_scanf_chars>
 80076dc:	2801      	cmp	r0, #1
 80076de:	d06a      	beq.n	80077b6 <__ssvfiscanf_r+0x2e6>
 80076e0:	2802      	cmp	r0, #2
 80076e2:	f47f af1c 	bne.w	800751e <__ssvfiscanf_r+0x4e>
 80076e6:	e7cb      	b.n	8007680 <__ssvfiscanf_r+0x1b0>
 80076e8:	2308      	movs	r3, #8
 80076ea:	9342      	str	r3, [sp, #264]	; 0x108
 80076ec:	2304      	movs	r3, #4
 80076ee:	e7e0      	b.n	80076b2 <__ssvfiscanf_r+0x1e2>
 80076f0:	220a      	movs	r2, #10
 80076f2:	e7d5      	b.n	80076a0 <__ssvfiscanf_r+0x1d0>
 80076f4:	4629      	mov	r1, r5
 80076f6:	4640      	mov	r0, r8
 80076f8:	f000 fa5e 	bl	8007bb8 <__sccl>
 80076fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007702:	9341      	str	r3, [sp, #260]	; 0x104
 8007704:	4605      	mov	r5, r0
 8007706:	2301      	movs	r3, #1
 8007708:	e7d3      	b.n	80076b2 <__ssvfiscanf_r+0x1e2>
 800770a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800770c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007710:	9341      	str	r3, [sp, #260]	; 0x104
 8007712:	2300      	movs	r3, #0
 8007714:	e7cd      	b.n	80076b2 <__ssvfiscanf_r+0x1e2>
 8007716:	2302      	movs	r3, #2
 8007718:	e7cb      	b.n	80076b2 <__ssvfiscanf_r+0x1e2>
 800771a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800771c:	06c3      	lsls	r3, r0, #27
 800771e:	f53f aefe 	bmi.w	800751e <__ssvfiscanf_r+0x4e>
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007726:	1d19      	adds	r1, r3, #4
 8007728:	9100      	str	r1, [sp, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	07c0      	lsls	r0, r0, #31
 800772e:	bf4c      	ite	mi
 8007730:	801a      	strhmi	r2, [r3, #0]
 8007732:	601a      	strpl	r2, [r3, #0]
 8007734:	e6f3      	b.n	800751e <__ssvfiscanf_r+0x4e>
 8007736:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007738:	4621      	mov	r1, r4
 800773a:	4630      	mov	r0, r6
 800773c:	4798      	blx	r3
 800773e:	2800      	cmp	r0, #0
 8007740:	d0bb      	beq.n	80076ba <__ssvfiscanf_r+0x1ea>
 8007742:	e79d      	b.n	8007680 <__ssvfiscanf_r+0x1b0>
 8007744:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007746:	3201      	adds	r2, #1
 8007748:	9245      	str	r2, [sp, #276]	; 0x114
 800774a:	6862      	ldr	r2, [r4, #4]
 800774c:	3a01      	subs	r2, #1
 800774e:	2a00      	cmp	r2, #0
 8007750:	6062      	str	r2, [r4, #4]
 8007752:	dd02      	ble.n	800775a <__ssvfiscanf_r+0x28a>
 8007754:	3301      	adds	r3, #1
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	e7b2      	b.n	80076c0 <__ssvfiscanf_r+0x1f0>
 800775a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800775c:	4621      	mov	r1, r4
 800775e:	4630      	mov	r0, r6
 8007760:	4798      	blx	r3
 8007762:	2800      	cmp	r0, #0
 8007764:	d0ac      	beq.n	80076c0 <__ssvfiscanf_r+0x1f0>
 8007766:	e78b      	b.n	8007680 <__ssvfiscanf_r+0x1b0>
 8007768:	2b04      	cmp	r3, #4
 800776a:	dc0f      	bgt.n	800778c <__ssvfiscanf_r+0x2bc>
 800776c:	466b      	mov	r3, sp
 800776e:	4622      	mov	r2, r4
 8007770:	a941      	add	r1, sp, #260	; 0x104
 8007772:	4630      	mov	r0, r6
 8007774:	f000 f87e 	bl	8007874 <_scanf_i>
 8007778:	e7b0      	b.n	80076dc <__ssvfiscanf_r+0x20c>
 800777a:	bf00      	nop
 800777c:	0800741d 	.word	0x0800741d
 8007780:	08007497 	.word	0x08007497
 8007784:	08008bad 	.word	0x08008bad
 8007788:	08008f26 	.word	0x08008f26
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <__ssvfiscanf_r+0x2ec>)
 800778e:	2b00      	cmp	r3, #0
 8007790:	f43f aec5 	beq.w	800751e <__ssvfiscanf_r+0x4e>
 8007794:	466b      	mov	r3, sp
 8007796:	4622      	mov	r2, r4
 8007798:	a941      	add	r1, sp, #260	; 0x104
 800779a:	4630      	mov	r0, r6
 800779c:	f7fc fea0 	bl	80044e0 <_scanf_float>
 80077a0:	e79c      	b.n	80076dc <__ssvfiscanf_r+0x20c>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077a8:	bf18      	it	ne
 80077aa:	f04f 30ff 	movne.w	r0, #4294967295
 80077ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80077b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80077b8:	e7f9      	b.n	80077ae <__ssvfiscanf_r+0x2de>
 80077ba:	bf00      	nop
 80077bc:	080044e1 	.word	0x080044e1

080077c0 <_scanf_chars>:
 80077c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c4:	4615      	mov	r5, r2
 80077c6:	688a      	ldr	r2, [r1, #8]
 80077c8:	4680      	mov	r8, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	b932      	cbnz	r2, 80077dc <_scanf_chars+0x1c>
 80077ce:	698a      	ldr	r2, [r1, #24]
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	bf0c      	ite	eq
 80077d4:	2201      	moveq	r2, #1
 80077d6:	f04f 32ff 	movne.w	r2, #4294967295
 80077da:	608a      	str	r2, [r1, #8]
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007870 <_scanf_chars+0xb0>
 80077e2:	06d1      	lsls	r1, r2, #27
 80077e4:	bf5f      	itttt	pl
 80077e6:	681a      	ldrpl	r2, [r3, #0]
 80077e8:	1d11      	addpl	r1, r2, #4
 80077ea:	6019      	strpl	r1, [r3, #0]
 80077ec:	6816      	ldrpl	r6, [r2, #0]
 80077ee:	2700      	movs	r7, #0
 80077f0:	69a0      	ldr	r0, [r4, #24]
 80077f2:	b188      	cbz	r0, 8007818 <_scanf_chars+0x58>
 80077f4:	2801      	cmp	r0, #1
 80077f6:	d107      	bne.n	8007808 <_scanf_chars+0x48>
 80077f8:	682a      	ldr	r2, [r5, #0]
 80077fa:	7811      	ldrb	r1, [r2, #0]
 80077fc:	6962      	ldr	r2, [r4, #20]
 80077fe:	5c52      	ldrb	r2, [r2, r1]
 8007800:	b952      	cbnz	r2, 8007818 <_scanf_chars+0x58>
 8007802:	2f00      	cmp	r7, #0
 8007804:	d031      	beq.n	800786a <_scanf_chars+0xaa>
 8007806:	e022      	b.n	800784e <_scanf_chars+0x8e>
 8007808:	2802      	cmp	r0, #2
 800780a:	d120      	bne.n	800784e <_scanf_chars+0x8e>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007814:	071b      	lsls	r3, r3, #28
 8007816:	d41a      	bmi.n	800784e <_scanf_chars+0x8e>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	06da      	lsls	r2, r3, #27
 800781c:	bf5e      	ittt	pl
 800781e:	682b      	ldrpl	r3, [r5, #0]
 8007820:	781b      	ldrbpl	r3, [r3, #0]
 8007822:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007826:	682a      	ldr	r2, [r5, #0]
 8007828:	686b      	ldr	r3, [r5, #4]
 800782a:	3201      	adds	r2, #1
 800782c:	602a      	str	r2, [r5, #0]
 800782e:	68a2      	ldr	r2, [r4, #8]
 8007830:	3b01      	subs	r3, #1
 8007832:	3a01      	subs	r2, #1
 8007834:	606b      	str	r3, [r5, #4]
 8007836:	3701      	adds	r7, #1
 8007838:	60a2      	str	r2, [r4, #8]
 800783a:	b142      	cbz	r2, 800784e <_scanf_chars+0x8e>
 800783c:	2b00      	cmp	r3, #0
 800783e:	dcd7      	bgt.n	80077f0 <_scanf_chars+0x30>
 8007840:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007844:	4629      	mov	r1, r5
 8007846:	4640      	mov	r0, r8
 8007848:	4798      	blx	r3
 800784a:	2800      	cmp	r0, #0
 800784c:	d0d0      	beq.n	80077f0 <_scanf_chars+0x30>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	f013 0310 	ands.w	r3, r3, #16
 8007854:	d105      	bne.n	8007862 <_scanf_chars+0xa2>
 8007856:	68e2      	ldr	r2, [r4, #12]
 8007858:	3201      	adds	r2, #1
 800785a:	60e2      	str	r2, [r4, #12]
 800785c:	69a2      	ldr	r2, [r4, #24]
 800785e:	b102      	cbz	r2, 8007862 <_scanf_chars+0xa2>
 8007860:	7033      	strb	r3, [r6, #0]
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	443b      	add	r3, r7
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	2000      	movs	r0, #0
 800786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786e:	bf00      	nop
 8007870:	08008bad 	.word	0x08008bad

08007874 <_scanf_i>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	4698      	mov	r8, r3
 800787a:	4b74      	ldr	r3, [pc, #464]	; (8007a4c <_scanf_i+0x1d8>)
 800787c:	460c      	mov	r4, r1
 800787e:	4682      	mov	sl, r0
 8007880:	4616      	mov	r6, r2
 8007882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007886:	b087      	sub	sp, #28
 8007888:	ab03      	add	r3, sp, #12
 800788a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800788e:	4b70      	ldr	r3, [pc, #448]	; (8007a50 <_scanf_i+0x1dc>)
 8007890:	69a1      	ldr	r1, [r4, #24]
 8007892:	4a70      	ldr	r2, [pc, #448]	; (8007a54 <_scanf_i+0x1e0>)
 8007894:	2903      	cmp	r1, #3
 8007896:	bf18      	it	ne
 8007898:	461a      	movne	r2, r3
 800789a:	68a3      	ldr	r3, [r4, #8]
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	1e5a      	subs	r2, r3, #1
 80078a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80078a4:	bf88      	it	hi
 80078a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80078aa:	4627      	mov	r7, r4
 80078ac:	bf82      	ittt	hi
 80078ae:	eb03 0905 	addhi.w	r9, r3, r5
 80078b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80078b6:	60a3      	strhi	r3, [r4, #8]
 80078b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80078bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80078c0:	bf98      	it	ls
 80078c2:	f04f 0900 	movls.w	r9, #0
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	463d      	mov	r5, r7
 80078ca:	f04f 0b00 	mov.w	fp, #0
 80078ce:	6831      	ldr	r1, [r6, #0]
 80078d0:	ab03      	add	r3, sp, #12
 80078d2:	7809      	ldrb	r1, [r1, #0]
 80078d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80078d8:	2202      	movs	r2, #2
 80078da:	f7f8 fc79 	bl	80001d0 <memchr>
 80078de:	b328      	cbz	r0, 800792c <_scanf_i+0xb8>
 80078e0:	f1bb 0f01 	cmp.w	fp, #1
 80078e4:	d159      	bne.n	800799a <_scanf_i+0x126>
 80078e6:	6862      	ldr	r2, [r4, #4]
 80078e8:	b92a      	cbnz	r2, 80078f6 <_scanf_i+0x82>
 80078ea:	6822      	ldr	r2, [r4, #0]
 80078ec:	2308      	movs	r3, #8
 80078ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f2:	6063      	str	r3, [r4, #4]
 80078f4:	6022      	str	r2, [r4, #0]
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80078fc:	6022      	str	r2, [r4, #0]
 80078fe:	68a2      	ldr	r2, [r4, #8]
 8007900:	1e51      	subs	r1, r2, #1
 8007902:	60a1      	str	r1, [r4, #8]
 8007904:	b192      	cbz	r2, 800792c <_scanf_i+0xb8>
 8007906:	6832      	ldr	r2, [r6, #0]
 8007908:	1c51      	adds	r1, r2, #1
 800790a:	6031      	str	r1, [r6, #0]
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	f805 2b01 	strb.w	r2, [r5], #1
 8007912:	6872      	ldr	r2, [r6, #4]
 8007914:	3a01      	subs	r2, #1
 8007916:	2a00      	cmp	r2, #0
 8007918:	6072      	str	r2, [r6, #4]
 800791a:	dc07      	bgt.n	800792c <_scanf_i+0xb8>
 800791c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007920:	4631      	mov	r1, r6
 8007922:	4650      	mov	r0, sl
 8007924:	4790      	blx	r2
 8007926:	2800      	cmp	r0, #0
 8007928:	f040 8085 	bne.w	8007a36 <_scanf_i+0x1c2>
 800792c:	f10b 0b01 	add.w	fp, fp, #1
 8007930:	f1bb 0f03 	cmp.w	fp, #3
 8007934:	d1cb      	bne.n	80078ce <_scanf_i+0x5a>
 8007936:	6863      	ldr	r3, [r4, #4]
 8007938:	b90b      	cbnz	r3, 800793e <_scanf_i+0xca>
 800793a:	230a      	movs	r3, #10
 800793c:	6063      	str	r3, [r4, #4]
 800793e:	6863      	ldr	r3, [r4, #4]
 8007940:	4945      	ldr	r1, [pc, #276]	; (8007a58 <_scanf_i+0x1e4>)
 8007942:	6960      	ldr	r0, [r4, #20]
 8007944:	1ac9      	subs	r1, r1, r3
 8007946:	f000 f937 	bl	8007bb8 <__sccl>
 800794a:	f04f 0b00 	mov.w	fp, #0
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	6822      	ldr	r2, [r4, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d03d      	beq.n	80079d2 <_scanf_i+0x15e>
 8007956:	6831      	ldr	r1, [r6, #0]
 8007958:	6960      	ldr	r0, [r4, #20]
 800795a:	f891 c000 	ldrb.w	ip, [r1]
 800795e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007962:	2800      	cmp	r0, #0
 8007964:	d035      	beq.n	80079d2 <_scanf_i+0x15e>
 8007966:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800796a:	d124      	bne.n	80079b6 <_scanf_i+0x142>
 800796c:	0510      	lsls	r0, r2, #20
 800796e:	d522      	bpl.n	80079b6 <_scanf_i+0x142>
 8007970:	f10b 0b01 	add.w	fp, fp, #1
 8007974:	f1b9 0f00 	cmp.w	r9, #0
 8007978:	d003      	beq.n	8007982 <_scanf_i+0x10e>
 800797a:	3301      	adds	r3, #1
 800797c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	6873      	ldr	r3, [r6, #4]
 8007984:	3b01      	subs	r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	6073      	str	r3, [r6, #4]
 800798a:	dd1b      	ble.n	80079c4 <_scanf_i+0x150>
 800798c:	6833      	ldr	r3, [r6, #0]
 800798e:	3301      	adds	r3, #1
 8007990:	6033      	str	r3, [r6, #0]
 8007992:	68a3      	ldr	r3, [r4, #8]
 8007994:	3b01      	subs	r3, #1
 8007996:	60a3      	str	r3, [r4, #8]
 8007998:	e7d9      	b.n	800794e <_scanf_i+0xda>
 800799a:	f1bb 0f02 	cmp.w	fp, #2
 800799e:	d1ae      	bne.n	80078fe <_scanf_i+0x8a>
 80079a0:	6822      	ldr	r2, [r4, #0]
 80079a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80079a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80079aa:	d1bf      	bne.n	800792c <_scanf_i+0xb8>
 80079ac:	2310      	movs	r3, #16
 80079ae:	6063      	str	r3, [r4, #4]
 80079b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079b4:	e7a2      	b.n	80078fc <_scanf_i+0x88>
 80079b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80079ba:	6022      	str	r2, [r4, #0]
 80079bc:	780b      	ldrb	r3, [r1, #0]
 80079be:	f805 3b01 	strb.w	r3, [r5], #1
 80079c2:	e7de      	b.n	8007982 <_scanf_i+0x10e>
 80079c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079c8:	4631      	mov	r1, r6
 80079ca:	4650      	mov	r0, sl
 80079cc:	4798      	blx	r3
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d0df      	beq.n	8007992 <_scanf_i+0x11e>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	05d9      	lsls	r1, r3, #23
 80079d6:	d50d      	bpl.n	80079f4 <_scanf_i+0x180>
 80079d8:	42bd      	cmp	r5, r7
 80079da:	d909      	bls.n	80079f0 <_scanf_i+0x17c>
 80079dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80079e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079e4:	4632      	mov	r2, r6
 80079e6:	4650      	mov	r0, sl
 80079e8:	4798      	blx	r3
 80079ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80079ee:	464d      	mov	r5, r9
 80079f0:	42bd      	cmp	r5, r7
 80079f2:	d028      	beq.n	8007a46 <_scanf_i+0x1d2>
 80079f4:	6822      	ldr	r2, [r4, #0]
 80079f6:	f012 0210 	ands.w	r2, r2, #16
 80079fa:	d113      	bne.n	8007a24 <_scanf_i+0x1b0>
 80079fc:	702a      	strb	r2, [r5, #0]
 80079fe:	6863      	ldr	r3, [r4, #4]
 8007a00:	9e01      	ldr	r6, [sp, #4]
 8007a02:	4639      	mov	r1, r7
 8007a04:	4650      	mov	r0, sl
 8007a06:	47b0      	blx	r6
 8007a08:	f8d8 3000 	ldr.w	r3, [r8]
 8007a0c:	6821      	ldr	r1, [r4, #0]
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	f8c8 2000 	str.w	r2, [r8]
 8007a14:	f011 0f20 	tst.w	r1, #32
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	d00f      	beq.n	8007a3c <_scanf_i+0x1c8>
 8007a1c:	6018      	str	r0, [r3, #0]
 8007a1e:	68e3      	ldr	r3, [r4, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60e3      	str	r3, [r4, #12]
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	1bed      	subs	r5, r5, r7
 8007a28:	445d      	add	r5, fp
 8007a2a:	442b      	add	r3, r5
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	2000      	movs	r0, #0
 8007a30:	b007      	add	sp, #28
 8007a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a36:	f04f 0b00 	mov.w	fp, #0
 8007a3a:	e7ca      	b.n	80079d2 <_scanf_i+0x15e>
 8007a3c:	07ca      	lsls	r2, r1, #31
 8007a3e:	bf4c      	ite	mi
 8007a40:	8018      	strhmi	r0, [r3, #0]
 8007a42:	6018      	strpl	r0, [r3, #0]
 8007a44:	e7eb      	b.n	8007a1e <_scanf_i+0x1aa>
 8007a46:	2001      	movs	r0, #1
 8007a48:	e7f2      	b.n	8007a30 <_scanf_i+0x1bc>
 8007a4a:	bf00      	nop
 8007a4c:	08008b68 	.word	0x08008b68
 8007a50:	080085a5 	.word	0x080085a5
 8007a54:	08003bfd 	.word	0x08003bfd
 8007a58:	08008f41 	.word	0x08008f41

08007a5c <__sflush_r>:
 8007a5c:	898a      	ldrh	r2, [r1, #12]
 8007a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	4605      	mov	r5, r0
 8007a64:	0710      	lsls	r0, r2, #28
 8007a66:	460c      	mov	r4, r1
 8007a68:	d458      	bmi.n	8007b1c <__sflush_r+0xc0>
 8007a6a:	684b      	ldr	r3, [r1, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dc05      	bgt.n	8007a7c <__sflush_r+0x20>
 8007a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dc02      	bgt.n	8007a7c <__sflush_r+0x20>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	d0f9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a88:	682f      	ldr	r7, [r5, #0]
 8007a8a:	6a21      	ldr	r1, [r4, #32]
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	d032      	beq.n	8007af6 <__sflush_r+0x9a>
 8007a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	075a      	lsls	r2, r3, #29
 8007a96:	d505      	bpl.n	8007aa4 <__sflush_r+0x48>
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	1ac0      	subs	r0, r0, r3
 8007a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a9e:	b10b      	cbz	r3, 8007aa4 <__sflush_r+0x48>
 8007aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aa2:	1ac0      	subs	r0, r0, r3
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aaa:	6a21      	ldr	r1, [r4, #32]
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b0      	blx	r6
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	d106      	bne.n	8007ac4 <__sflush_r+0x68>
 8007ab6:	6829      	ldr	r1, [r5, #0]
 8007ab8:	291d      	cmp	r1, #29
 8007aba:	d82b      	bhi.n	8007b14 <__sflush_r+0xb8>
 8007abc:	4a29      	ldr	r2, [pc, #164]	; (8007b64 <__sflush_r+0x108>)
 8007abe:	410a      	asrs	r2, r1
 8007ac0:	07d6      	lsls	r6, r2, #31
 8007ac2:	d427      	bmi.n	8007b14 <__sflush_r+0xb8>
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	6062      	str	r2, [r4, #4]
 8007ac8:	04d9      	lsls	r1, r3, #19
 8007aca:	6922      	ldr	r2, [r4, #16]
 8007acc:	6022      	str	r2, [r4, #0]
 8007ace:	d504      	bpl.n	8007ada <__sflush_r+0x7e>
 8007ad0:	1c42      	adds	r2, r0, #1
 8007ad2:	d101      	bne.n	8007ad8 <__sflush_r+0x7c>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b903      	cbnz	r3, 8007ada <__sflush_r+0x7e>
 8007ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8007ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007adc:	602f      	str	r7, [r5, #0]
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d0c9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	d002      	beq.n	8007af0 <__sflush_r+0x94>
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7fd ff7e 	bl	80059ec <_free_r>
 8007af0:	2000      	movs	r0, #0
 8007af2:	6360      	str	r0, [r4, #52]	; 0x34
 8007af4:	e7c0      	b.n	8007a78 <__sflush_r+0x1c>
 8007af6:	2301      	movs	r3, #1
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b0      	blx	r6
 8007afc:	1c41      	adds	r1, r0, #1
 8007afe:	d1c8      	bne.n	8007a92 <__sflush_r+0x36>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0c5      	beq.n	8007a92 <__sflush_r+0x36>
 8007b06:	2b1d      	cmp	r3, #29
 8007b08:	d001      	beq.n	8007b0e <__sflush_r+0xb2>
 8007b0a:	2b16      	cmp	r3, #22
 8007b0c:	d101      	bne.n	8007b12 <__sflush_r+0xb6>
 8007b0e:	602f      	str	r7, [r5, #0]
 8007b10:	e7b1      	b.n	8007a76 <__sflush_r+0x1a>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	e7ad      	b.n	8007a78 <__sflush_r+0x1c>
 8007b1c:	690f      	ldr	r7, [r1, #16]
 8007b1e:	2f00      	cmp	r7, #0
 8007b20:	d0a9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007b22:	0793      	lsls	r3, r2, #30
 8007b24:	680e      	ldr	r6, [r1, #0]
 8007b26:	bf08      	it	eq
 8007b28:	694b      	ldreq	r3, [r1, #20]
 8007b2a:	600f      	str	r7, [r1, #0]
 8007b2c:	bf18      	it	ne
 8007b2e:	2300      	movne	r3, #0
 8007b30:	eba6 0807 	sub.w	r8, r6, r7
 8007b34:	608b      	str	r3, [r1, #8]
 8007b36:	f1b8 0f00 	cmp.w	r8, #0
 8007b3a:	dd9c      	ble.n	8007a76 <__sflush_r+0x1a>
 8007b3c:	6a21      	ldr	r1, [r4, #32]
 8007b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b40:	4643      	mov	r3, r8
 8007b42:	463a      	mov	r2, r7
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b0      	blx	r6
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	dc06      	bgt.n	8007b5a <__sflush_r+0xfe>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	e78e      	b.n	8007a78 <__sflush_r+0x1c>
 8007b5a:	4407      	add	r7, r0
 8007b5c:	eba8 0800 	sub.w	r8, r8, r0
 8007b60:	e7e9      	b.n	8007b36 <__sflush_r+0xda>
 8007b62:	bf00      	nop
 8007b64:	dfbffffe 	.word	0xdfbffffe

08007b68 <_fflush_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	690b      	ldr	r3, [r1, #16]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	b913      	cbnz	r3, 8007b78 <_fflush_r+0x10>
 8007b72:	2500      	movs	r5, #0
 8007b74:	4628      	mov	r0, r5
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	b118      	cbz	r0, 8007b82 <_fflush_r+0x1a>
 8007b7a:	6a03      	ldr	r3, [r0, #32]
 8007b7c:	b90b      	cbnz	r3, 8007b82 <_fflush_r+0x1a>
 8007b7e:	f7fc ff4b 	bl	8004a18 <__sinit>
 8007b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0f3      	beq.n	8007b72 <_fflush_r+0xa>
 8007b8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b8c:	07d0      	lsls	r0, r2, #31
 8007b8e:	d404      	bmi.n	8007b9a <_fflush_r+0x32>
 8007b90:	0599      	lsls	r1, r3, #22
 8007b92:	d402      	bmi.n	8007b9a <_fflush_r+0x32>
 8007b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b96:	f7fd f896 	bl	8004cc6 <__retarget_lock_acquire_recursive>
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f7ff ff5d 	bl	8007a5c <__sflush_r>
 8007ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ba4:	07da      	lsls	r2, r3, #31
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	d4e4      	bmi.n	8007b74 <_fflush_r+0xc>
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	059b      	lsls	r3, r3, #22
 8007bae:	d4e1      	bmi.n	8007b74 <_fflush_r+0xc>
 8007bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bb2:	f7fd f889 	bl	8004cc8 <__retarget_lock_release_recursive>
 8007bb6:	e7dd      	b.n	8007b74 <_fflush_r+0xc>

08007bb8 <__sccl>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	780b      	ldrb	r3, [r1, #0]
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	2b5e      	cmp	r3, #94	; 0x5e
 8007bc0:	bf0b      	itete	eq
 8007bc2:	784b      	ldrbeq	r3, [r1, #1]
 8007bc4:	1c4a      	addne	r2, r1, #1
 8007bc6:	1c8a      	addeq	r2, r1, #2
 8007bc8:	2100      	movne	r1, #0
 8007bca:	bf08      	it	eq
 8007bcc:	2101      	moveq	r1, #1
 8007bce:	3801      	subs	r0, #1
 8007bd0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007bd4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007bd8:	42a8      	cmp	r0, r5
 8007bda:	d1fb      	bne.n	8007bd4 <__sccl+0x1c>
 8007bdc:	b90b      	cbnz	r3, 8007be2 <__sccl+0x2a>
 8007bde:	1e50      	subs	r0, r2, #1
 8007be0:	bd70      	pop	{r4, r5, r6, pc}
 8007be2:	f081 0101 	eor.w	r1, r1, #1
 8007be6:	54e1      	strb	r1, [r4, r3]
 8007be8:	4610      	mov	r0, r2
 8007bea:	4602      	mov	r2, r0
 8007bec:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007bf0:	2d2d      	cmp	r5, #45	; 0x2d
 8007bf2:	d005      	beq.n	8007c00 <__sccl+0x48>
 8007bf4:	2d5d      	cmp	r5, #93	; 0x5d
 8007bf6:	d016      	beq.n	8007c26 <__sccl+0x6e>
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	d0f1      	beq.n	8007be0 <__sccl+0x28>
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	e7f2      	b.n	8007be6 <__sccl+0x2e>
 8007c00:	7846      	ldrb	r6, [r0, #1]
 8007c02:	2e5d      	cmp	r6, #93	; 0x5d
 8007c04:	d0fa      	beq.n	8007bfc <__sccl+0x44>
 8007c06:	42b3      	cmp	r3, r6
 8007c08:	dcf8      	bgt.n	8007bfc <__sccl+0x44>
 8007c0a:	3002      	adds	r0, #2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	3201      	adds	r2, #1
 8007c10:	4296      	cmp	r6, r2
 8007c12:	54a1      	strb	r1, [r4, r2]
 8007c14:	dcfb      	bgt.n	8007c0e <__sccl+0x56>
 8007c16:	1af2      	subs	r2, r6, r3
 8007c18:	3a01      	subs	r2, #1
 8007c1a:	1c5d      	adds	r5, r3, #1
 8007c1c:	42b3      	cmp	r3, r6
 8007c1e:	bfa8      	it	ge
 8007c20:	2200      	movge	r2, #0
 8007c22:	18ab      	adds	r3, r5, r2
 8007c24:	e7e1      	b.n	8007bea <__sccl+0x32>
 8007c26:	4610      	mov	r0, r2
 8007c28:	e7da      	b.n	8007be0 <__sccl+0x28>

08007c2a <__submore>:
 8007c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2e:	460c      	mov	r4, r1
 8007c30:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007c32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c36:	4299      	cmp	r1, r3
 8007c38:	d11d      	bne.n	8007c76 <__submore+0x4c>
 8007c3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c3e:	f7fd ff49 	bl	8005ad4 <_malloc_r>
 8007c42:	b918      	cbnz	r0, 8007c4c <__submore+0x22>
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c50:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c52:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007c56:	6360      	str	r0, [r4, #52]	; 0x34
 8007c58:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007c5c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007c60:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007c64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c68:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007c6c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007c70:	6020      	str	r0, [r4, #0]
 8007c72:	2000      	movs	r0, #0
 8007c74:	e7e8      	b.n	8007c48 <__submore+0x1e>
 8007c76:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007c78:	0077      	lsls	r7, r6, #1
 8007c7a:	463a      	mov	r2, r7
 8007c7c:	f000 fbf1 	bl	8008462 <_realloc_r>
 8007c80:	4605      	mov	r5, r0
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d0de      	beq.n	8007c44 <__submore+0x1a>
 8007c86:	eb00 0806 	add.w	r8, r0, r6
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7fd f81b 	bl	8004cca <memcpy>
 8007c94:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007c98:	f8c4 8000 	str.w	r8, [r4]
 8007c9c:	e7e9      	b.n	8007c72 <__submore+0x48>

08007c9e <memmove>:
 8007c9e:	4288      	cmp	r0, r1
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	eb01 0402 	add.w	r4, r1, r2
 8007ca6:	d902      	bls.n	8007cae <memmove+0x10>
 8007ca8:	4284      	cmp	r4, r0
 8007caa:	4623      	mov	r3, r4
 8007cac:	d807      	bhi.n	8007cbe <memmove+0x20>
 8007cae:	1e43      	subs	r3, r0, #1
 8007cb0:	42a1      	cmp	r1, r4
 8007cb2:	d008      	beq.n	8007cc6 <memmove+0x28>
 8007cb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cbc:	e7f8      	b.n	8007cb0 <memmove+0x12>
 8007cbe:	4402      	add	r2, r0
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	428a      	cmp	r2, r1
 8007cc4:	d100      	bne.n	8007cc8 <memmove+0x2a>
 8007cc6:	bd10      	pop	{r4, pc}
 8007cc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ccc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cd0:	e7f7      	b.n	8007cc2 <memmove+0x24>

08007cd2 <strncmp>:
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	b16a      	cbz	r2, 8007cf2 <strncmp+0x20>
 8007cd6:	3901      	subs	r1, #1
 8007cd8:	1884      	adds	r4, r0, r2
 8007cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cde:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d103      	bne.n	8007cee <strncmp+0x1c>
 8007ce6:	42a0      	cmp	r0, r4
 8007ce8:	d001      	beq.n	8007cee <strncmp+0x1c>
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	d1f5      	bne.n	8007cda <strncmp+0x8>
 8007cee:	1ad0      	subs	r0, r2, r3
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	e7fc      	b.n	8007cf0 <strncmp+0x1e>
	...

08007cf8 <_sbrk_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d06      	ldr	r5, [pc, #24]	; (8007d14 <_sbrk_r+0x1c>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	f7f9 fb18 	bl	8001338 <_sbrk>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_sbrk_r+0x1a>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_sbrk_r+0x1a>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	200004bc 	.word	0x200004bc

08007d18 <nan>:
 8007d18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007d20 <nan+0x8>
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	00000000 	.word	0x00000000
 8007d24:	7ff80000 	.word	0x7ff80000

08007d28 <__assert_func>:
 8007d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d2a:	4614      	mov	r4, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <__assert_func+0x2c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4605      	mov	r5, r0
 8007d34:	68d8      	ldr	r0, [r3, #12]
 8007d36:	b14c      	cbz	r4, 8007d4c <__assert_func+0x24>
 8007d38:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <__assert_func+0x30>)
 8007d3a:	9100      	str	r1, [sp, #0]
 8007d3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d40:	4906      	ldr	r1, [pc, #24]	; (8007d5c <__assert_func+0x34>)
 8007d42:	462b      	mov	r3, r5
 8007d44:	f000 fc3e 	bl	80085c4 <fiprintf>
 8007d48:	f000 fc4e 	bl	80085e8 <abort>
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <__assert_func+0x38>)
 8007d4e:	461c      	mov	r4, r3
 8007d50:	e7f3      	b.n	8007d3a <__assert_func+0x12>
 8007d52:	bf00      	nop
 8007d54:	20000064 	.word	0x20000064
 8007d58:	08008f54 	.word	0x08008f54
 8007d5c:	08008f61 	.word	0x08008f61
 8007d60:	08008f8f 	.word	0x08008f8f

08007d64 <_calloc_r>:
 8007d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d66:	fba1 2402 	umull	r2, r4, r1, r2
 8007d6a:	b94c      	cbnz	r4, 8007d80 <_calloc_r+0x1c>
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	9201      	str	r2, [sp, #4]
 8007d70:	f7fd feb0 	bl	8005ad4 <_malloc_r>
 8007d74:	9a01      	ldr	r2, [sp, #4]
 8007d76:	4605      	mov	r5, r0
 8007d78:	b930      	cbnz	r0, 8007d88 <_calloc_r+0x24>
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	b003      	add	sp, #12
 8007d7e:	bd30      	pop	{r4, r5, pc}
 8007d80:	220c      	movs	r2, #12
 8007d82:	6002      	str	r2, [r0, #0]
 8007d84:	2500      	movs	r5, #0
 8007d86:	e7f8      	b.n	8007d7a <_calloc_r+0x16>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	f7fc ff0c 	bl	8004ba6 <memset>
 8007d8e:	e7f4      	b.n	8007d7a <_calloc_r+0x16>

08007d90 <rshift>:
 8007d90:	6903      	ldr	r3, [r0, #16]
 8007d92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d9e:	f100 0414 	add.w	r4, r0, #20
 8007da2:	dd45      	ble.n	8007e30 <rshift+0xa0>
 8007da4:	f011 011f 	ands.w	r1, r1, #31
 8007da8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007dac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007db0:	d10c      	bne.n	8007dcc <rshift+0x3c>
 8007db2:	f100 0710 	add.w	r7, r0, #16
 8007db6:	4629      	mov	r1, r5
 8007db8:	42b1      	cmp	r1, r6
 8007dba:	d334      	bcc.n	8007e26 <rshift+0x96>
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	1eea      	subs	r2, r5, #3
 8007dc2:	4296      	cmp	r6, r2
 8007dc4:	bf38      	it	cc
 8007dc6:	2300      	movcc	r3, #0
 8007dc8:	4423      	add	r3, r4
 8007dca:	e015      	b.n	8007df8 <rshift+0x68>
 8007dcc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007dd0:	f1c1 0820 	rsb	r8, r1, #32
 8007dd4:	40cf      	lsrs	r7, r1
 8007dd6:	f105 0e04 	add.w	lr, r5, #4
 8007dda:	46a1      	mov	r9, r4
 8007ddc:	4576      	cmp	r6, lr
 8007dde:	46f4      	mov	ip, lr
 8007de0:	d815      	bhi.n	8007e0e <rshift+0x7e>
 8007de2:	1a9a      	subs	r2, r3, r2
 8007de4:	0092      	lsls	r2, r2, #2
 8007de6:	3a04      	subs	r2, #4
 8007de8:	3501      	adds	r5, #1
 8007dea:	42ae      	cmp	r6, r5
 8007dec:	bf38      	it	cc
 8007dee:	2200      	movcc	r2, #0
 8007df0:	18a3      	adds	r3, r4, r2
 8007df2:	50a7      	str	r7, [r4, r2]
 8007df4:	b107      	cbz	r7, 8007df8 <rshift+0x68>
 8007df6:	3304      	adds	r3, #4
 8007df8:	1b1a      	subs	r2, r3, r4
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e00:	bf08      	it	eq
 8007e02:	2300      	moveq	r3, #0
 8007e04:	6102      	str	r2, [r0, #16]
 8007e06:	bf08      	it	eq
 8007e08:	6143      	streq	r3, [r0, #20]
 8007e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0e:	f8dc c000 	ldr.w	ip, [ip]
 8007e12:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e16:	ea4c 0707 	orr.w	r7, ip, r7
 8007e1a:	f849 7b04 	str.w	r7, [r9], #4
 8007e1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e22:	40cf      	lsrs	r7, r1
 8007e24:	e7da      	b.n	8007ddc <rshift+0x4c>
 8007e26:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e2a:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e2e:	e7c3      	b.n	8007db8 <rshift+0x28>
 8007e30:	4623      	mov	r3, r4
 8007e32:	e7e1      	b.n	8007df8 <rshift+0x68>

08007e34 <__hexdig_fun>:
 8007e34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e38:	2b09      	cmp	r3, #9
 8007e3a:	d802      	bhi.n	8007e42 <__hexdig_fun+0xe>
 8007e3c:	3820      	subs	r0, #32
 8007e3e:	b2c0      	uxtb	r0, r0
 8007e40:	4770      	bx	lr
 8007e42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e46:	2b05      	cmp	r3, #5
 8007e48:	d801      	bhi.n	8007e4e <__hexdig_fun+0x1a>
 8007e4a:	3847      	subs	r0, #71	; 0x47
 8007e4c:	e7f7      	b.n	8007e3e <__hexdig_fun+0xa>
 8007e4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e52:	2b05      	cmp	r3, #5
 8007e54:	d801      	bhi.n	8007e5a <__hexdig_fun+0x26>
 8007e56:	3827      	subs	r0, #39	; 0x27
 8007e58:	e7f1      	b.n	8007e3e <__hexdig_fun+0xa>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	4770      	bx	lr
	...

08007e60 <__gethex>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	4617      	mov	r7, r2
 8007e66:	680a      	ldr	r2, [r1, #0]
 8007e68:	b085      	sub	sp, #20
 8007e6a:	f102 0b02 	add.w	fp, r2, #2
 8007e6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007e76:	4681      	mov	r9, r0
 8007e78:	468a      	mov	sl, r1
 8007e7a:	9302      	str	r3, [sp, #8]
 8007e7c:	32fe      	adds	r2, #254	; 0xfe
 8007e7e:	eb02 030b 	add.w	r3, r2, fp
 8007e82:	46d8      	mov	r8, fp
 8007e84:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	2830      	cmp	r0, #48	; 0x30
 8007e8c:	d0f7      	beq.n	8007e7e <__gethex+0x1e>
 8007e8e:	f7ff ffd1 	bl	8007e34 <__hexdig_fun>
 8007e92:	4604      	mov	r4, r0
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d138      	bne.n	8007f0a <__gethex+0xaa>
 8007e98:	49a7      	ldr	r1, [pc, #668]	; (8008138 <__gethex+0x2d8>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	f7ff ff18 	bl	8007cd2 <strncmp>
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d169      	bne.n	8007f7c <__gethex+0x11c>
 8007ea8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007eac:	465d      	mov	r5, fp
 8007eae:	f7ff ffc1 	bl	8007e34 <__hexdig_fun>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d064      	beq.n	8007f80 <__gethex+0x120>
 8007eb6:	465a      	mov	r2, fp
 8007eb8:	7810      	ldrb	r0, [r2, #0]
 8007eba:	2830      	cmp	r0, #48	; 0x30
 8007ebc:	4690      	mov	r8, r2
 8007ebe:	f102 0201 	add.w	r2, r2, #1
 8007ec2:	d0f9      	beq.n	8007eb8 <__gethex+0x58>
 8007ec4:	f7ff ffb6 	bl	8007e34 <__hexdig_fun>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	fab0 f480 	clz	r4, r0
 8007ece:	0964      	lsrs	r4, r4, #5
 8007ed0:	465e      	mov	r6, fp
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	4642      	mov	r2, r8
 8007ed6:	4615      	mov	r5, r2
 8007ed8:	3201      	adds	r2, #1
 8007eda:	7828      	ldrb	r0, [r5, #0]
 8007edc:	f7ff ffaa 	bl	8007e34 <__hexdig_fun>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d1f8      	bne.n	8007ed6 <__gethex+0x76>
 8007ee4:	4994      	ldr	r1, [pc, #592]	; (8008138 <__gethex+0x2d8>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f7ff fef2 	bl	8007cd2 <strncmp>
 8007eee:	b978      	cbnz	r0, 8007f10 <__gethex+0xb0>
 8007ef0:	b946      	cbnz	r6, 8007f04 <__gethex+0xa4>
 8007ef2:	1c6e      	adds	r6, r5, #1
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	4615      	mov	r5, r2
 8007ef8:	3201      	adds	r2, #1
 8007efa:	7828      	ldrb	r0, [r5, #0]
 8007efc:	f7ff ff9a 	bl	8007e34 <__hexdig_fun>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d1f8      	bne.n	8007ef6 <__gethex+0x96>
 8007f04:	1b73      	subs	r3, r6, r5
 8007f06:	009e      	lsls	r6, r3, #2
 8007f08:	e004      	b.n	8007f14 <__gethex+0xb4>
 8007f0a:	2400      	movs	r4, #0
 8007f0c:	4626      	mov	r6, r4
 8007f0e:	e7e1      	b.n	8007ed4 <__gethex+0x74>
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	d1f7      	bne.n	8007f04 <__gethex+0xa4>
 8007f14:	782b      	ldrb	r3, [r5, #0]
 8007f16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f1a:	2b50      	cmp	r3, #80	; 0x50
 8007f1c:	d13d      	bne.n	8007f9a <__gethex+0x13a>
 8007f1e:	786b      	ldrb	r3, [r5, #1]
 8007f20:	2b2b      	cmp	r3, #43	; 0x2b
 8007f22:	d02f      	beq.n	8007f84 <__gethex+0x124>
 8007f24:	2b2d      	cmp	r3, #45	; 0x2d
 8007f26:	d031      	beq.n	8007f8c <__gethex+0x12c>
 8007f28:	1c69      	adds	r1, r5, #1
 8007f2a:	f04f 0b00 	mov.w	fp, #0
 8007f2e:	7808      	ldrb	r0, [r1, #0]
 8007f30:	f7ff ff80 	bl	8007e34 <__hexdig_fun>
 8007f34:	1e42      	subs	r2, r0, #1
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	2a18      	cmp	r2, #24
 8007f3a:	d82e      	bhi.n	8007f9a <__gethex+0x13a>
 8007f3c:	f1a0 0210 	sub.w	r2, r0, #16
 8007f40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f44:	f7ff ff76 	bl	8007e34 <__hexdig_fun>
 8007f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8007f4c:	fa5f fc8c 	uxtb.w	ip, ip
 8007f50:	f1bc 0f18 	cmp.w	ip, #24
 8007f54:	d91d      	bls.n	8007f92 <__gethex+0x132>
 8007f56:	f1bb 0f00 	cmp.w	fp, #0
 8007f5a:	d000      	beq.n	8007f5e <__gethex+0xfe>
 8007f5c:	4252      	negs	r2, r2
 8007f5e:	4416      	add	r6, r2
 8007f60:	f8ca 1000 	str.w	r1, [sl]
 8007f64:	b1dc      	cbz	r4, 8007f9e <__gethex+0x13e>
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bf14      	ite	ne
 8007f6c:	f04f 0800 	movne.w	r8, #0
 8007f70:	f04f 0806 	moveq.w	r8, #6
 8007f74:	4640      	mov	r0, r8
 8007f76:	b005      	add	sp, #20
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	4645      	mov	r5, r8
 8007f7e:	4626      	mov	r6, r4
 8007f80:	2401      	movs	r4, #1
 8007f82:	e7c7      	b.n	8007f14 <__gethex+0xb4>
 8007f84:	f04f 0b00 	mov.w	fp, #0
 8007f88:	1ca9      	adds	r1, r5, #2
 8007f8a:	e7d0      	b.n	8007f2e <__gethex+0xce>
 8007f8c:	f04f 0b01 	mov.w	fp, #1
 8007f90:	e7fa      	b.n	8007f88 <__gethex+0x128>
 8007f92:	230a      	movs	r3, #10
 8007f94:	fb03 0002 	mla	r0, r3, r2, r0
 8007f98:	e7d0      	b.n	8007f3c <__gethex+0xdc>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	e7e0      	b.n	8007f60 <__gethex+0x100>
 8007f9e:	eba5 0308 	sub.w	r3, r5, r8
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	2b07      	cmp	r3, #7
 8007fa8:	dc0a      	bgt.n	8007fc0 <__gethex+0x160>
 8007faa:	4648      	mov	r0, r9
 8007fac:	f7fd fe1e 	bl	8005bec <_Balloc>
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	b940      	cbnz	r0, 8007fc6 <__gethex+0x166>
 8007fb4:	4b61      	ldr	r3, [pc, #388]	; (800813c <__gethex+0x2dc>)
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	21e4      	movs	r1, #228	; 0xe4
 8007fba:	4861      	ldr	r0, [pc, #388]	; (8008140 <__gethex+0x2e0>)
 8007fbc:	f7ff feb4 	bl	8007d28 <__assert_func>
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	105b      	asrs	r3, r3, #1
 8007fc4:	e7ef      	b.n	8007fa6 <__gethex+0x146>
 8007fc6:	f100 0a14 	add.w	sl, r0, #20
 8007fca:	2300      	movs	r3, #0
 8007fcc:	495a      	ldr	r1, [pc, #360]	; (8008138 <__gethex+0x2d8>)
 8007fce:	f8cd a004 	str.w	sl, [sp, #4]
 8007fd2:	469b      	mov	fp, r3
 8007fd4:	45a8      	cmp	r8, r5
 8007fd6:	d342      	bcc.n	800805e <__gethex+0x1fe>
 8007fd8:	9801      	ldr	r0, [sp, #4]
 8007fda:	f840 bb04 	str.w	fp, [r0], #4
 8007fde:	eba0 000a 	sub.w	r0, r0, sl
 8007fe2:	1080      	asrs	r0, r0, #2
 8007fe4:	6120      	str	r0, [r4, #16]
 8007fe6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007fea:	4658      	mov	r0, fp
 8007fec:	f7fd fef0 	bl	8005dd0 <__hi0bits>
 8007ff0:	683d      	ldr	r5, [r7, #0]
 8007ff2:	eba8 0000 	sub.w	r0, r8, r0
 8007ff6:	42a8      	cmp	r0, r5
 8007ff8:	dd59      	ble.n	80080ae <__gethex+0x24e>
 8007ffa:	eba0 0805 	sub.w	r8, r0, r5
 8007ffe:	4641      	mov	r1, r8
 8008000:	4620      	mov	r0, r4
 8008002:	f7fe fa7f 	bl	8006504 <__any_on>
 8008006:	4683      	mov	fp, r0
 8008008:	b1b8      	cbz	r0, 800803a <__gethex+0x1da>
 800800a:	f108 33ff 	add.w	r3, r8, #4294967295
 800800e:	1159      	asrs	r1, r3, #5
 8008010:	f003 021f 	and.w	r2, r3, #31
 8008014:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008018:	f04f 0b01 	mov.w	fp, #1
 800801c:	fa0b f202 	lsl.w	r2, fp, r2
 8008020:	420a      	tst	r2, r1
 8008022:	d00a      	beq.n	800803a <__gethex+0x1da>
 8008024:	455b      	cmp	r3, fp
 8008026:	dd06      	ble.n	8008036 <__gethex+0x1d6>
 8008028:	f1a8 0102 	sub.w	r1, r8, #2
 800802c:	4620      	mov	r0, r4
 800802e:	f7fe fa69 	bl	8006504 <__any_on>
 8008032:	2800      	cmp	r0, #0
 8008034:	d138      	bne.n	80080a8 <__gethex+0x248>
 8008036:	f04f 0b02 	mov.w	fp, #2
 800803a:	4641      	mov	r1, r8
 800803c:	4620      	mov	r0, r4
 800803e:	f7ff fea7 	bl	8007d90 <rshift>
 8008042:	4446      	add	r6, r8
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	42b3      	cmp	r3, r6
 8008048:	da41      	bge.n	80080ce <__gethex+0x26e>
 800804a:	4621      	mov	r1, r4
 800804c:	4648      	mov	r0, r9
 800804e:	f7fd fe0d 	bl	8005c6c <_Bfree>
 8008052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008054:	2300      	movs	r3, #0
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800805c:	e78a      	b.n	8007f74 <__gethex+0x114>
 800805e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008062:	2a2e      	cmp	r2, #46	; 0x2e
 8008064:	d014      	beq.n	8008090 <__gethex+0x230>
 8008066:	2b20      	cmp	r3, #32
 8008068:	d106      	bne.n	8008078 <__gethex+0x218>
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	f843 bb04 	str.w	fp, [r3], #4
 8008070:	f04f 0b00 	mov.w	fp, #0
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	465b      	mov	r3, fp
 8008078:	7828      	ldrb	r0, [r5, #0]
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	f7ff feda 	bl	8007e34 <__hexdig_fun>
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	f000 000f 	and.w	r0, r0, #15
 8008086:	4098      	lsls	r0, r3
 8008088:	ea4b 0b00 	orr.w	fp, fp, r0
 800808c:	3304      	adds	r3, #4
 800808e:	e7a1      	b.n	8007fd4 <__gethex+0x174>
 8008090:	45a8      	cmp	r8, r5
 8008092:	d8e8      	bhi.n	8008066 <__gethex+0x206>
 8008094:	2201      	movs	r2, #1
 8008096:	4628      	mov	r0, r5
 8008098:	9303      	str	r3, [sp, #12]
 800809a:	f7ff fe1a 	bl	8007cd2 <strncmp>
 800809e:	4926      	ldr	r1, [pc, #152]	; (8008138 <__gethex+0x2d8>)
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d1df      	bne.n	8008066 <__gethex+0x206>
 80080a6:	e795      	b.n	8007fd4 <__gethex+0x174>
 80080a8:	f04f 0b03 	mov.w	fp, #3
 80080ac:	e7c5      	b.n	800803a <__gethex+0x1da>
 80080ae:	da0b      	bge.n	80080c8 <__gethex+0x268>
 80080b0:	eba5 0800 	sub.w	r8, r5, r0
 80080b4:	4621      	mov	r1, r4
 80080b6:	4642      	mov	r2, r8
 80080b8:	4648      	mov	r0, r9
 80080ba:	f7fd fff1 	bl	80060a0 <__lshift>
 80080be:	eba6 0608 	sub.w	r6, r6, r8
 80080c2:	4604      	mov	r4, r0
 80080c4:	f100 0a14 	add.w	sl, r0, #20
 80080c8:	f04f 0b00 	mov.w	fp, #0
 80080cc:	e7ba      	b.n	8008044 <__gethex+0x1e4>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	42b3      	cmp	r3, r6
 80080d2:	dd73      	ble.n	80081bc <__gethex+0x35c>
 80080d4:	1b9e      	subs	r6, r3, r6
 80080d6:	42b5      	cmp	r5, r6
 80080d8:	dc34      	bgt.n	8008144 <__gethex+0x2e4>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d023      	beq.n	8008128 <__gethex+0x2c8>
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d025      	beq.n	8008130 <__gethex+0x2d0>
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d115      	bne.n	8008114 <__gethex+0x2b4>
 80080e8:	42b5      	cmp	r5, r6
 80080ea:	d113      	bne.n	8008114 <__gethex+0x2b4>
 80080ec:	2d01      	cmp	r5, #1
 80080ee:	d10b      	bne.n	8008108 <__gethex+0x2a8>
 80080f0:	9a02      	ldr	r2, [sp, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	2301      	movs	r3, #1
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	f8ca 3000 	str.w	r3, [sl]
 80080fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008100:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008104:	601c      	str	r4, [r3, #0]
 8008106:	e735      	b.n	8007f74 <__gethex+0x114>
 8008108:	1e69      	subs	r1, r5, #1
 800810a:	4620      	mov	r0, r4
 800810c:	f7fe f9fa 	bl	8006504 <__any_on>
 8008110:	2800      	cmp	r0, #0
 8008112:	d1ed      	bne.n	80080f0 <__gethex+0x290>
 8008114:	4621      	mov	r1, r4
 8008116:	4648      	mov	r0, r9
 8008118:	f7fd fda8 	bl	8005c6c <_Bfree>
 800811c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800811e:	2300      	movs	r3, #0
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008126:	e725      	b.n	8007f74 <__gethex+0x114>
 8008128:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f2      	bne.n	8008114 <__gethex+0x2b4>
 800812e:	e7df      	b.n	80080f0 <__gethex+0x290>
 8008130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1dc      	bne.n	80080f0 <__gethex+0x290>
 8008136:	e7ed      	b.n	8008114 <__gethex+0x2b4>
 8008138:	08008ecc 	.word	0x08008ecc
 800813c:	08008d60 	.word	0x08008d60
 8008140:	08008f90 	.word	0x08008f90
 8008144:	f106 38ff 	add.w	r8, r6, #4294967295
 8008148:	f1bb 0f00 	cmp.w	fp, #0
 800814c:	d133      	bne.n	80081b6 <__gethex+0x356>
 800814e:	f1b8 0f00 	cmp.w	r8, #0
 8008152:	d004      	beq.n	800815e <__gethex+0x2fe>
 8008154:	4641      	mov	r1, r8
 8008156:	4620      	mov	r0, r4
 8008158:	f7fe f9d4 	bl	8006504 <__any_on>
 800815c:	4683      	mov	fp, r0
 800815e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008162:	2301      	movs	r3, #1
 8008164:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008168:	f008 081f 	and.w	r8, r8, #31
 800816c:	fa03 f308 	lsl.w	r3, r3, r8
 8008170:	4213      	tst	r3, r2
 8008172:	4631      	mov	r1, r6
 8008174:	4620      	mov	r0, r4
 8008176:	bf18      	it	ne
 8008178:	f04b 0b02 	orrne.w	fp, fp, #2
 800817c:	1bad      	subs	r5, r5, r6
 800817e:	f7ff fe07 	bl	8007d90 <rshift>
 8008182:	687e      	ldr	r6, [r7, #4]
 8008184:	f04f 0802 	mov.w	r8, #2
 8008188:	f1bb 0f00 	cmp.w	fp, #0
 800818c:	d04a      	beq.n	8008224 <__gethex+0x3c4>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d016      	beq.n	80081c2 <__gethex+0x362>
 8008194:	2b03      	cmp	r3, #3
 8008196:	d018      	beq.n	80081ca <__gethex+0x36a>
 8008198:	2b01      	cmp	r3, #1
 800819a:	d109      	bne.n	80081b0 <__gethex+0x350>
 800819c:	f01b 0f02 	tst.w	fp, #2
 80081a0:	d006      	beq.n	80081b0 <__gethex+0x350>
 80081a2:	f8da 3000 	ldr.w	r3, [sl]
 80081a6:	ea4b 0b03 	orr.w	fp, fp, r3
 80081aa:	f01b 0f01 	tst.w	fp, #1
 80081ae:	d10f      	bne.n	80081d0 <__gethex+0x370>
 80081b0:	f048 0810 	orr.w	r8, r8, #16
 80081b4:	e036      	b.n	8008224 <__gethex+0x3c4>
 80081b6:	f04f 0b01 	mov.w	fp, #1
 80081ba:	e7d0      	b.n	800815e <__gethex+0x2fe>
 80081bc:	f04f 0801 	mov.w	r8, #1
 80081c0:	e7e2      	b.n	8008188 <__gethex+0x328>
 80081c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081c4:	f1c3 0301 	rsb	r3, r3, #1
 80081c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80081ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0ef      	beq.n	80081b0 <__gethex+0x350>
 80081d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081d4:	f104 0214 	add.w	r2, r4, #20
 80081d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80081e2:	2300      	movs	r3, #0
 80081e4:	4694      	mov	ip, r2
 80081e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80081ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 80081ee:	d01e      	beq.n	800822e <__gethex+0x3ce>
 80081f0:	3101      	adds	r1, #1
 80081f2:	f8cc 1000 	str.w	r1, [ip]
 80081f6:	f1b8 0f02 	cmp.w	r8, #2
 80081fa:	f104 0214 	add.w	r2, r4, #20
 80081fe:	d13d      	bne.n	800827c <__gethex+0x41c>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	3b01      	subs	r3, #1
 8008204:	42ab      	cmp	r3, r5
 8008206:	d10b      	bne.n	8008220 <__gethex+0x3c0>
 8008208:	1169      	asrs	r1, r5, #5
 800820a:	2301      	movs	r3, #1
 800820c:	f005 051f 	and.w	r5, r5, #31
 8008210:	fa03 f505 	lsl.w	r5, r3, r5
 8008214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008218:	421d      	tst	r5, r3
 800821a:	bf18      	it	ne
 800821c:	f04f 0801 	movne.w	r8, #1
 8008220:	f048 0820 	orr.w	r8, r8, #32
 8008224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008226:	601c      	str	r4, [r3, #0]
 8008228:	9b02      	ldr	r3, [sp, #8]
 800822a:	601e      	str	r6, [r3, #0]
 800822c:	e6a2      	b.n	8007f74 <__gethex+0x114>
 800822e:	4290      	cmp	r0, r2
 8008230:	f842 3c04 	str.w	r3, [r2, #-4]
 8008234:	d8d6      	bhi.n	80081e4 <__gethex+0x384>
 8008236:	68a2      	ldr	r2, [r4, #8]
 8008238:	4593      	cmp	fp, r2
 800823a:	db17      	blt.n	800826c <__gethex+0x40c>
 800823c:	6861      	ldr	r1, [r4, #4]
 800823e:	4648      	mov	r0, r9
 8008240:	3101      	adds	r1, #1
 8008242:	f7fd fcd3 	bl	8005bec <_Balloc>
 8008246:	4682      	mov	sl, r0
 8008248:	b918      	cbnz	r0, 8008252 <__gethex+0x3f2>
 800824a:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <__gethex+0x458>)
 800824c:	4602      	mov	r2, r0
 800824e:	2184      	movs	r1, #132	; 0x84
 8008250:	e6b3      	b.n	8007fba <__gethex+0x15a>
 8008252:	6922      	ldr	r2, [r4, #16]
 8008254:	3202      	adds	r2, #2
 8008256:	f104 010c 	add.w	r1, r4, #12
 800825a:	0092      	lsls	r2, r2, #2
 800825c:	300c      	adds	r0, #12
 800825e:	f7fc fd34 	bl	8004cca <memcpy>
 8008262:	4621      	mov	r1, r4
 8008264:	4648      	mov	r0, r9
 8008266:	f7fd fd01 	bl	8005c6c <_Bfree>
 800826a:	4654      	mov	r4, sl
 800826c:	6922      	ldr	r2, [r4, #16]
 800826e:	1c51      	adds	r1, r2, #1
 8008270:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008274:	6121      	str	r1, [r4, #16]
 8008276:	2101      	movs	r1, #1
 8008278:	6151      	str	r1, [r2, #20]
 800827a:	e7bc      	b.n	80081f6 <__gethex+0x396>
 800827c:	6921      	ldr	r1, [r4, #16]
 800827e:	4559      	cmp	r1, fp
 8008280:	dd0b      	ble.n	800829a <__gethex+0x43a>
 8008282:	2101      	movs	r1, #1
 8008284:	4620      	mov	r0, r4
 8008286:	f7ff fd83 	bl	8007d90 <rshift>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	3601      	adds	r6, #1
 800828e:	42b3      	cmp	r3, r6
 8008290:	f6ff aedb 	blt.w	800804a <__gethex+0x1ea>
 8008294:	f04f 0801 	mov.w	r8, #1
 8008298:	e7c2      	b.n	8008220 <__gethex+0x3c0>
 800829a:	f015 051f 	ands.w	r5, r5, #31
 800829e:	d0f9      	beq.n	8008294 <__gethex+0x434>
 80082a0:	9b01      	ldr	r3, [sp, #4]
 80082a2:	441a      	add	r2, r3
 80082a4:	f1c5 0520 	rsb	r5, r5, #32
 80082a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80082ac:	f7fd fd90 	bl	8005dd0 <__hi0bits>
 80082b0:	42a8      	cmp	r0, r5
 80082b2:	dbe6      	blt.n	8008282 <__gethex+0x422>
 80082b4:	e7ee      	b.n	8008294 <__gethex+0x434>
 80082b6:	bf00      	nop
 80082b8:	08008d60 	.word	0x08008d60

080082bc <L_shift>:
 80082bc:	f1c2 0208 	rsb	r2, r2, #8
 80082c0:	0092      	lsls	r2, r2, #2
 80082c2:	b570      	push	{r4, r5, r6, lr}
 80082c4:	f1c2 0620 	rsb	r6, r2, #32
 80082c8:	6843      	ldr	r3, [r0, #4]
 80082ca:	6804      	ldr	r4, [r0, #0]
 80082cc:	fa03 f506 	lsl.w	r5, r3, r6
 80082d0:	432c      	orrs	r4, r5
 80082d2:	40d3      	lsrs	r3, r2
 80082d4:	6004      	str	r4, [r0, #0]
 80082d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80082da:	4288      	cmp	r0, r1
 80082dc:	d3f4      	bcc.n	80082c8 <L_shift+0xc>
 80082de:	bd70      	pop	{r4, r5, r6, pc}

080082e0 <__match>:
 80082e0:	b530      	push	{r4, r5, lr}
 80082e2:	6803      	ldr	r3, [r0, #0]
 80082e4:	3301      	adds	r3, #1
 80082e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ea:	b914      	cbnz	r4, 80082f2 <__match+0x12>
 80082ec:	6003      	str	r3, [r0, #0]
 80082ee:	2001      	movs	r0, #1
 80082f0:	bd30      	pop	{r4, r5, pc}
 80082f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80082fa:	2d19      	cmp	r5, #25
 80082fc:	bf98      	it	ls
 80082fe:	3220      	addls	r2, #32
 8008300:	42a2      	cmp	r2, r4
 8008302:	d0f0      	beq.n	80082e6 <__match+0x6>
 8008304:	2000      	movs	r0, #0
 8008306:	e7f3      	b.n	80082f0 <__match+0x10>

08008308 <__hexnan>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	680b      	ldr	r3, [r1, #0]
 800830e:	6801      	ldr	r1, [r0, #0]
 8008310:	115e      	asrs	r6, r3, #5
 8008312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008316:	f013 031f 	ands.w	r3, r3, #31
 800831a:	b087      	sub	sp, #28
 800831c:	bf18      	it	ne
 800831e:	3604      	addne	r6, #4
 8008320:	2500      	movs	r5, #0
 8008322:	1f37      	subs	r7, r6, #4
 8008324:	4682      	mov	sl, r0
 8008326:	4690      	mov	r8, r2
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	f846 5c04 	str.w	r5, [r6, #-4]
 800832e:	46b9      	mov	r9, r7
 8008330:	463c      	mov	r4, r7
 8008332:	9502      	str	r5, [sp, #8]
 8008334:	46ab      	mov	fp, r5
 8008336:	784a      	ldrb	r2, [r1, #1]
 8008338:	1c4b      	adds	r3, r1, #1
 800833a:	9303      	str	r3, [sp, #12]
 800833c:	b342      	cbz	r2, 8008390 <__hexnan+0x88>
 800833e:	4610      	mov	r0, r2
 8008340:	9105      	str	r1, [sp, #20]
 8008342:	9204      	str	r2, [sp, #16]
 8008344:	f7ff fd76 	bl	8007e34 <__hexdig_fun>
 8008348:	2800      	cmp	r0, #0
 800834a:	d14f      	bne.n	80083ec <__hexnan+0xe4>
 800834c:	9a04      	ldr	r2, [sp, #16]
 800834e:	9905      	ldr	r1, [sp, #20]
 8008350:	2a20      	cmp	r2, #32
 8008352:	d818      	bhi.n	8008386 <__hexnan+0x7e>
 8008354:	9b02      	ldr	r3, [sp, #8]
 8008356:	459b      	cmp	fp, r3
 8008358:	dd13      	ble.n	8008382 <__hexnan+0x7a>
 800835a:	454c      	cmp	r4, r9
 800835c:	d206      	bcs.n	800836c <__hexnan+0x64>
 800835e:	2d07      	cmp	r5, #7
 8008360:	dc04      	bgt.n	800836c <__hexnan+0x64>
 8008362:	462a      	mov	r2, r5
 8008364:	4649      	mov	r1, r9
 8008366:	4620      	mov	r0, r4
 8008368:	f7ff ffa8 	bl	80082bc <L_shift>
 800836c:	4544      	cmp	r4, r8
 800836e:	d950      	bls.n	8008412 <__hexnan+0x10a>
 8008370:	2300      	movs	r3, #0
 8008372:	f1a4 0904 	sub.w	r9, r4, #4
 8008376:	f844 3c04 	str.w	r3, [r4, #-4]
 800837a:	f8cd b008 	str.w	fp, [sp, #8]
 800837e:	464c      	mov	r4, r9
 8008380:	461d      	mov	r5, r3
 8008382:	9903      	ldr	r1, [sp, #12]
 8008384:	e7d7      	b.n	8008336 <__hexnan+0x2e>
 8008386:	2a29      	cmp	r2, #41	; 0x29
 8008388:	d155      	bne.n	8008436 <__hexnan+0x12e>
 800838a:	3102      	adds	r1, #2
 800838c:	f8ca 1000 	str.w	r1, [sl]
 8008390:	f1bb 0f00 	cmp.w	fp, #0
 8008394:	d04f      	beq.n	8008436 <__hexnan+0x12e>
 8008396:	454c      	cmp	r4, r9
 8008398:	d206      	bcs.n	80083a8 <__hexnan+0xa0>
 800839a:	2d07      	cmp	r5, #7
 800839c:	dc04      	bgt.n	80083a8 <__hexnan+0xa0>
 800839e:	462a      	mov	r2, r5
 80083a0:	4649      	mov	r1, r9
 80083a2:	4620      	mov	r0, r4
 80083a4:	f7ff ff8a 	bl	80082bc <L_shift>
 80083a8:	4544      	cmp	r4, r8
 80083aa:	d934      	bls.n	8008416 <__hexnan+0x10e>
 80083ac:	f1a8 0204 	sub.w	r2, r8, #4
 80083b0:	4623      	mov	r3, r4
 80083b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80083b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80083ba:	429f      	cmp	r7, r3
 80083bc:	d2f9      	bcs.n	80083b2 <__hexnan+0xaa>
 80083be:	1b3b      	subs	r3, r7, r4
 80083c0:	f023 0303 	bic.w	r3, r3, #3
 80083c4:	3304      	adds	r3, #4
 80083c6:	3e03      	subs	r6, #3
 80083c8:	3401      	adds	r4, #1
 80083ca:	42a6      	cmp	r6, r4
 80083cc:	bf38      	it	cc
 80083ce:	2304      	movcc	r3, #4
 80083d0:	4443      	add	r3, r8
 80083d2:	2200      	movs	r2, #0
 80083d4:	f843 2b04 	str.w	r2, [r3], #4
 80083d8:	429f      	cmp	r7, r3
 80083da:	d2fb      	bcs.n	80083d4 <__hexnan+0xcc>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	b91b      	cbnz	r3, 80083e8 <__hexnan+0xe0>
 80083e0:	4547      	cmp	r7, r8
 80083e2:	d126      	bne.n	8008432 <__hexnan+0x12a>
 80083e4:	2301      	movs	r3, #1
 80083e6:	603b      	str	r3, [r7, #0]
 80083e8:	2005      	movs	r0, #5
 80083ea:	e025      	b.n	8008438 <__hexnan+0x130>
 80083ec:	3501      	adds	r5, #1
 80083ee:	2d08      	cmp	r5, #8
 80083f0:	f10b 0b01 	add.w	fp, fp, #1
 80083f4:	dd06      	ble.n	8008404 <__hexnan+0xfc>
 80083f6:	4544      	cmp	r4, r8
 80083f8:	d9c3      	bls.n	8008382 <__hexnan+0x7a>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008400:	2501      	movs	r5, #1
 8008402:	3c04      	subs	r4, #4
 8008404:	6822      	ldr	r2, [r4, #0]
 8008406:	f000 000f 	and.w	r0, r0, #15
 800840a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	e7b7      	b.n	8008382 <__hexnan+0x7a>
 8008412:	2508      	movs	r5, #8
 8008414:	e7b5      	b.n	8008382 <__hexnan+0x7a>
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0df      	beq.n	80083dc <__hexnan+0xd4>
 800841c:	f1c3 0320 	rsb	r3, r3, #32
 8008420:	f04f 32ff 	mov.w	r2, #4294967295
 8008424:	40da      	lsrs	r2, r3
 8008426:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800842a:	4013      	ands	r3, r2
 800842c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008430:	e7d4      	b.n	80083dc <__hexnan+0xd4>
 8008432:	3f04      	subs	r7, #4
 8008434:	e7d2      	b.n	80083dc <__hexnan+0xd4>
 8008436:	2004      	movs	r0, #4
 8008438:	b007      	add	sp, #28
 800843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800843e <__ascii_mbtowc>:
 800843e:	b082      	sub	sp, #8
 8008440:	b901      	cbnz	r1, 8008444 <__ascii_mbtowc+0x6>
 8008442:	a901      	add	r1, sp, #4
 8008444:	b142      	cbz	r2, 8008458 <__ascii_mbtowc+0x1a>
 8008446:	b14b      	cbz	r3, 800845c <__ascii_mbtowc+0x1e>
 8008448:	7813      	ldrb	r3, [r2, #0]
 800844a:	600b      	str	r3, [r1, #0]
 800844c:	7812      	ldrb	r2, [r2, #0]
 800844e:	1e10      	subs	r0, r2, #0
 8008450:	bf18      	it	ne
 8008452:	2001      	movne	r0, #1
 8008454:	b002      	add	sp, #8
 8008456:	4770      	bx	lr
 8008458:	4610      	mov	r0, r2
 800845a:	e7fb      	b.n	8008454 <__ascii_mbtowc+0x16>
 800845c:	f06f 0001 	mvn.w	r0, #1
 8008460:	e7f8      	b.n	8008454 <__ascii_mbtowc+0x16>

08008462 <_realloc_r>:
 8008462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008466:	4680      	mov	r8, r0
 8008468:	4614      	mov	r4, r2
 800846a:	460e      	mov	r6, r1
 800846c:	b921      	cbnz	r1, 8008478 <_realloc_r+0x16>
 800846e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008472:	4611      	mov	r1, r2
 8008474:	f7fd bb2e 	b.w	8005ad4 <_malloc_r>
 8008478:	b92a      	cbnz	r2, 8008486 <_realloc_r+0x24>
 800847a:	f7fd fab7 	bl	80059ec <_free_r>
 800847e:	4625      	mov	r5, r4
 8008480:	4628      	mov	r0, r5
 8008482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008486:	f000 f8b6 	bl	80085f6 <_malloc_usable_size_r>
 800848a:	4284      	cmp	r4, r0
 800848c:	4607      	mov	r7, r0
 800848e:	d802      	bhi.n	8008496 <_realloc_r+0x34>
 8008490:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008494:	d812      	bhi.n	80084bc <_realloc_r+0x5a>
 8008496:	4621      	mov	r1, r4
 8008498:	4640      	mov	r0, r8
 800849a:	f7fd fb1b 	bl	8005ad4 <_malloc_r>
 800849e:	4605      	mov	r5, r0
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d0ed      	beq.n	8008480 <_realloc_r+0x1e>
 80084a4:	42bc      	cmp	r4, r7
 80084a6:	4622      	mov	r2, r4
 80084a8:	4631      	mov	r1, r6
 80084aa:	bf28      	it	cs
 80084ac:	463a      	movcs	r2, r7
 80084ae:	f7fc fc0c 	bl	8004cca <memcpy>
 80084b2:	4631      	mov	r1, r6
 80084b4:	4640      	mov	r0, r8
 80084b6:	f7fd fa99 	bl	80059ec <_free_r>
 80084ba:	e7e1      	b.n	8008480 <_realloc_r+0x1e>
 80084bc:	4635      	mov	r5, r6
 80084be:	e7df      	b.n	8008480 <_realloc_r+0x1e>

080084c0 <_strtoul_l.constprop.0>:
 80084c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084c4:	4f36      	ldr	r7, [pc, #216]	; (80085a0 <_strtoul_l.constprop.0+0xe0>)
 80084c6:	4686      	mov	lr, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	4628      	mov	r0, r5
 80084cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084d0:	5d3e      	ldrb	r6, [r7, r4]
 80084d2:	f016 0608 	ands.w	r6, r6, #8
 80084d6:	d1f8      	bne.n	80084ca <_strtoul_l.constprop.0+0xa>
 80084d8:	2c2d      	cmp	r4, #45	; 0x2d
 80084da:	d130      	bne.n	800853e <_strtoul_l.constprop.0+0x7e>
 80084dc:	782c      	ldrb	r4, [r5, #0]
 80084de:	2601      	movs	r6, #1
 80084e0:	1c85      	adds	r5, r0, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d057      	beq.n	8008596 <_strtoul_l.constprop.0+0xd6>
 80084e6:	2b10      	cmp	r3, #16
 80084e8:	d109      	bne.n	80084fe <_strtoul_l.constprop.0+0x3e>
 80084ea:	2c30      	cmp	r4, #48	; 0x30
 80084ec:	d107      	bne.n	80084fe <_strtoul_l.constprop.0+0x3e>
 80084ee:	7828      	ldrb	r0, [r5, #0]
 80084f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80084f4:	2858      	cmp	r0, #88	; 0x58
 80084f6:	d149      	bne.n	800858c <_strtoul_l.constprop.0+0xcc>
 80084f8:	786c      	ldrb	r4, [r5, #1]
 80084fa:	2310      	movs	r3, #16
 80084fc:	3502      	adds	r5, #2
 80084fe:	f04f 38ff 	mov.w	r8, #4294967295
 8008502:	2700      	movs	r7, #0
 8008504:	fbb8 f8f3 	udiv	r8, r8, r3
 8008508:	fb03 f908 	mul.w	r9, r3, r8
 800850c:	ea6f 0909 	mvn.w	r9, r9
 8008510:	4638      	mov	r0, r7
 8008512:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008516:	f1bc 0f09 	cmp.w	ip, #9
 800851a:	d815      	bhi.n	8008548 <_strtoul_l.constprop.0+0x88>
 800851c:	4664      	mov	r4, ip
 800851e:	42a3      	cmp	r3, r4
 8008520:	dd23      	ble.n	800856a <_strtoul_l.constprop.0+0xaa>
 8008522:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008526:	d007      	beq.n	8008538 <_strtoul_l.constprop.0+0x78>
 8008528:	4580      	cmp	r8, r0
 800852a:	d31b      	bcc.n	8008564 <_strtoul_l.constprop.0+0xa4>
 800852c:	d101      	bne.n	8008532 <_strtoul_l.constprop.0+0x72>
 800852e:	45a1      	cmp	r9, r4
 8008530:	db18      	blt.n	8008564 <_strtoul_l.constprop.0+0xa4>
 8008532:	fb00 4003 	mla	r0, r0, r3, r4
 8008536:	2701      	movs	r7, #1
 8008538:	f815 4b01 	ldrb.w	r4, [r5], #1
 800853c:	e7e9      	b.n	8008512 <_strtoul_l.constprop.0+0x52>
 800853e:	2c2b      	cmp	r4, #43	; 0x2b
 8008540:	bf04      	itt	eq
 8008542:	782c      	ldrbeq	r4, [r5, #0]
 8008544:	1c85      	addeq	r5, r0, #2
 8008546:	e7cc      	b.n	80084e2 <_strtoul_l.constprop.0+0x22>
 8008548:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800854c:	f1bc 0f19 	cmp.w	ip, #25
 8008550:	d801      	bhi.n	8008556 <_strtoul_l.constprop.0+0x96>
 8008552:	3c37      	subs	r4, #55	; 0x37
 8008554:	e7e3      	b.n	800851e <_strtoul_l.constprop.0+0x5e>
 8008556:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800855a:	f1bc 0f19 	cmp.w	ip, #25
 800855e:	d804      	bhi.n	800856a <_strtoul_l.constprop.0+0xaa>
 8008560:	3c57      	subs	r4, #87	; 0x57
 8008562:	e7dc      	b.n	800851e <_strtoul_l.constprop.0+0x5e>
 8008564:	f04f 37ff 	mov.w	r7, #4294967295
 8008568:	e7e6      	b.n	8008538 <_strtoul_l.constprop.0+0x78>
 800856a:	1c7b      	adds	r3, r7, #1
 800856c:	d106      	bne.n	800857c <_strtoul_l.constprop.0+0xbc>
 800856e:	2322      	movs	r3, #34	; 0x22
 8008570:	f8ce 3000 	str.w	r3, [lr]
 8008574:	4638      	mov	r0, r7
 8008576:	b932      	cbnz	r2, 8008586 <_strtoul_l.constprop.0+0xc6>
 8008578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800857c:	b106      	cbz	r6, 8008580 <_strtoul_l.constprop.0+0xc0>
 800857e:	4240      	negs	r0, r0
 8008580:	2a00      	cmp	r2, #0
 8008582:	d0f9      	beq.n	8008578 <_strtoul_l.constprop.0+0xb8>
 8008584:	b107      	cbz	r7, 8008588 <_strtoul_l.constprop.0+0xc8>
 8008586:	1e69      	subs	r1, r5, #1
 8008588:	6011      	str	r1, [r2, #0]
 800858a:	e7f5      	b.n	8008578 <_strtoul_l.constprop.0+0xb8>
 800858c:	2430      	movs	r4, #48	; 0x30
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1b5      	bne.n	80084fe <_strtoul_l.constprop.0+0x3e>
 8008592:	2308      	movs	r3, #8
 8008594:	e7b3      	b.n	80084fe <_strtoul_l.constprop.0+0x3e>
 8008596:	2c30      	cmp	r4, #48	; 0x30
 8008598:	d0a9      	beq.n	80084ee <_strtoul_l.constprop.0+0x2e>
 800859a:	230a      	movs	r3, #10
 800859c:	e7af      	b.n	80084fe <_strtoul_l.constprop.0+0x3e>
 800859e:	bf00      	nop
 80085a0:	08008bad 	.word	0x08008bad

080085a4 <_strtoul_r>:
 80085a4:	f7ff bf8c 	b.w	80084c0 <_strtoul_l.constprop.0>

080085a8 <__ascii_wctomb>:
 80085a8:	b149      	cbz	r1, 80085be <__ascii_wctomb+0x16>
 80085aa:	2aff      	cmp	r2, #255	; 0xff
 80085ac:	bf85      	ittet	hi
 80085ae:	238a      	movhi	r3, #138	; 0x8a
 80085b0:	6003      	strhi	r3, [r0, #0]
 80085b2:	700a      	strbls	r2, [r1, #0]
 80085b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80085b8:	bf98      	it	ls
 80085ba:	2001      	movls	r0, #1
 80085bc:	4770      	bx	lr
 80085be:	4608      	mov	r0, r1
 80085c0:	4770      	bx	lr
	...

080085c4 <fiprintf>:
 80085c4:	b40e      	push	{r1, r2, r3}
 80085c6:	b503      	push	{r0, r1, lr}
 80085c8:	4601      	mov	r1, r0
 80085ca:	ab03      	add	r3, sp, #12
 80085cc:	4805      	ldr	r0, [pc, #20]	; (80085e4 <fiprintf+0x20>)
 80085ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d2:	6800      	ldr	r0, [r0, #0]
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	f000 f83f 	bl	8008658 <_vfiprintf_r>
 80085da:	b002      	add	sp, #8
 80085dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e0:	b003      	add	sp, #12
 80085e2:	4770      	bx	lr
 80085e4:	20000064 	.word	0x20000064

080085e8 <abort>:
 80085e8:	b508      	push	{r3, lr}
 80085ea:	2006      	movs	r0, #6
 80085ec:	f000 fa0c 	bl	8008a08 <raise>
 80085f0:	2001      	movs	r0, #1
 80085f2:	f7f8 fe29 	bl	8001248 <_exit>

080085f6 <_malloc_usable_size_r>:
 80085f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fa:	1f18      	subs	r0, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bfbc      	itt	lt
 8008600:	580b      	ldrlt	r3, [r1, r0]
 8008602:	18c0      	addlt	r0, r0, r3
 8008604:	4770      	bx	lr

08008606 <__sfputc_r>:
 8008606:	6893      	ldr	r3, [r2, #8]
 8008608:	3b01      	subs	r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	b410      	push	{r4}
 800860e:	6093      	str	r3, [r2, #8]
 8008610:	da08      	bge.n	8008624 <__sfputc_r+0x1e>
 8008612:	6994      	ldr	r4, [r2, #24]
 8008614:	42a3      	cmp	r3, r4
 8008616:	db01      	blt.n	800861c <__sfputc_r+0x16>
 8008618:	290a      	cmp	r1, #10
 800861a:	d103      	bne.n	8008624 <__sfputc_r+0x1e>
 800861c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008620:	f000 b934 	b.w	800888c <__swbuf_r>
 8008624:	6813      	ldr	r3, [r2, #0]
 8008626:	1c58      	adds	r0, r3, #1
 8008628:	6010      	str	r0, [r2, #0]
 800862a:	7019      	strb	r1, [r3, #0]
 800862c:	4608      	mov	r0, r1
 800862e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008632:	4770      	bx	lr

08008634 <__sfputs_r>:
 8008634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008636:	4606      	mov	r6, r0
 8008638:	460f      	mov	r7, r1
 800863a:	4614      	mov	r4, r2
 800863c:	18d5      	adds	r5, r2, r3
 800863e:	42ac      	cmp	r4, r5
 8008640:	d101      	bne.n	8008646 <__sfputs_r+0x12>
 8008642:	2000      	movs	r0, #0
 8008644:	e007      	b.n	8008656 <__sfputs_r+0x22>
 8008646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864a:	463a      	mov	r2, r7
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff ffda 	bl	8008606 <__sfputc_r>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d1f3      	bne.n	800863e <__sfputs_r+0xa>
 8008656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008658 <_vfiprintf_r>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	460d      	mov	r5, r1
 800865e:	b09d      	sub	sp, #116	; 0x74
 8008660:	4614      	mov	r4, r2
 8008662:	4698      	mov	r8, r3
 8008664:	4606      	mov	r6, r0
 8008666:	b118      	cbz	r0, 8008670 <_vfiprintf_r+0x18>
 8008668:	6a03      	ldr	r3, [r0, #32]
 800866a:	b90b      	cbnz	r3, 8008670 <_vfiprintf_r+0x18>
 800866c:	f7fc f9d4 	bl	8004a18 <__sinit>
 8008670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008672:	07d9      	lsls	r1, r3, #31
 8008674:	d405      	bmi.n	8008682 <_vfiprintf_r+0x2a>
 8008676:	89ab      	ldrh	r3, [r5, #12]
 8008678:	059a      	lsls	r2, r3, #22
 800867a:	d402      	bmi.n	8008682 <_vfiprintf_r+0x2a>
 800867c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800867e:	f7fc fb22 	bl	8004cc6 <__retarget_lock_acquire_recursive>
 8008682:	89ab      	ldrh	r3, [r5, #12]
 8008684:	071b      	lsls	r3, r3, #28
 8008686:	d501      	bpl.n	800868c <_vfiprintf_r+0x34>
 8008688:	692b      	ldr	r3, [r5, #16]
 800868a:	b99b      	cbnz	r3, 80086b4 <_vfiprintf_r+0x5c>
 800868c:	4629      	mov	r1, r5
 800868e:	4630      	mov	r0, r6
 8008690:	f000 f93a 	bl	8008908 <__swsetup_r>
 8008694:	b170      	cbz	r0, 80086b4 <_vfiprintf_r+0x5c>
 8008696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008698:	07dc      	lsls	r4, r3, #31
 800869a:	d504      	bpl.n	80086a6 <_vfiprintf_r+0x4e>
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	b01d      	add	sp, #116	; 0x74
 80086a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	0598      	lsls	r0, r3, #22
 80086aa:	d4f7      	bmi.n	800869c <_vfiprintf_r+0x44>
 80086ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ae:	f7fc fb0b 	bl	8004cc8 <__retarget_lock_release_recursive>
 80086b2:	e7f3      	b.n	800869c <_vfiprintf_r+0x44>
 80086b4:	2300      	movs	r3, #0
 80086b6:	9309      	str	r3, [sp, #36]	; 0x24
 80086b8:	2320      	movs	r3, #32
 80086ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086be:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c2:	2330      	movs	r3, #48	; 0x30
 80086c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008878 <_vfiprintf_r+0x220>
 80086c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086cc:	f04f 0901 	mov.w	r9, #1
 80086d0:	4623      	mov	r3, r4
 80086d2:	469a      	mov	sl, r3
 80086d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086d8:	b10a      	cbz	r2, 80086de <_vfiprintf_r+0x86>
 80086da:	2a25      	cmp	r2, #37	; 0x25
 80086dc:	d1f9      	bne.n	80086d2 <_vfiprintf_r+0x7a>
 80086de:	ebba 0b04 	subs.w	fp, sl, r4
 80086e2:	d00b      	beq.n	80086fc <_vfiprintf_r+0xa4>
 80086e4:	465b      	mov	r3, fp
 80086e6:	4622      	mov	r2, r4
 80086e8:	4629      	mov	r1, r5
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7ff ffa2 	bl	8008634 <__sfputs_r>
 80086f0:	3001      	adds	r0, #1
 80086f2:	f000 80a9 	beq.w	8008848 <_vfiprintf_r+0x1f0>
 80086f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086f8:	445a      	add	r2, fp
 80086fa:	9209      	str	r2, [sp, #36]	; 0x24
 80086fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80a1 	beq.w	8008848 <_vfiprintf_r+0x1f0>
 8008706:	2300      	movs	r3, #0
 8008708:	f04f 32ff 	mov.w	r2, #4294967295
 800870c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008710:	f10a 0a01 	add.w	sl, sl, #1
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	9307      	str	r3, [sp, #28]
 8008718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800871c:	931a      	str	r3, [sp, #104]	; 0x68
 800871e:	4654      	mov	r4, sl
 8008720:	2205      	movs	r2, #5
 8008722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008726:	4854      	ldr	r0, [pc, #336]	; (8008878 <_vfiprintf_r+0x220>)
 8008728:	f7f7 fd52 	bl	80001d0 <memchr>
 800872c:	9a04      	ldr	r2, [sp, #16]
 800872e:	b9d8      	cbnz	r0, 8008768 <_vfiprintf_r+0x110>
 8008730:	06d1      	lsls	r1, r2, #27
 8008732:	bf44      	itt	mi
 8008734:	2320      	movmi	r3, #32
 8008736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873a:	0713      	lsls	r3, r2, #28
 800873c:	bf44      	itt	mi
 800873e:	232b      	movmi	r3, #43	; 0x2b
 8008740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008744:	f89a 3000 	ldrb.w	r3, [sl]
 8008748:	2b2a      	cmp	r3, #42	; 0x2a
 800874a:	d015      	beq.n	8008778 <_vfiprintf_r+0x120>
 800874c:	9a07      	ldr	r2, [sp, #28]
 800874e:	4654      	mov	r4, sl
 8008750:	2000      	movs	r0, #0
 8008752:	f04f 0c0a 	mov.w	ip, #10
 8008756:	4621      	mov	r1, r4
 8008758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800875c:	3b30      	subs	r3, #48	; 0x30
 800875e:	2b09      	cmp	r3, #9
 8008760:	d94d      	bls.n	80087fe <_vfiprintf_r+0x1a6>
 8008762:	b1b0      	cbz	r0, 8008792 <_vfiprintf_r+0x13a>
 8008764:	9207      	str	r2, [sp, #28]
 8008766:	e014      	b.n	8008792 <_vfiprintf_r+0x13a>
 8008768:	eba0 0308 	sub.w	r3, r0, r8
 800876c:	fa09 f303 	lsl.w	r3, r9, r3
 8008770:	4313      	orrs	r3, r2
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	46a2      	mov	sl, r4
 8008776:	e7d2      	b.n	800871e <_vfiprintf_r+0xc6>
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	1d19      	adds	r1, r3, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	9103      	str	r1, [sp, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfbb      	ittet	lt
 8008784:	425b      	neglt	r3, r3
 8008786:	f042 0202 	orrlt.w	r2, r2, #2
 800878a:	9307      	strge	r3, [sp, #28]
 800878c:	9307      	strlt	r3, [sp, #28]
 800878e:	bfb8      	it	lt
 8008790:	9204      	strlt	r2, [sp, #16]
 8008792:	7823      	ldrb	r3, [r4, #0]
 8008794:	2b2e      	cmp	r3, #46	; 0x2e
 8008796:	d10c      	bne.n	80087b2 <_vfiprintf_r+0x15a>
 8008798:	7863      	ldrb	r3, [r4, #1]
 800879a:	2b2a      	cmp	r3, #42	; 0x2a
 800879c:	d134      	bne.n	8008808 <_vfiprintf_r+0x1b0>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	1d1a      	adds	r2, r3, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	9203      	str	r2, [sp, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfb8      	it	lt
 80087aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80087ae:	3402      	adds	r4, #2
 80087b0:	9305      	str	r3, [sp, #20]
 80087b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008888 <_vfiprintf_r+0x230>
 80087b6:	7821      	ldrb	r1, [r4, #0]
 80087b8:	2203      	movs	r2, #3
 80087ba:	4650      	mov	r0, sl
 80087bc:	f7f7 fd08 	bl	80001d0 <memchr>
 80087c0:	b138      	cbz	r0, 80087d2 <_vfiprintf_r+0x17a>
 80087c2:	9b04      	ldr	r3, [sp, #16]
 80087c4:	eba0 000a 	sub.w	r0, r0, sl
 80087c8:	2240      	movs	r2, #64	; 0x40
 80087ca:	4082      	lsls	r2, r0
 80087cc:	4313      	orrs	r3, r2
 80087ce:	3401      	adds	r4, #1
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d6:	4829      	ldr	r0, [pc, #164]	; (800887c <_vfiprintf_r+0x224>)
 80087d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087dc:	2206      	movs	r2, #6
 80087de:	f7f7 fcf7 	bl	80001d0 <memchr>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d03f      	beq.n	8008866 <_vfiprintf_r+0x20e>
 80087e6:	4b26      	ldr	r3, [pc, #152]	; (8008880 <_vfiprintf_r+0x228>)
 80087e8:	bb1b      	cbnz	r3, 8008832 <_vfiprintf_r+0x1da>
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	3307      	adds	r3, #7
 80087ee:	f023 0307 	bic.w	r3, r3, #7
 80087f2:	3308      	adds	r3, #8
 80087f4:	9303      	str	r3, [sp, #12]
 80087f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f8:	443b      	add	r3, r7
 80087fa:	9309      	str	r3, [sp, #36]	; 0x24
 80087fc:	e768      	b.n	80086d0 <_vfiprintf_r+0x78>
 80087fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008802:	460c      	mov	r4, r1
 8008804:	2001      	movs	r0, #1
 8008806:	e7a6      	b.n	8008756 <_vfiprintf_r+0xfe>
 8008808:	2300      	movs	r3, #0
 800880a:	3401      	adds	r4, #1
 800880c:	9305      	str	r3, [sp, #20]
 800880e:	4619      	mov	r1, r3
 8008810:	f04f 0c0a 	mov.w	ip, #10
 8008814:	4620      	mov	r0, r4
 8008816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800881a:	3a30      	subs	r2, #48	; 0x30
 800881c:	2a09      	cmp	r2, #9
 800881e:	d903      	bls.n	8008828 <_vfiprintf_r+0x1d0>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0c6      	beq.n	80087b2 <_vfiprintf_r+0x15a>
 8008824:	9105      	str	r1, [sp, #20]
 8008826:	e7c4      	b.n	80087b2 <_vfiprintf_r+0x15a>
 8008828:	fb0c 2101 	mla	r1, ip, r1, r2
 800882c:	4604      	mov	r4, r0
 800882e:	2301      	movs	r3, #1
 8008830:	e7f0      	b.n	8008814 <_vfiprintf_r+0x1bc>
 8008832:	ab03      	add	r3, sp, #12
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	462a      	mov	r2, r5
 8008838:	4b12      	ldr	r3, [pc, #72]	; (8008884 <_vfiprintf_r+0x22c>)
 800883a:	a904      	add	r1, sp, #16
 800883c:	4630      	mov	r0, r6
 800883e:	f7fb fa89 	bl	8003d54 <_printf_float>
 8008842:	4607      	mov	r7, r0
 8008844:	1c78      	adds	r0, r7, #1
 8008846:	d1d6      	bne.n	80087f6 <_vfiprintf_r+0x19e>
 8008848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800884a:	07d9      	lsls	r1, r3, #31
 800884c:	d405      	bmi.n	800885a <_vfiprintf_r+0x202>
 800884e:	89ab      	ldrh	r3, [r5, #12]
 8008850:	059a      	lsls	r2, r3, #22
 8008852:	d402      	bmi.n	800885a <_vfiprintf_r+0x202>
 8008854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008856:	f7fc fa37 	bl	8004cc8 <__retarget_lock_release_recursive>
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	065b      	lsls	r3, r3, #25
 800885e:	f53f af1d 	bmi.w	800869c <_vfiprintf_r+0x44>
 8008862:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008864:	e71c      	b.n	80086a0 <_vfiprintf_r+0x48>
 8008866:	ab03      	add	r3, sp, #12
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	462a      	mov	r2, r5
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <_vfiprintf_r+0x22c>)
 800886e:	a904      	add	r1, sp, #16
 8008870:	4630      	mov	r0, r6
 8008872:	f7fb fd13 	bl	800429c <_printf_i>
 8008876:	e7e4      	b.n	8008842 <_vfiprintf_r+0x1ea>
 8008878:	08008f20 	.word	0x08008f20
 800887c:	08008f2a 	.word	0x08008f2a
 8008880:	08003d55 	.word	0x08003d55
 8008884:	08008635 	.word	0x08008635
 8008888:	08008f26 	.word	0x08008f26

0800888c <__swbuf_r>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	460e      	mov	r6, r1
 8008890:	4614      	mov	r4, r2
 8008892:	4605      	mov	r5, r0
 8008894:	b118      	cbz	r0, 800889e <__swbuf_r+0x12>
 8008896:	6a03      	ldr	r3, [r0, #32]
 8008898:	b90b      	cbnz	r3, 800889e <__swbuf_r+0x12>
 800889a:	f7fc f8bd 	bl	8004a18 <__sinit>
 800889e:	69a3      	ldr	r3, [r4, #24]
 80088a0:	60a3      	str	r3, [r4, #8]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	071a      	lsls	r2, r3, #28
 80088a6:	d525      	bpl.n	80088f4 <__swbuf_r+0x68>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	b31b      	cbz	r3, 80088f4 <__swbuf_r+0x68>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	6922      	ldr	r2, [r4, #16]
 80088b0:	1a98      	subs	r0, r3, r2
 80088b2:	6963      	ldr	r3, [r4, #20]
 80088b4:	b2f6      	uxtb	r6, r6
 80088b6:	4283      	cmp	r3, r0
 80088b8:	4637      	mov	r7, r6
 80088ba:	dc04      	bgt.n	80088c6 <__swbuf_r+0x3a>
 80088bc:	4621      	mov	r1, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	f7ff f952 	bl	8007b68 <_fflush_r>
 80088c4:	b9e0      	cbnz	r0, 8008900 <__swbuf_r+0x74>
 80088c6:	68a3      	ldr	r3, [r4, #8]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	60a3      	str	r3, [r4, #8]
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	6022      	str	r2, [r4, #0]
 80088d2:	701e      	strb	r6, [r3, #0]
 80088d4:	6962      	ldr	r2, [r4, #20]
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	429a      	cmp	r2, r3
 80088da:	d004      	beq.n	80088e6 <__swbuf_r+0x5a>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	07db      	lsls	r3, r3, #31
 80088e0:	d506      	bpl.n	80088f0 <__swbuf_r+0x64>
 80088e2:	2e0a      	cmp	r6, #10
 80088e4:	d104      	bne.n	80088f0 <__swbuf_r+0x64>
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f7ff f93d 	bl	8007b68 <_fflush_r>
 80088ee:	b938      	cbnz	r0, 8008900 <__swbuf_r+0x74>
 80088f0:	4638      	mov	r0, r7
 80088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f4:	4621      	mov	r1, r4
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 f806 	bl	8008908 <__swsetup_r>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d0d5      	beq.n	80088ac <__swbuf_r+0x20>
 8008900:	f04f 37ff 	mov.w	r7, #4294967295
 8008904:	e7f4      	b.n	80088f0 <__swbuf_r+0x64>
	...

08008908 <__swsetup_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4b2a      	ldr	r3, [pc, #168]	; (80089b4 <__swsetup_r+0xac>)
 800890c:	4605      	mov	r5, r0
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	460c      	mov	r4, r1
 8008912:	b118      	cbz	r0, 800891c <__swsetup_r+0x14>
 8008914:	6a03      	ldr	r3, [r0, #32]
 8008916:	b90b      	cbnz	r3, 800891c <__swsetup_r+0x14>
 8008918:	f7fc f87e 	bl	8004a18 <__sinit>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008922:	0718      	lsls	r0, r3, #28
 8008924:	d422      	bmi.n	800896c <__swsetup_r+0x64>
 8008926:	06d9      	lsls	r1, r3, #27
 8008928:	d407      	bmi.n	800893a <__swsetup_r+0x32>
 800892a:	2309      	movs	r3, #9
 800892c:	602b      	str	r3, [r5, #0]
 800892e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	e034      	b.n	80089a4 <__swsetup_r+0x9c>
 800893a:	0758      	lsls	r0, r3, #29
 800893c:	d512      	bpl.n	8008964 <__swsetup_r+0x5c>
 800893e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008940:	b141      	cbz	r1, 8008954 <__swsetup_r+0x4c>
 8008942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008946:	4299      	cmp	r1, r3
 8008948:	d002      	beq.n	8008950 <__swsetup_r+0x48>
 800894a:	4628      	mov	r0, r5
 800894c:	f7fd f84e 	bl	80059ec <_free_r>
 8008950:	2300      	movs	r3, #0
 8008952:	6363      	str	r3, [r4, #52]	; 0x34
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	2300      	movs	r3, #0
 800895e:	6063      	str	r3, [r4, #4]
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	6023      	str	r3, [r4, #0]
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f043 0308 	orr.w	r3, r3, #8
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	b94b      	cbnz	r3, 8008984 <__swsetup_r+0x7c>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800897a:	d003      	beq.n	8008984 <__swsetup_r+0x7c>
 800897c:	4621      	mov	r1, r4
 800897e:	4628      	mov	r0, r5
 8008980:	f000 f884 	bl	8008a8c <__smakebuf_r>
 8008984:	89a0      	ldrh	r0, [r4, #12]
 8008986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800898a:	f010 0301 	ands.w	r3, r0, #1
 800898e:	d00a      	beq.n	80089a6 <__swsetup_r+0x9e>
 8008990:	2300      	movs	r3, #0
 8008992:	60a3      	str	r3, [r4, #8]
 8008994:	6963      	ldr	r3, [r4, #20]
 8008996:	425b      	negs	r3, r3
 8008998:	61a3      	str	r3, [r4, #24]
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	b943      	cbnz	r3, 80089b0 <__swsetup_r+0xa8>
 800899e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089a2:	d1c4      	bne.n	800892e <__swsetup_r+0x26>
 80089a4:	bd38      	pop	{r3, r4, r5, pc}
 80089a6:	0781      	lsls	r1, r0, #30
 80089a8:	bf58      	it	pl
 80089aa:	6963      	ldrpl	r3, [r4, #20]
 80089ac:	60a3      	str	r3, [r4, #8]
 80089ae:	e7f4      	b.n	800899a <__swsetup_r+0x92>
 80089b0:	2000      	movs	r0, #0
 80089b2:	e7f7      	b.n	80089a4 <__swsetup_r+0x9c>
 80089b4:	20000064 	.word	0x20000064

080089b8 <_raise_r>:
 80089b8:	291f      	cmp	r1, #31
 80089ba:	b538      	push	{r3, r4, r5, lr}
 80089bc:	4604      	mov	r4, r0
 80089be:	460d      	mov	r5, r1
 80089c0:	d904      	bls.n	80089cc <_raise_r+0x14>
 80089c2:	2316      	movs	r3, #22
 80089c4:	6003      	str	r3, [r0, #0]
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089ce:	b112      	cbz	r2, 80089d6 <_raise_r+0x1e>
 80089d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089d4:	b94b      	cbnz	r3, 80089ea <_raise_r+0x32>
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 f830 	bl	8008a3c <_getpid_r>
 80089dc:	462a      	mov	r2, r5
 80089de:	4601      	mov	r1, r0
 80089e0:	4620      	mov	r0, r4
 80089e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e6:	f000 b817 	b.w	8008a18 <_kill_r>
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d00a      	beq.n	8008a04 <_raise_r+0x4c>
 80089ee:	1c59      	adds	r1, r3, #1
 80089f0:	d103      	bne.n	80089fa <_raise_r+0x42>
 80089f2:	2316      	movs	r3, #22
 80089f4:	6003      	str	r3, [r0, #0]
 80089f6:	2001      	movs	r0, #1
 80089f8:	e7e7      	b.n	80089ca <_raise_r+0x12>
 80089fa:	2400      	movs	r4, #0
 80089fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a00:	4628      	mov	r0, r5
 8008a02:	4798      	blx	r3
 8008a04:	2000      	movs	r0, #0
 8008a06:	e7e0      	b.n	80089ca <_raise_r+0x12>

08008a08 <raise>:
 8008a08:	4b02      	ldr	r3, [pc, #8]	; (8008a14 <raise+0xc>)
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	f7ff bfd3 	b.w	80089b8 <_raise_r>
 8008a12:	bf00      	nop
 8008a14:	20000064 	.word	0x20000064

08008a18 <_kill_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d07      	ldr	r5, [pc, #28]	; (8008a38 <_kill_r+0x20>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	f7f8 fbff 	bl	8001228 <_kill>
 8008a2a:	1c43      	adds	r3, r0, #1
 8008a2c:	d102      	bne.n	8008a34 <_kill_r+0x1c>
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	b103      	cbz	r3, 8008a34 <_kill_r+0x1c>
 8008a32:	6023      	str	r3, [r4, #0]
 8008a34:	bd38      	pop	{r3, r4, r5, pc}
 8008a36:	bf00      	nop
 8008a38:	200004bc 	.word	0x200004bc

08008a3c <_getpid_r>:
 8008a3c:	f7f8 bbec 	b.w	8001218 <_getpid>

08008a40 <__swhatbuf_r>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	460c      	mov	r4, r1
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	b096      	sub	sp, #88	; 0x58
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	461e      	mov	r6, r3
 8008a50:	da0d      	bge.n	8008a6e <__swhatbuf_r+0x2e>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a58:	f04f 0100 	mov.w	r1, #0
 8008a5c:	bf0c      	ite	eq
 8008a5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a62:	2340      	movne	r3, #64	; 0x40
 8008a64:	2000      	movs	r0, #0
 8008a66:	6031      	str	r1, [r6, #0]
 8008a68:	602b      	str	r3, [r5, #0]
 8008a6a:	b016      	add	sp, #88	; 0x58
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
 8008a6e:	466a      	mov	r2, sp
 8008a70:	f000 f848 	bl	8008b04 <_fstat_r>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	dbec      	blt.n	8008a52 <__swhatbuf_r+0x12>
 8008a78:	9901      	ldr	r1, [sp, #4]
 8008a7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a82:	4259      	negs	r1, r3
 8008a84:	4159      	adcs	r1, r3
 8008a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a8a:	e7eb      	b.n	8008a64 <__swhatbuf_r+0x24>

08008a8c <__smakebuf_r>:
 8008a8c:	898b      	ldrh	r3, [r1, #12]
 8008a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a90:	079d      	lsls	r5, r3, #30
 8008a92:	4606      	mov	r6, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	d507      	bpl.n	8008aa8 <__smakebuf_r+0x1c>
 8008a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	6123      	str	r3, [r4, #16]
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	6163      	str	r3, [r4, #20]
 8008aa4:	b002      	add	sp, #8
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	ab01      	add	r3, sp, #4
 8008aaa:	466a      	mov	r2, sp
 8008aac:	f7ff ffc8 	bl	8008a40 <__swhatbuf_r>
 8008ab0:	9900      	ldr	r1, [sp, #0]
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7fd f80d 	bl	8005ad4 <_malloc_r>
 8008aba:	b948      	cbnz	r0, 8008ad0 <__smakebuf_r+0x44>
 8008abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac0:	059a      	lsls	r2, r3, #22
 8008ac2:	d4ef      	bmi.n	8008aa4 <__smakebuf_r+0x18>
 8008ac4:	f023 0303 	bic.w	r3, r3, #3
 8008ac8:	f043 0302 	orr.w	r3, r3, #2
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	e7e3      	b.n	8008a98 <__smakebuf_r+0xc>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	6020      	str	r0, [r4, #0]
 8008ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	9b00      	ldr	r3, [sp, #0]
 8008adc:	6163      	str	r3, [r4, #20]
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	6120      	str	r0, [r4, #16]
 8008ae2:	b15b      	cbz	r3, 8008afc <__smakebuf_r+0x70>
 8008ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 f81d 	bl	8008b28 <_isatty_r>
 8008aee:	b128      	cbz	r0, 8008afc <__smakebuf_r+0x70>
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	f023 0303 	bic.w	r3, r3, #3
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	431d      	orrs	r5, r3
 8008b00:	81a5      	strh	r5, [r4, #12]
 8008b02:	e7cf      	b.n	8008aa4 <__smakebuf_r+0x18>

08008b04 <_fstat_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d07      	ldr	r5, [pc, #28]	; (8008b24 <_fstat_r+0x20>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	f7f8 fbe8 	bl	80012e6 <_fstat>
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d102      	bne.n	8008b20 <_fstat_r+0x1c>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	b103      	cbz	r3, 8008b20 <_fstat_r+0x1c>
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	bf00      	nop
 8008b24:	200004bc 	.word	0x200004bc

08008b28 <_isatty_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d06      	ldr	r5, [pc, #24]	; (8008b44 <_isatty_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f8 fbe7 	bl	8001306 <_isatty>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_isatty_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_isatty_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200004bc 	.word	0x200004bc

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
